loadpkg gno.land/r/sys/names
loadpkg gno.land/r/gnoland/users/v1

adduser admin
adduser gui

patchpkg "g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj" $admin_user_addr # use our custom admin

gnoland start

# Check if sys/names is disabled
# gui call -> sys/names.IsEnabled
gnokey maketx call -pkgpath gno.land/r/sys/names -func IsEnabled -gas-fee 100000ugnot -gas-wanted 200000 -broadcast -chainid tendermint_test gui
stdout 'OK!'
stdout 'false'

# Gui should be able to addpkg on test1 addr
# gui addpkg -> gno.land/r/<addr_test1>/mysuperpkg
gnokey maketx addpkg -pkgdir $WORK -pkgpath gno.land/r/$test1_user_addr/mysuperpkg -gas-fee 1000000ugnot -gas-wanted 400000 -broadcast -chainid=tendermint_test gui
stdout 'OK!'

# Gui should be able to addpkg on random name
# gui addpkg -> gno.land/r/randomname/mysuperpkg
gnokey maketx addpkg -pkgdir $WORK -pkgpath gno.land/r/randomname/mysuperpkg -gas-fee 1000000ugnot -gas-wanted 350000 -broadcast -chainid=tendermint_test gui
stdout 'OK!'

# Enable `sys/names`
# admin call -> sys/names.Enable
gnokey maketx call -pkgpath gno.land/r/sys/names -func Enable -gas-fee 100000ugnot -gas-wanted 1000000 -broadcast -chainid tendermint_test admin
stdout 'OK!'

# Check that `sys/names` has been enabled
# gui call -> sys/names.IsEnabled
gnokey maketx call -pkgpath gno.land/r/sys/names -func IsEnabled -gas-fee 100000ugnot -gas-wanted 200000 -broadcast -chainid tendermint_test gui
stdout 'OK!'
stdout 'true'

# Try to add a pkg an with unregistered user
# gui addpkg -> gno.land/r/<addr_test1>/one
! gnokey maketx addpkg -pkgdir $WORK -pkgpath gno.land/r/$test1_user_addr/one -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test gui
stderr 'is not authorized to deploy packages to namespace'

# Try to add a pkg with an unregistered user, on their own address as namespace
# gui addpkg -> gno.land/r/<addr_gui>/one
gnokey maketx addpkg -pkgdir $WORK -pkgpath gno.land/r/$gui_user_addr/one -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test gui
stdout 'OK!'

## Test unregistered namespace

# Call addpkg with admin user on gui namespace
# admin addpkg -> gno.land/r/guiland/one
# This is expected to fail at the transaction simulation stage, which is why we set gas-wanted to 1.
! gnokey maketx addpkg -pkgdir $WORK -pkgpath gno.land/r/guiland/one -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test admin
stderr 'is not authorized to deploy packages to namespace'

## Test registered namespace

# test gui register namespace
# gui call -> gnoland/users/v1.Register
gnokey maketx call -pkgpath gno.land/r/gnoland/users/v1 -func Register -send "1000000ugnot" -gas-fee 1000000ugnot -gas-wanted 12000000 -broadcast -chainid=tendermint_test -args 'guigui123' gui
stdout 'OK!'

# Test gui publishing on guigui123/one
# gui addpkg -> gno.land/r/guigui123/one
gnokey maketx addpkg -pkgdir $WORK -pkgpath gno.land/r/guigui123/one -gas-fee 1000000ugnot -gas-wanted 2700000 -broadcast -chainid=tendermint_test gui
stdout 'OK!'

# Test admin publishing on guigui123/two
# admin addpkg -> gno.land/r/guigui123/two
! gnokey maketx addpkg -pkgdir $WORK -pkgpath gno.land/r/guigui123/two -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test admin
stderr 'is not authorized to deploy packages to namespace'

-- one.gno --
package one

func Render(path string) string {
    return "# Hello One"
}