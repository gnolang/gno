adduserfrom member 'success myself purchase tray reject demise scene little legend someone lunar hope media goat regular test area smart save flee surround attack rapid smoke'
stdout 'g1c0j899h88nwyvnzvh5jagpq6fkkyuj76nld6t0'

adduserfrom newmember 'smooth crawl poverty trumpet glare useful curtain annual pluck lunar example merge ready forum better verb rescue rule mechanic dynamic drift bench release weekend'
stdout 'g1rfznvu6qfa0sc76cplk5wpqexvefqccjunady0'

loadpkg gno.land/r/gov/dao
loadpkg gno.land/r/gov/dao/v3/impl

# load specific govDAO implementation and needed users for your integration test
loadpkg gno.land/r/gov/dao/v3/loader $WORK/loader

gnoland start

# call gov/dao render to check everything is working as expected and the loader worked
gnokey query vm/qrender --data 'gno.land/r/gov/dao:'

# try to add the proposal using a non-member
gnokey maketx run -gas-fee 1000000ugnot -gas-wanted 100000000 -broadcast -chainid=tendermint_test newmember $WORK/proposer/create_proposal.gno
stdout 'only members can create new proposals'

-- proposer/create_proposal.gno --
package main

import (
	"gno.land/r/gov/dao"
)

func main() {
	ex := dao.NewSafeExecutor(dao.NewSimpleExecutor(func(realm)error{return nil}, "desc"))
	pr := dao.NewProposalRequest("title", "desc", ex)
	_, err := dao.CreateProposal(cross, pr)
	println(err.Error())
}

-- loader/load_govdao.gno --
package load_govdao

import (
	"std"

	"gno.land/r/gov/dao"
	"gno.land/r/gov/dao/v3/impl"
	"gno.land/r/gov/dao/v3/memberstore"
)

func init() {
	memberstore.Get().SetTier(memberstore.T1)
	memberstore.Get().SetTier(memberstore.T2)
	memberstore.Get().SetTier(memberstore.T3)

	memberstore.Get().SetMember(memberstore.T1, std.Address("g1c0j899h88nwyvnzvh5jagpq6fkkyuj76nld6t0"), &memberstore.Member{InvitationPoints: 3}) // member address

	dao.UpdateImpl(cross, dao.UpdateRequest{
		DAO:         impl.GetInstance(),
		AllowedDAOs: []string{"gno.land/r/gov/dao/v3/impl"},
	})
}
