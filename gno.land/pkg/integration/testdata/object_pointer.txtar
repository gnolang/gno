# Load the packages and start the node
loadpkg gno.land/p/testing/bug_package $WORK/bug_package
loadpkg gno.land/r/testing/bug_callee $WORK/bug_callee
loadpkg gno.land/r/testing/bug_caller $WORK/bug_caller
gnoland start

# 1. (Working) Init the object, Set a value and Get the value
gnokey maketx call -pkgpath gno.land/r/testing/bug_caller -func WorkingNew -gas-fee 1000000ugnot -gas-wanted 14000000 -broadcast -chainid=tendermint_test test1
stdout 'OK!'
gnokey maketx call -pkgpath gno.land/r/testing/bug_caller -func Set -args 42 -gas-fee 1000000ugnot -gas-wanted 14000000 -broadcast -chainid=tendermint_test test1
stdout 'OK!'
gnokey query vm/qeval --data "gno.land/r/testing/bug_caller.Get()"
stdout '42 int' # Works as expected

# 2. (Also working)
gnokey maketx call -pkgpath gno.land/r/testing/bug_caller -func BuggedNew -gas-fee 1000000ugnot -gas-wanted 14000000 -broadcast -chainid=tendermint_test test1
stdout 'OK!'
gnokey maketx call -pkgpath gno.land/r/testing/bug_caller -func Set -args 42 -gas-fee 1000000ugnot -gas-wanted 14000000 -broadcast -chainid=tendermint_test test1
stdout 'OK!'
gnokey query vm/qeval --data "gno.land/r/testing/bug_caller.Get()"
stdout '42 int' # Works as expected


-- bug_package/bug_package.gno --
package bug_package

type PkgObject struct {
	value int
}

func New() *PkgObject {
	return &PkgObject{value: 0}
}

func (po *PkgObject) Set(value int) {
	po.value = value
}

func (po *PkgObject) Get() int {
	return po.value
}


-- bug_callee/bug_callee.gno --
package bug_callee

import (
	pkg "gno.land/p/testing/bug_package"
)

var calleePtr *pkg.PkgObject

func Register(callerPtr *pkg.PkgObject) {
	crossing()

	calleePtr = callerPtr
}


-- bug_caller/bug_caller.gno --
package bug_caller

import (
	pkg "gno.land/p/testing/bug_package"
	callee "gno.land/r/testing/bug_callee"
)

var callerPtr *pkg.PkgObject

func WorkingNew() {
	crossing()

	callerPtr = pkg.New()
}

func BuggedNew() {
	crossing()

	callerPtr = pkg.New()

	cross(callee.Register)(callerPtr)
}

func Set(value int) {
	crossing()

	callerPtr.Set(value)
}

func Get() int {
	return callerPtr.Get()
}
