## It tests unlocking token transfers through GovDAO voting
loadpkg gno.land/r/sys/params
loadpkg gno.land/r/gov/dao/v3/init
loadpkg gno.land/r/gov/dao
loadpkg gno.land/r/gnoland/users/v1

# add user regular1
adduserfrom regular1 'source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast' 1
stdout 'g18e22n23g462drp4pyszyl6e6mwxkaylthgeeq4'

# add user regular2
adduserfrom regular2 'source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast' 1 1
stdout 'g1mtmrdmqfu0aryqfl4aw65n35haw2wdjkh5p4cp'

## The -lock-transfer flag is not a Gnoland service flag; it is a flag for the txtar setting.
gnoland start -lock-transfer

## test1 is the DefaultAccount in the integration test. To ensure that the unrestricted account can send tokens even when token transfers are locked,
## we included it in the unrestricted account list in the genesis state. By default, the unrestricted account list is empty.
gnokey maketx send -send "9999999ugnot" -to $regular1_user_addr -gas-fee 10000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test1

stdout 'OK!'

gnokey maketx send -send "9999999ugnot" -to $regular2_user_addr -gas-fee 10000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test1

stdout 'OK!'

## Restricted simple token transfer for a regular account
! gnokey maketx send -send "100ugnot" -to g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 -gas-fee 10000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test regular1

stderr 'restricted token transfer error'

! gnokey maketx send -send "100ugnot" -to g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 -gas-fee 10000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test regular2

stderr 'restricted token transfer error'


## Load member as T1 to be able to vote afterwards
gnokey maketx run  -gas-fee 100000ugnot -gas-wanted 95000000 -broadcast -chainid=tendermint_test test1 $WORK/run/load_user.gno

## Submit a proposal to add a regular use as the unrestricted account.
gnokey maketx run  -gas-fee 100000ugnot -gas-wanted 95000000 -broadcast -chainid=tendermint_test test1 $WORK/run/propose_unrestricted.gno

stdout '0'

## Vote for the unrestricted account proposal using test1
gnokey maketx run  -gas-fee 100000ugnot -gas-wanted 95000000 -broadcast -chainid=tendermint_test test1 $WORK/run/vote_proposal.gno

stdout 'OK!'

## Execute the unrestricted account proposal using test1
gnokey maketx run  -gas-fee 100000ugnot -gas-wanted 95000000  -broadcast -chainid=tendermint_test test1 $WORK/run/exec_proposal.gno

stdout 'OK!'

## Token transfers for regular1 accounts is allowed.
gnokey maketx send -send "100ugnot" -to g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 -gas-fee 10000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test regular1

stdout 'OK!'

## Token transfers for regular2 accounts is allowed.
gnokey maketx send -send "100ugnot" -to g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 -gas-fee 10000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test regular2

stdout 'OK!'

## Verify the restricted address
gnokey query params/auth:p:unrestricted_addrs
stdout '["g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","g18e22n23g462drp4pyszyl6e6mwxkaylthgeeq4","g1mtmrdmqfu0aryqfl4aw65n35haw2wdjkh5p4cp"]'


## Submit a proposal to remove regular1 and regular2 as the unrestricted accounts.
gnokey maketx run  -gas-fee 100000ugnot -gas-wanted 95000000 -broadcast -chainid=tendermint_test test1 $WORK/run/propose_restricted.gno

stdout '1'

## Vote for the remove unrestricted account proposal using test1
gnokey maketx run  -gas-fee 100000ugnot -gas-wanted 95000000 -broadcast -chainid=tendermint_test test1 $WORK/run/vote_proposal1.gno

stdout 'OK!'

## Execute the remove unrestricted account proposal using test1
gnokey maketx run  -gas-fee 100000ugnot -gas-wanted 95000000  -broadcast -chainid=tendermint_test test1 $WORK/run/exec_proposal1.gno

stdout 'OK!'

## Verify the restricted address
gnokey query params/auth:p:unrestricted_addrs
stdout '["g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5"]'

## Restricted simple token transfer for a regular account
! gnokey maketx send -send "100ugnot" -to g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 -gas-fee 10000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test regular1

stderr 'restricted token transfer error'

! gnokey maketx send -send "100ugnot" -to g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 -gas-fee 10000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test regular2

stderr 'restricted token transfer error'

## Verify the restricted address
gnokey query params/auth:p:unrestricted_addrs
stdout '["g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5"]'


-- run/user_addr.gno --

package main

import(
  "std"
)

func main(){

  println(std.OriginCaller())

}

-- run/load_user.gno --
package main

import (
  i "gno.land/r/gov/dao/v3/init"
  "std"
)

func main() {
	i.InitWithUsers(std.Address("g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5"))
}

-- run/propose_unrestricted.gno --
package main

import (
  "gno.land/r/gov/dao"
  "gno.land/r/sys/params"
)

func main() {
	pr := params.ProposeAddUnrestrictedAcctsRequest("g18e22n23g462drp4pyszyl6e6mwxkaylthgeeq4","g1mtmrdmqfu0aryqfl4aw65n35haw2wdjkh5p4cp")
  pid := dao.MustCreateProposal(cross,pr)
  println(pid.String())
}

-- run/propose_restricted.gno --
package main

import (
  "gno.land/r/gov/dao"
  "gno.land/r/sys/params"
)

func main() {
	pr := params.ProposeRemoveUnrestrictedAcctsRequest("g18e22n23g462drp4pyszyl6e6mwxkaylthgeeq4","g1mtmrdmqfu0aryqfl4aw65n35haw2wdjkh5p4cp")
  pid := dao.MustCreateProposal(cross,pr)
  println(pid.String())
}


-- run/vote_proposal.gno --
package main

import (
  "gno.land/r/gov/dao"
)

func main() {
	dao.MustVoteOnProposal(cross,dao.VoteRequest{
		Option:     dao.YesVote,
		ProposalID: dao.ProposalID(0),
	})
}

-- run/exec_proposal.gno --
package main

import (
  "gno.land/r/gov/dao"
)

func main() {
	ok := dao.ExecuteProposal(cross,dao.ProposalID(0))
  if ok {
    println("OK!")
  }
}

-- run/vote_proposal1.gno --
package main

import (
  "gno.land/r/gov/dao"
)

func main() {
	dao.MustVoteOnProposal(cross,dao.VoteRequest{
		Option:     dao.YesVote,
		ProposalID: dao.ProposalID(1),
	})
}
-- run/exec_proposal1.gno --
package main

import (
  "gno.land/r/gov/dao"
)

func main() {
	ok := dao.ExecuteProposal(cross,dao.ProposalID(1))
  if ok {
    println("OK!")
  }
}
