adduser test2

## start a new node
gnoland start

## load packages
gnokey maketx addpkg -pkgdir $WORK/utils -pkgpath gno.land/p/test/utils -gas-fee 1000000ugnot -gas-wanted 20000000 -broadcast -chainid=tendermint_test test1
gnokey maketx addpkg -pkgdir $WORK/borrowrealm -pkgpath gno.land/r/test/borrowrealm -gas-fee 1000000ugnot -gas-wanted 20000000 -broadcast -chainid=tendermint_test test1
gnokey maketx addpkg -pkgdir $WORK/callerrealm -pkgpath gno.land/r/test/callerrealm -gas-fee 1000000ugnot -gas-wanted 20000000 -broadcast -chainid=tendermint_test test1

## execute NonCrossingMutation
! gnokey maketx call -pkgpath gno.land/r/test/callerrealm -func NonCrossingMutation -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test2
stderr 'cannot modify external-realm or non-realm object'

## execute CrossingMutation
gnokey maketx call -pkgpath gno.land/r/test/callerrealm -func CrossingMutation -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test2

## execute BorrowedObjectMutation
gnokey maketx call -pkgpath gno.land/r/test/callerrealm -func BorrowedObjectMutation -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test2

## execute ObjectMutationRootedAtCaller
gnokey maketx call -pkgpath gno.land/r/test/callerrealm -func ObjectMutationRootedAtCaller -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test2

## execute CallMutateObject
gnokey maketx call -pkgpath gno.land/r/test/callerrealm -func CallMutateObject -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test2

## execute InspectRealmsCrossing
gnokey maketx call -pkgpath gno.land/r/test/callerrealm -func InspectRealmsCrossing -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test2

## execute InspectRealmsNonCrossing
gnokey maketx call -pkgpath gno.land/r/test/callerrealm -func InspectRealmsNonCrossing -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test2

## execute MutateObjectWithBorrowCrossing
gnokey maketx call -pkgpath gno.land/r/test/callerrealm -func MutateObjectWithBorrowCrossing -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test2

## execute MutateCrossingObjectRootedAtCaller
! gnokey maketx call -pkgpath gno.land/r/test/callerrealm -func MutateCrossingObjectRootedAtCaller -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test2
stderr 'cannot directly modify readonly tainted object'

-- callerrealm/gno.mod --
module gno.land/r/test/callerrealm

-- callerrealm/main.gno --
package callerrealm

import (
    "gno.land/p/test/utils"
	"gno.land/r/test/borrowrealm"
)

var obj = borrowrealm.NewObject() // seems to be same thing with obj = borrowrealm.ObjectImpl{}

func NonCrossingMutation() {
    crossing()

    utils.AssertPreviousRealmPkgPath("")
    utils.AssertCurrentRealmPkgPath("gno.land/r/test/callerrealm")

    borrowrealm.Mutate()
}

func CrossingMutation() {
    crossing()

    cross(borrowrealm.MutateCrossing)()
}

func BorrowedObjectMutation() {
    crossing()

 	borrowrealm.Object.Mutate()
}

func ObjectMutationRootedAtCaller() {
    crossing()

 	obj.Mutate()
}

func CallMutateObject() {
    crossing()

    borrowrealm.MutateObject()
}

func InspectRealmsCrossing() {
    crossing()

    cross(borrowrealm.InspectRealmsCrossing)()
}

func InspectRealmsNonCrossing() {
    crossing()

    borrowrealm.InspectRealmsNonCrossing()
}

func MutateObjectWithBorrowCrossing() {
    crossing()

    cross(borrowrealm.MutateObjectWithBorrowCrossing)()
}

func MutateCrossingObject() {
    crossing()

    cross(borrowrealm.Object.MutateCrossing)()
}

func MutateCrossingObjectRootedAtCaller() {
    crossing()

    cross(obj.MutateCrossingObjectRootedAtCaller)()
}

-- borrowrealm/gno.mod --
module gno.land/r/test/borrowrealm

-- borrowrealm/main.gno --
package borrowrealm

import (
    "gno.land/p/test/utils"
)

var Object ObjectImplem
var value int

type ObjectImplem struct {
    value int
}

func NewObject() *ObjectImplem {
    return &ObjectImplem{}
}

func (o *ObjectImplem) MutateWithoutRealmCheck() {
    o.value++
}

func (o *ObjectImplem) Mutate() {
    utils.AssertPreviousRealmPkgPath("")
    utils.AssertCurrentRealmPkgPath("gno.land/r/test/callerrealm")

    o.value++
}

func (o *ObjectImplem) MutateCrossing() {
    crossing()

    utils.AssertPreviousRealmPkgPath("gno.land/r/test/callerrealm")
    utils.AssertCurrentRealmPkgPath("gno.land/r/test/borrowrealm")

    o.value++
}

func (o *ObjectImplem) MutateCrossingObjectRootedAtCaller() {
    crossing()

    utils.AssertPreviousRealmPkgPath("gno.land/r/test/callerrealm")
    utils.AssertCurrentRealmPkgPath("gno.land/r/test/borrowrealm")

    o.value++
}

func (o *ObjectImplem) MutateWithBorrowCrossing() {
    utils.AssertPreviousRealmPkgPath("gno.land/r/test/callerrealm")
    utils.AssertCurrentRealmPkgPath("gno.land/r/test/borrowrealm")

    o.value++
}

func InspectRealmsNonCrossing() {
    utils.AssertPreviousRealmPkgPath("")
    utils.AssertCurrentRealmPkgPath("gno.land/r/test/callerrealm")
}

func InspectRealmsCrossing() {
    crossing()

    utils.AssertPreviousRealmPkgPath("gno.land/r/test/callerrealm")
    utils.AssertCurrentRealmPkgPath("gno.land/r/test/borrowrealm")
}

func Mutate() {
    value++
}

func MutateCrossing() {
    crossing()

    value++
}

func MutateObject() {
    Object.Mutate()
}

func MutateObjectWithBorrowCrossing() {
    crossing()

    Object.MutateWithBorrowCrossing()
}

-- utils/utils.gno --
package utils

import (
    "std"
)

func AssertCurrentRealmPkgPath(expected string) {
    currentRealm := std.CurrentRealm().PkgPath()
    if currentRealm != expected {
        if expected == "" {
            expected = "empty"
        }
        panic("expected std.CurrentRealm().PkgPath() to return " + expected + ", got " + currentRealm)
    }
}

func AssertPreviousRealmPkgPath(expected string) {
    previousRealm := std.PreviousRealm().PkgPath()
    if previousRealm != expected {
        if expected == "" {
            expected = "empty"
        }
        panic("expected std.PreviousRealm().PkgPath() to return " + expected + ", got " + previousRealm)
    }
}