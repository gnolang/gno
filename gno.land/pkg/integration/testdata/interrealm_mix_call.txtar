adduser test2

loadpkg gno.land/p/demo/ufmt

## start a new node
gnoland start

## load packages
gnokey maketx addpkg -pkgdir $WORK/utils -pkgpath gno.land/p/test/utils -gas-fee 1000000ugnot -gas-wanted 20000000 -broadcast -chainid=tendermint_test test1
gnokey maketx addpkg -pkgdir $WORK/borrowrealm -pkgpath gno.land/r/test/borrowrealm -gas-fee 1000000ugnot -gas-wanted 20000000 -broadcast -chainid=tendermint_test test1
gnokey maketx addpkg -pkgdir $WORK/callerrealm -pkgpath gno.land/r/test/callerrealm -gas-fee 1000000ugnot -gas-wanted 20000000 -broadcast -chainid=tendermint_test test1

## validate initial state
gnokey query "vm/qrender" --data "gno.land/r/test/borrowrealm:"
stdout 'Object\.value = 0, value = 0'
gnokey query "vm/qrender" --data "gno.land/r/test/callerrealm:"
stdout 'obj\.value = 0'

## execute NonCrossingMutation
! gnokey maketx call -pkgpath gno.land/r/test/callerrealm -func NonCrossingMutation -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test2
stderr 'cannot modify external-realm or non-realm object'
gnokey query "vm/qrender" --data "gno.land/r/test/borrowrealm:"
stdout 'Object\.value = 0, value = 0'

## execute CrossingMutation
gnokey maketx call -pkgpath gno.land/r/test/callerrealm -func CrossingMutation -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test2
gnokey query "vm/qrender" --data "gno.land/r/test/borrowrealm:"
stdout 'Object\.value = 0, value = 1'

## execute NonCrossingObjectMutation
gnokey maketx call -pkgpath gno.land/r/test/callerrealm -func NonCrossingObjectMutation -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test2
gnokey query "vm/qrender" --data "gno.land/r/test/borrowrealm:"
stdout 'Object\.value = 1, value = 1'

## execute ObjectMutationRootedAtCaller
gnokey maketx call -pkgpath gno.land/r/test/callerrealm -func ObjectMutationRootedAtCaller -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test2
gnokey query "vm/qrender" --data "gno.land/r/test/callerrealm:"
stdout 'obj\.value = 1'

## execute CallMutateObject
gnokey maketx call -pkgpath gno.land/r/test/callerrealm -func CallMutateObject -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test2
gnokey query "vm/qrender" --data "gno.land/r/test/borrowrealm:"
stdout 'Object\.value = 2, value = 1'

## execute InspectRealmsCrossing
gnokey maketx call -pkgpath gno.land/r/test/callerrealm -func InspectRealmsCrossing -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test2

## execute InspectRealmsNonCrossing
gnokey maketx call -pkgpath gno.land/r/test/callerrealm -func InspectRealmsNonCrossing -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test2

## execute MutateObjectWithBorrowCrossing
gnokey maketx call -pkgpath gno.land/r/test/callerrealm -func MutateObjectWithBorrowCrossing -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test2
gnokey query "vm/qrender" --data "gno.land/r/test/borrowrealm:"
stdout 'Object\.value = 3, value = 1'

## execute MutateCrossingObjectRootedAtCaller
! gnokey maketx call -pkgpath gno.land/r/test/callerrealm -func MutateCrossingObjectRootedAtCaller -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test2
stderr 'cannot directly modify readonly tainted object'
gnokey query "vm/qrender" --data "gno.land/r/test/callerrealm:"
stdout 'obj\.value = 1'

-- callerrealm/gnomod.toml --
module = "gno.land/r/test/callerrealm"
gno = "0.9"

-- callerrealm/main.gno --
package callerrealm

import (
 	"gno.land/p/test/utils"
	"gno.land/r/test/borrowrealm"
	"gno.land/p/demo/ufmt"
)

var obj = borrowrealm.NewObject() // seems to be same thing with obj = borrowrealm.ObjectImpl{}

func NonCrossingMutation(cur realm) {
 	utils.AssertPreviousRealmPkgPath("")
 	utils.AssertCurrentRealmPkgPath("gno.land/r/test/callerrealm")

 	borrowrealm.Mutate()
}

func CrossingMutation(cur realm) {
 	borrowrealm.MutateCrossing(cross)
}

func NonCrossingObjectMutation(cur realm) {
 	borrowrealm.Object.Mutate()
}

func ObjectMutationRootedAtCaller(cur realm) {
 	obj.Mutate()
}

func CallMutateObject(cur realm) {
 	borrowrealm.MutateObject()
}

func InspectRealmsCrossing(cur realm) {
 	borrowrealm.InspectRealmsCrossing(cross)
}

func InspectRealmsNonCrossing(cur realm) {
 	borrowrealm.InspectRealmsNonCrossing()
}

func MutateObjectWithBorrowCrossing(cur realm) {
 	borrowrealm.MutateObjectWithBorrowCrossing(cross)
}

func MutateCrossingObject(cur realm) {
 	borrowrealm.Object.MutateCrossing(cross)
}

func MutateCrossingObjectRootedAtCaller(cur realm) {
 	obj.MutateCrossingObjectRootedAtCaller(cross)
}

func Render(_ string) string {
 	return ufmt.Sprintf("obj.value = %s", obj.String())
}

-- borrowrealm/gnomod.toml --
module = "gno.land/r/test/borrowrealm"
gno = "0.9"

-- borrowrealm/main.gno --
package borrowrealm

import (
 	"gno.land/p/test/utils"
	"gno.land/p/demo/ufmt"
)

var Object ObjectImplem
var value int

type ObjectImplem struct {
 	value int
}

func NewObject() *ObjectImplem {
 	return &ObjectImplem{}
}

func (o *ObjectImplem) String() string {
	return ufmt.Sprintf("%d", o.value)
}

func (o *ObjectImplem) MutateWithoutRealmCheck() {
 	o.value++
}

func (o *ObjectImplem) Mutate() {
 	utils.AssertPreviousRealmPkgPath("")
 	utils.AssertCurrentRealmPkgPath("gno.land/r/test/callerrealm")

 	o.value++
}

func (o *ObjectImplem) MutateCrossing(cur realm) {
 	utils.AssertPreviousRealmPkgPath("gno.land/r/test/callerrealm")
 	utils.AssertCurrentRealmPkgPath("gno.land/r/test/borrowrealm")

 	o.value++
}

func (o *ObjectImplem) MutateCrossingObjectRootedAtCaller(cur realm) {
 	utils.AssertPreviousRealmPkgPath("gno.land/r/test/callerrealm")
 	utils.AssertCurrentRealmPkgPath("gno.land/r/test/borrowrealm")

 	o.value++
}

func (o *ObjectImplem) MutateWithBorrowCrossing() {
 	utils.AssertPreviousRealmPkgPath("gno.land/r/test/callerrealm")
 	utils.AssertCurrentRealmPkgPath("gno.land/r/test/borrowrealm")

 	o.value++
}

func InspectRealmsNonCrossing() {
 	utils.AssertPreviousRealmPkgPath("")
 	utils.AssertCurrentRealmPkgPath("gno.land/r/test/callerrealm")
}

func InspectRealmsCrossing(cur realm) {
 	utils.AssertPreviousRealmPkgPath("gno.land/r/test/callerrealm")
 	utils.AssertCurrentRealmPkgPath("gno.land/r/test/borrowrealm")
}

func Mutate() {
 	value++
}

func MutateCrossing(cur realm) {
 	value++
}

func MutateObject() {
 	Object.Mutate()
}

func MutateObjectWithBorrowCrossing(cur realm) {
 	Object.MutateWithBorrowCrossing()
}

func Render(_ string) string {
 	return ufmt.Sprintf("Object.value = %d, value = %d\n", Object.value, value)
}

-- utils/gnomod.toml --
module = "gno.land/p/test/utils"
gno = "0.9"

-- utils/utils.gno --
package utils

import (
 	"std"
)

func AssertCurrentRealmPkgPath(expected string) {
 	currentRealm := std.CurrentRealm().PkgPath()
 	if currentRealm != expected {
 	 	if expected == "" {
 	 	 	expected = "empty"
 	 	}
 	 	panic("expected std.CurrentRealm().PkgPath() to return " + expected + ", got " + currentRealm)
 	}
}

func AssertPreviousRealmPkgPath(expected string) {
 	previousRealm := std.PreviousRealm().PkgPath()
 	if previousRealm != expected {
 	 	if expected == "" {
 	 	 	expected = "empty"
 	 	}
 	 	panic("expected std.PreviousRealm().PkgPath() to return " + expected + ", got " + previousRealm)
 	}
}