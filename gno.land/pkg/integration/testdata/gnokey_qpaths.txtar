# aaa namespace
loadpkg gno.land/r/aaa/bbb/ccc $WORK
loadpkg gno.land/r/aaa/ccc/ddd $WORK
loadpkg gno.land/r/aaa $WORK

# bbb namespace
loadpkg gno.land/r/bbb/ccc $WORK
loadpkg gno.land/p/bbb/ccc/ppp $WORK
loadpkg gno.land/r/bbb/aaa $WORK
loadpkg gno.land/r/bbb0 $WORK

gnoland start

# query path for prefix
gnokey query vm/qpaths --data "gno.land/r/aaa"
cmp stdout aaa-qpaths.stdout.golden
cmp stderr empty_file

gnokey query vm/qpaths --data "gno.land/r/bbb"
cmp stdout bbb-qpaths.stdout.golden
cmp stderr empty_file

gnokey query vm/qpaths --data "gno.land/r/bbb/"
cmp stdout bbb-slash-qpaths.stdout.golden
cmp stderr empty_file

# query path for namespace
gnokey query vm/qpaths --data "@bbb"
cmp stdout bbb-name-qpaths.stdout.golden
cmp stderr empty_file

# query path for namespace
gnokey query vm/qpaths --data "@bbb/ccc"
cmp stdout bbb-name-subpath-qpaths.stdout.golden
cmp stderr empty_file

! gnokey query vm/qpaths --data "@invalid\\name"
cmp stdout invalid-name-qpaths.stdout.golden
cmp stderr invalid-name-qpaths.stderr.golden

gnokey query vm/qpaths --data "gno.land/r/ccc"
cmp stdout ccc-qpaths.stdout.golden
cmp stderr empty_file

gnokey query vm/qpaths?limit=5 --data "_"
cmp stdout stdlibs-qpaths.stdout.golden
cmp stderr empty_file


gnokey query vm/qpaths --data "_/encoding"
cmp stdout stdlibs-encoding-qpaths.stdout.golden
cmp stderr empty_file


gnokey query vm/qpaths?limit=5 --data ""
cmp stdout empty-qpaths.stdout.golden
cmp stderr empty_file

-- main.gno --
package main

func main() { println("A") }
-- aaa-qpaths.stdout.golden --
height: 0
data: gno.land/r/aaa
gno.land/r/aaa/bbb/ccc
gno.land/r/aaa/ccc/ddd
-- bbb-qpaths.stdout.golden --
height: 0
data: gno.land/r/bbb/aaa
gno.land/r/bbb/ccc
gno.land/r/bbb0
-- bbb-slash-qpaths.stdout.golden --
height: 0
data: gno.land/r/bbb/aaa
gno.land/r/bbb/ccc
-- bbb-name-qpaths.stdout.golden --
height: 0
data: gno.land/p/bbb/ccc/ppp
gno.land/r/bbb/aaa
gno.land/r/bbb/ccc
-- bbb-name-subpath-qpaths.stdout.golden --
height: 0
data: gno.land/p/bbb/ccc/ppp
gno.land/r/bbb/ccc
-- invalid-name-qpaths.stdout.golden --
Log: --= Error =--
Data: errors.FmtError{format:"invalid username format", args:[]interface {}(nil)}
Msg Traces:
--= /Error =--

-- invalid-name-qpaths.stderr.golden --
"gnokey" error: invalid username format
-- ccc-qpaths.stdout.golden --
height: 0
data: 
-- empty-qpaths.stdout.golden --
height: 0
data: bufio
bytes
crypto/bech32
crypto/chacha20
crypto/chacha20/chacha
-- stdlibs-qpaths.stdout.golden --
height: 0
data: bufio
bytes
crypto/bech32
crypto/chacha20
crypto/chacha20/chacha
-- stdlibs-encoding-qpaths.stdout.golden --
height: 0
data: encoding
encoding/base32
encoding/base64
encoding/binary
encoding/csv
encoding/hex
-- empty_file --
