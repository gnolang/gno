# test the storage deposit

## start a new node
gnoland start

gnokey maketx addpkg -pkgdir $WORK/realm -pkgpath gno.land/r/foo -gas-fee 1000000ugnot -gas-wanted 20000000 -max-deposit 472100ugnot -broadcast -chainid=tendermint_test test1
stdout OK!

gnokey query vm/qstorage --data gno.land/r/foo

stdout 'storage: 4721, deposit: 472100'

## Set an object with a smaller size. Exactly 2 bytes are released when we update the realm record from 'hello' to 'foo'.
gnokey maketx call -pkgpath gno.land/r/foo -func NewFoo -args "foo"  -gas-fee 1000000ugnot -gas-wanted 10000000  -broadcast -chainid=tendermint_test test1
stdout ''
stdout OK!

gnokey query vm/qstorage --data gno.land/r/foo
stdout 'storage: 4719, deposit: 471900'


## restart server
gnoland restart

## remove an object

 gnokey maketx call -pkgpath gno.land/r/foo -func Clear -gas-fee 1000000ugnot -gas-wanted 10000000  -broadcast -chainid=tendermint_test test1
 stdout ''
 stdout OK!

 gnokey query vm/qstorage --data gno.land/r/foo
 stdout 'storage: 4692, deposit: 469200'


 gnokey query auth/accounts/$test1_user_addr
 stdout '"coins": "9999996530800ugnot"'

## test storage deposit for package gno.land/p/foo
gnokey maketx addpkg -pkgdir $WORK/package -pkgpath gno.land/p/foo -gas-fee 1000000ugnot -gas-wanted 20000000 -max-deposit 299900ugnot -broadcast -chainid=tendermint_test test1
stdout OK!

gnokey query vm/qstorage --data gno.land/p/foo
stdout 'storage: 2999, deposit: 299900'

-- realm/gno.mod --
module gno.land/r/foo

-- realm/storage.gno --
package foo

var record Foo

func init(){
	cross(NewFoo)("hello")
}

type Foo struct{
  name string
}

func NewFoo(name string){
  crossing()
  record = Foo{name}
}
func SetName(n string){
  crossing()
  record.name = n
}

func GetName()string {
  return record.name
}

func Clear(){
  crossing()
  record = Foo{}
}


-- package/gno.mod --
module gno.land/p/foo

-- package/storage.gno --
package foo

type Foo struct{
  name string
}

var record Foo

func init(){
	NewFoo("hello")
}

func NewFoo(name string){
  record = Foo{name}
}
