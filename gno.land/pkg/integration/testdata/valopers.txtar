loadpkg gno.land/r/gnoland/valopers
loadpkg gno.land/r/gnoland/valopers_proposal
loadpkg gno.land/r/gov/dao

adduser regular1

gnoland start

# Add user as a member for govdao
gnokey maketx run  -gas-fee 100000ugnot -gas-wanted 95000000 -broadcast -chainid=tendermint_test test1 $WORK/run/load_user.gno

# add a valoper with a bad address
! gnokey maketx call -pkgpath gno.land/r/gnoland/valopers -func Register -gas-fee 1000000ugnot -gas-wanted 30000000 -send 20000000ugnot -args berty -args "My validator description" -args 1ut590acnamvhkrh4qz6dz9zt9e3hyu499u0gvl -args gpub1pgfj7ard9eg82cjtv4u4xetrwqer2dntxyfzxz3pq0skzdkmzu0r9h6gny6eg8c9dc303xrrudee6z4he4y7cs5rnjwmyf40yaj -broadcast -chainid=tendermint_test test1
stderr 'panic: invalid address'

# add a valoper with a bad pubkey
! gnokey maketx call -pkgpath gno.land/r/gnoland/valopers -func Register -gas-fee 1000000ugnot -gas-wanted 30000000 -send 20000000ugnot -args berty -args "My validator description" -args g1ut590acnamvhkrh4qz6dz9zt9e3hyu499u0gvl -args gpub1pgfj7ard9eg82cjtv4u4xetrwqer2dntxyfzxz3pq0skzdkmzu0r9h6gny6eg8c9dc303xrrudee6z4he4y7cs5rnjwmyf40zzz -broadcast -chainid=tendermint_test test1
stderr 'panic: invalid checksum'

# add a valoper
gnokey maketx call -pkgpath gno.land/r/gnoland/valopers -func Register -gas-fee 1000000ugnot -gas-wanted 30000000 -send 20000000ugnot -args berty -args "My validator description" -args g1ut590acnamvhkrh4qz6dz9zt9e3hyu499u0gvl -args gpub1pgfj7ard9eg82cjtv4u4xetrwqer2dntxyfzxz3pq0skzdkmzu0r9h6gny6eg8c9dc303xrrudee6z4he4y7cs5rnjwmyf40yaj -broadcast -chainid=tendermint_test test1
stdout OK!

# see the valoper in the Render
gnokey maketx call -pkgpath gno.land/r/gnoland/valopers -func Render -gas-fee 1000000ugnot -gas-wanted 10000000 -args "" -broadcast -chainid=tendermint_test test1
stdout OK!
stdout '\* \[berty\]'

# make a proposal for a non-existing valoper
! gnokey maketx run  -gas-fee 1000000ugnot -gas-wanted 95000000 -broadcast -chainid=tendermint_test test1 $WORK/run/new_proposal_bad.gno
stderr 'panic: valoper does not exist'

# make a proposal
gnokey maketx run  -gas-fee 1000000ugnot -gas-wanted 95000000 -broadcast -chainid=tendermint_test test1 $WORK/run/new_proposal_good.gno
stdout OK!

# see the valoper in gov/dao Render
gnokey maketx call -pkgpath gno.land/r/gov/dao -func Render -gas-fee 1000000ugnot -gas-wanted 10000000 -args "" -broadcast -chainid=tendermint_test test1
stdout OK!
stdout 'Add valoper berty'

# make a proposal for updating instructions
gnokey maketx run  -gas-fee 1000000ugnot -gas-wanted 95000000 -broadcast -chainid=tendermint_test test1 $WORK/run/new_instructions_proposal.gno
stdout OK!

# see the instructions in gov/dao proposition Render
gnokey maketx call -pkgpath gno.land/r/gov/dao -func Render -gas-fee 1000000ugnot -gas-wanted 10000000 -args "1" -broadcast -chainid=tendermint_test test1
stdout OK!
stdout 'new instructions'

# make a proposal for updating minimum fee
gnokey maketx run  -gas-fee 1000000ugnot -gas-wanted 95000000 -broadcast -chainid=tendermint_test test1 $WORK/run/new_minfee_proposal.gno
stdout OK!

# see the instructions in gov/dao proposition Render
gnokey maketx call -pkgpath gno.land/r/gov/dao -func Render -gas-fee 1000000ugnot -gas-wanted 10000000 -args "2" -broadcast -chainid=tendermint_test test1
stdout OK!
stdout 'Update the minimum register fee to: 1000000 ugnot'

-- run/load_user.gno --
package main

import (
  i "gno.land/r/gov/dao/v3/init"
  "std"
)

func main() {
	i.InitWithUsers(std.Address("g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5"))
}

-- run/new_proposal_bad.gno --
package main

import (
  "std"
  "gno.land/r/gov/dao"
  "gno.land/r/gnoland/valopers_proposal"
)

func main() {
  pr := valopers_proposal.NewValidatorProposalRequest(std.Address("g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh"))
  pid := dao.MustCreateProposal(pr)
  println(pid.String())
}

-- run/new_proposal_good.gno --
package main

import (
  "std"
  "gno.land/r/gov/dao"
  "gno.land/r/gnoland/valopers_proposal"
)

func main() {
  pr := valopers_proposal.NewValidatorProposalRequest(std.Address("g1ut590acnamvhkrh4qz6dz9zt9e3hyu499u0gvl"))
  pid := dao.MustCreateProposal(pr)
  println(pid.String())
}

-- run/new_instructions_proposal.gno --
package main

import (
  "gno.land/r/gov/dao"
  "gno.land/r/gnoland/valopers_proposal"
)

func main() {
  pr := valopers_proposal.ProposeNewInstructionsProposalRequest("new instructions")
  pid := dao.MustCreateProposal(pr)
  println(pid.String())
}

-- run/new_minfee_proposal.gno --
package main

import (
  "gno.land/r/gov/dao"
  "gno.land/r/gnoland/valopers_proposal"
)

func main() {
  pr := valopers_proposal.ProposeNewMinFeeProposalRequest(1000000)
  pid := dao.MustCreateProposal(pr)
  println(pid.String())
}
