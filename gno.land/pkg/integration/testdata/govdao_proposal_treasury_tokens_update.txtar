# create member and receiver users with known addresses
adduserfrom member 'success myself purchase tray reject demise scene little legend someone lunar hope media goat regular test area smart save flee surround attack rapid smoke'
stdout 'g1c0j899h88nwyvnzvh5jagpq6fkkyuj76nld6t0'

adduserfrom receiver 'smooth crawl poverty trumpet glare useful curtain annual pluck lunar example merge ready forum better verb rescue rule mechanic dynamic drift bench release weekend'
stdout 'g1rfznvu6qfa0sc76cplk5wpqexvefqccjunady0'

loadpkg gno.land/r/gov/dao
loadpkg gno.land/r/gov/dao/v3/impl
loadpkg gno.land/r/sys/users
loadpkg gno.land/r/gnoland/users/v1

# load specific govDAO implementation and needed users for your integration test
loadpkg gno.land/r/gov/dao/v3/loader $WORK/loader

gnoland start

# call gov/dao render to check everything is working as expected and the loader worked
gnokey query vm/qrender --data 'gno.land/r/gov/dao:'

# Register member with a namespace first
gnokey maketx call -send "1000000ugnot" -pkgpath gno.land/r/gnoland/users/v1 -func Register -args "mem123" -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test member
stdout 'OK!'

# register the tokens and fund the treasury address
gnokey maketx run -gas-fee 1000000ugnot -gas-wanted 100000000 -broadcast -chainid=tendermint_test member $WORK/tokens/register_tokens.gno

# verify no balances are found even though the treasury address got tokens
gnokey query vm/qrender --data 'gno.land/r/gov/dao/v3/treasury:GRC20'
stdout 'No balances found.'

# add the tokens update proposal
gnokey maketx run -gas-fee 1000000ugnot -gas-wanted 100000000 -broadcast -chainid=tendermint_test member $WORK/proposer/create_proposal.gno
stdout OK!

# call gov/dao render to check the tokens update proposal was created
gnokey query vm/qrender --data 'gno.land/r/gov/dao:0'
stdout 'New Token Keys:'
stdout '- gno.land/r/demo/defi/grc20factory.TOKEN1'
stdout '- gno.land/r/demo/defi/grc20factory.TOKEN2'
stdout '- gno.land/r/demo/defi/grc20factory.TOKEN3'

# vote on the tokens update proposal
gnokey maketx call -pkgpath gno.land/r/gov/dao -func MustVoteOnProposalSimple -gas-fee 1000000ugnot -gas-wanted 10000000 -args 0 -args YES -broadcast -chainid=tendermint_test member
stdout OK!

# call tokens update proposal execution
gnokey maketx call -pkgpath gno.land/r/gov/dao -func ExecuteProposal -gas-fee 1000000ugnot -gas-wanted 10000000 -args 0 -broadcast -chainid=tendermint_test member
stdout OK!

# verify the balances associated with the tokens update proposal
gnokey query vm/qrender --data 'gno.land/r/gov/dao/v3/treasury:GRC20'
stdout '| Denom | Amount |'
stdout '| gno.land/r/demo/defi/grc20factory.TOKEN1 | 42 |'
stdout '| gno.land/r/demo/defi/grc20factory.TOKEN2 | 0 |'
stdout '| gno.land/r/demo/defi/grc20factory.TOKEN3 | 0 |'

-- tokens/register_tokens.gno --
package main

import (
	"std"

	factory "gno.land/r/demo/defi/grc20factory"
)

func main() {
	factory.New(cross, "Token1", "TOKEN1", 3, 0, 0)
	factory.New(cross, "Token2", "TOKEN2", 3, 0, 0)
	factory.New(cross, "Token3", "TOKEN3", 3, 0, 0)

	factory.Mint(
		cross,
		"TOKEN1",
		std.DerivePkgAddr("gno.land/r/gov/dao/v3/treasury"),
		42,
	)
}

-- proposer/create_proposal.gno --
package main

import (
	"gno.land/r/gov/dao"
	"gno.land/r/gov/dao/v3/impl"
)

func main() {
	tureq := impl.NewTreasuryGRC20TokensUpdate(
		[]string{
			"gno.land/r/demo/defi/grc20factory.TOKEN1",
			"gno.land/r/demo/defi/grc20factory.TOKEN2",
			"gno.land/r/demo/defi/grc20factory.TOKEN3",
		},
	)
	dao.MustCreateProposal(cross, tureq)
}

-- loader/load_govdao.gno --
package load_govdao

import (
	"std"

	"gno.land/r/gov/dao"
	"gno.land/r/gov/dao/v3/impl"
	"gno.land/r/gov/dao/v3/memberstore"
)

func init() {
	memberstore.Get().SetTier(memberstore.T1)
	memberstore.Get().SetTier(memberstore.T2)
	memberstore.Get().SetTier(memberstore.T3)

	memberstore.Get().SetMember(
		memberstore.T1,
		std.Address("g1c0j899h88nwyvnzvh5jagpq6fkkyuj76nld6t0"), // member address
		&memberstore.Member{InvitationPoints: 3},
	)

	dao.UpdateImpl(cross, dao.UpdateRequest{
		DAO:         impl.GetInstance(),
		AllowedDAOs: []string{"gno.land/r/gov/dao/v3/impl"},
	})
}
