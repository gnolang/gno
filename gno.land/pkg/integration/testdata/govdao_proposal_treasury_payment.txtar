# create member and receiver users with known addresses
adduserfrom member 'success myself purchase tray reject demise scene little legend someone lunar hope media goat regular test area smart save flee surround attack rapid smoke'
stdout 'g1c0j899h88nwyvnzvh5jagpq6fkkyuj76nld6t0'

adduserfrom receiver 'smooth crawl poverty trumpet glare useful curtain annual pluck lunar example merge ready forum better verb rescue rule mechanic dynamic drift bench release weekend'
stdout 'g1rfznvu6qfa0sc76cplk5wpqexvefqccjunady0'

loadpkg gno.land/r/gov/dao
loadpkg gno.land/r/gov/dao/v3/impl
loadpkg gno.land/r/sys/users
loadpkg gno.land/r/gnoland/users/v1

# load specific govDAO implementation and needed users for your integration test
loadpkg gno.land/r/gov/dao/v3/loader $WORK/loader

gnoland start

# call gov/dao render to check everything is working as expected and the loader worked
gnokey query vm/qrender --data 'gno.land/r/gov/dao:'

# Register member with a namespace first
gnokey maketx call -send "1000000ugnot" -pkgpath gno.land/r/gnoland/users/v1 -func Register -args "mem123" -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test member
stdout 'OK!'

# 1/3 verify receiver and treasury balances
gnokey query bank/balances/${receiver_user_addr}
stdout 'data: "1000000000ugnot"'
gnokey query bank/balances/g1axf7xdzvhcapsvr0yzadr32wgsgs0064xyysrm 
stdout 'data: ""'

# member send 42 ugnot to treasury realm
gnokey maketx send -send 42ugnot -to g1axf7xdzvhcapsvr0yzadr32wgsgs0064xyysrm -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid tendermint_test member

# 2/3 verify receiver and treasury balances
gnokey query bank/balances/${receiver_user_addr}
stdout 'data: "1000000000ugnot"'
gnokey query bank/balances/g1axf7xdzvhcapsvr0yzadr32wgsgs0064xyysrm 
stdout 'data: "42ugnot"'

# add the proposal
gnokey maketx run -gas-fee 1000000ugnot -gas-wanted 100000000 -broadcast -chainid=tendermint_test member $WORK/proposer/create_proposal.gno
stdout OK!

# call gov/dao render to check the proposal was created
gnokey query vm/qrender --data 'gno.land/r/gov/dao:0'
stdout 'Reason: integration test payment'
stdout 'Payment: 42ugnot to g1rfznvu6qfa0sc76cplk5wpqexvefqccjunady0'

# vote on the proposal
gnokey maketx call -pkgpath gno.land/r/gov/dao -func MustVoteOnProposalSimple -gas-fee 1000000ugnot -gas-wanted 10000000 -args 0 -args YES -broadcast -chainid=tendermint_test member
stdout OK!

# call proposal execution
gnokey maketx call -pkgpath gno.land/r/gov/dao -func ExecuteProposal -gas-fee 1000000ugnot -gas-wanted 10000000 -args 0 -broadcast -chainid=tendermint_test member
stdout OK!

# check output
gnokey query vm/qrender --data 'gno.land/r/gov/dao/v3/treasury:Coins/history'
stdout '1 payment:'
stdout '- 42ugnot to g1rfznvu6qfa0sc76cplk5wpqexvefqccjunady0'

# 3/3 verify receiver and treasury balances
gnokey query bank/balances/${receiver_user_addr}
stdout 'data: "1000000042ugnot"'
gnokey query bank/balances/g1axf7xdzvhcapsvr0yzadr32wgsgs0064xyysrm 
stdout 'data: ""'

-- proposer/create_proposal.gno --
package main

import (
	"std"

	"gno.land/p/nt/treasury"

	"gno.land/r/gov/dao"
	"gno.land/r/gov/dao/v3/impl"
)

func main() {
	payment := treasury.NewCoinsPayment(
		std.NewCoins(std.NewCoin("ugnot", 42)),
		std.Address("g1rfznvu6qfa0sc76cplk5wpqexvefqccjunady0"), // receiver address
	)
	preq := impl.NewTreasuryPaymentRequest(
		payment,
		"integration test payment",
	)
	dao.MustCreateProposal(cross, preq)
}

-- loader/load_govdao.gno --
package load_govdao

import (
	"std"

	"gno.land/r/gov/dao"
	"gno.land/r/gov/dao/v3/impl"
	"gno.land/r/gov/dao/v3/memberstore"
)

func init() {
	memberstore.Get().SetTier(memberstore.T1)
	memberstore.Get().SetTier(memberstore.T2)
	memberstore.Get().SetTier(memberstore.T3)

	memberstore.Get().SetMember(
		memberstore.T1,
		std.Address("g1c0j899h88nwyvnzvh5jagpq6fkkyuj76nld6t0"), // member address
		&memberstore.Member{InvitationPoints: 3},
	)

	dao.UpdateImpl(cross, dao.UpdateRequest{
		DAO:         impl.GetInstance(),
		AllowedDAOs: []string{"gno.land/r/gov/dao/v3/impl"},
	})
}
