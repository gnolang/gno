# test set sysparam (ParamKeeper)

gnoland start

# ---- 1 Test sys/params.SetSysParamXXX when called from gno.land/r/sys/params

gnokey maketx addpkg -pkgdir $WORK/params -pkgpath gno.land/r/sys/params -gas-fee 1000000ugnot -gas-wanted 100000000 -broadcast -chainid=tendermint_test test1

## lock transfer
gnokey maketx call -pkgpath gno.land/r/sys/params -func SetLockTransfer -args "ugnot" -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test1
gnokey query params/bank:p:restricted_denoms
stdout 'data: \["ugnot"\]'

# unlock transfer
gnokey maketx call -pkgpath gno.land/r/sys/params -func SetLockTransfer -args "" -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test1
gnokey query params/bank:p:restricted_denoms
stdout 'data: \[""\]'

# set non-existing module param
gnokey maketx call -pkgpath gno.land/r/sys/params -func SetBankArbitrary -args "foo" -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test1
#stderr 'invalid bank parameter name: newkey'

gnokey query params/bank:p:newkey
stdout 'data: "foo"'

# set invalid key
! gnokey maketx call -pkgpath gno.land/r/sys/params -func SetInvalidKey -args "ugnot" -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test1
stderr 'invalid param name: bank:restricted_denoms'

gnokey query params/bank:p:restricted_denoms
stdout 'data: \[""\]' # still the same.

gnokey query params/bank:restricted_denoms
stdout 'data: \n'


# ---- 2 Test sys/params.SetSysParamXXX when called outside of gno.land/r/sys/params
gnokey maketx addpkg -pkgdir $WORK/params -pkgpath gno.land/r/myrealm -gas-fee 1000000ugnot -gas-wanted 100000000 -broadcast -chainid=tendermint_test test1

## can not call SetSysParamXXX out side of gno.land/r/params
! gnokey maketx call -pkgpath gno.land/r/myrealm -func SetSysParamString -args "foo" -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test1
stderr 'Data: "sys/params" can only be used from "gno.land/r/sys/params"' # XXX can only be *imported* from... enforce import rule

gnokey query params/bank:p:foo
stdout 'data: \n'

! gnokey maketx call -pkgpath gno.land/r/myrealm -func SetSysParamBool -args true -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test1
stderr 'Data: "sys/params" can only be used from "gno.land/r/sys/params"' # XXX can only be *imported* from... enforce import rule

gnokey query params/bank:p:bar
stdout 'data: \n'

! gnokey maketx call -pkgpath gno.land/r/myrealm -func SetSysParamInt64 -args -100 -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test1
stderr 'Data: "sys/params" can only be used from "gno.land/r/sys/params"' # XXX can only be *imported* from... enforce import rule

gnokey query params/bank:p:baz
stdout 'data: \n'

! gnokey maketx call -pkgpath gno.land/r/myrealm -func SetSysParamUint64 -args 100 -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test1
stderr 'Data: "sys/params" can only be used from "gno.land/r/sys/params"' # XXX can only be *imported* from... enforce import rule

gnokey query params/bank:p:baz
stdout 'data: \n'

! gnokey maketx call -pkgpath gno.land/r/myrealm -func SetSysParamBytes -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test1
stderr 'Data: "sys/params" can only be used from "gno.land/r/sys/params"' # XXX can only be *imported* from... enforce import rule

gnokey query params/bank:p:baz
stdout 'data: \n'


-- params/setter.gno --
package params

import (
	"sys/params"
)

// This should succeed if it is called from gno.land/r/sys/params
func SetLockTransfer(denom string) { params.SetSysParamStrings("bank","p", "restricted_denoms", []string{denom}) }

// # XXX test setting the wrong type, like SetSysParamString() instead of Strings(), and make it error for special case of "p".
// # func SetLockTransfer(denom string) { params.SetSysParamString("bank","p", "restricted_denoms", denom) }

// This should fail because the parameter does not exist
func SetBankArbitrary(value string) { params.SetSysParamString("bank","p", "newkey", value) }

// SetSysParamXXX must be called from gno.land/r/sys/params; otherwise it panics

// This should fail because the key "bank:restricted_denoms" is not valid
func SetInvalidKey(denom string)  { params.SetSysParamString("bank", "p", "bank:restricted_denoms", "ugnot") }

func SetSysParamString(s string) { params.SetSysParamString("bank","p", "foo", s) }
func SetSysParamBool(b  bool)   { params.SetSysParamBool("bank","p", "bar", b) }
func SetSysParamInt64(i int64)  { params.SetSysParamInt64("bank","p", "baz", i) }
func SetSysParamUint64(u uint64)  { params.SetSysParamUint64("bank","p", "baz", u) }
func SetSysParamBytes()  { params.SetSysParamBytes("bank","p", "baz", []byte{255,255}) }
