# tests for

gnoland start

# ---- 1 Test sys/params.SetPrefixedXXX when called from gno.land/r/sys/params

gnokey maketx addpkg -pkgdir $WORK/prefixed -pkgpath gno.land/r/sys/params -gas-fee 1000000ugnot -gas-wanted 100000000 -broadcast -chainid=tendermint_test test1

## before set lock transfer
gnokey query params/bank:p
stdout 'data: '

## lock transfer
gnokey maketx call -pkgpath gno.land/r/sys/params -func SetLockTransfer -args "ugnot" -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test1

## 	query bank module
gnokey query params/bank:p
stdout 'data: {"restricted_denoms":\["ugnot"\]}'

## 	query vm module
gnokey query params/vm:p
stdout 'data: {"sysusers_pkgpath":"gno.land/r/sys/users","chain_domain":"gno.land"}'

## 	query auth module
gnokey query params/auth:p
stdout 'data: {"max_memo_bytes":"65536","tx_sig_limit":"7","tx_size_cost_per_byte":"10","sig_verify_cost_ed25519":"590","sig_verify_cost_secp256k1":"1000","gas_price_change_compressor":"10","target_gas_ratio":"70","initial_gasprice":{"gas":"0","price":""},"unrestricted_addrs":\["g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5"\]}'


-- prefixed/setter.gno --
package params

import (
	"sys/params"
)

// This should success if it is called from gno.land/r/sys/params
func SetLockTransfer(denom string) { params.SetPrefixedString("bank","lockTransfer.string", denom) }

// SetPrefixedXXX must be called from gno.land/r/sys/params; otherwise it panics
// This should fail because the parameter does not exists
func SetPrefixBank(newFoo string) { params.SetPrefixedString("bank","foo.string", newFoo) }


// This should fail because the key "bank:lockTransfer.string" is not valid
func SetInvalidKey(denom string)  { params.SetPrefixedString("bank", "bank:lockTransfer.string", "ugnot") }


func SetPrefixedString(s string) { params.SetPrefixedString("bank","foo.string", s) }
func SetPrefixedBool(b  bool)   { params.SetPrefixedBool("bank","bar.bool", b) }
func SetPrefixedInt64(i int64)  { params.SetPrefixedInt64("bank","baz.int64", i) }
func SetPrefixedUint64(u uint64)  { params.SetPrefixedUint64("bank","baz.uint64", u) }
func SetPrefixedBytes()  { params.SetPrefixedBytes("bank","baz.bytes", []byte{255,255}) }
