## It tests locking token transfers while allowing the payment of gas fees.

## locking transfer applies to regular accounts
adduser regular1


loadpkg gno.land/r/demo/wugnot
loadpkg gno.land/r/demo/echo

## start a new node.
## The -lock-transfer flag is intended for integration testing purposes
## and is not a valid application flag for gnoland.

gnoland start -lock-transfer

## test1 is the DefaultAccount in the integration test. To ensure that the unrestricted account can send tokens even when token transfers are locked,
## we included it in the unrestricted account list in the genesis state. By default, the unrestricted account list is empty.
gnokey maketx send -send "9999999ugnot" -to $regular1_user_addr -gas-fee 1ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test test1

stdout 'OK!'

## Restricted simple token transfer
! gnokey maketx send -send "9999999ugnot" -to g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 -gas-fee 1ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test regular1
stderr 'restricted token transfer error'

## Restricted token transfer by calling a realm deposit function.
! gnokey maketx call -pkgpath gno.land/r/demo/wugnot -func Deposit -gas-fee 1000000ugnot -send "10000ugnot" -gas-wanted 2000000 -broadcast -chainid=tendermint_test regular1
stderr 'restricted token transfer error'


## Restricted token transfer with depositing to a realm package while adding a package.
! gnokey maketx addpkg -pkgdir $WORK -pkgpath gno.land/r/bank -deposit "1000ugnot" -gas-fee 1000000ugnot -gas-wanted 10000000 -broadcast -chainid=tendermint_test regular1
stderr 'restricted token transfer error'

## paying gas fees to add a package is acceptable.
gnokey maketx addpkg -pkgdir $WORK -pkgpath gno.land/r/bank -gas-fee 1000000ugnot -gas-wanted 12500000 -broadcast -chainid=tendermint_test regular1
stdout 'OK!'

## paying gas fees to call a realm function is acceptable.
gnokey maketx call -pkgpath gno.land/r/demo/echo -func Render -args "Hello!" -gas-fee 1000000ugnot -gas-wanted 12500000 -broadcast -chainid=tendermint_test regular1
stdout 'Hello!'

-- bank.gno --
package bank
import (
"std"
)
func Withdraw(denom string, amt int64) string{
  caller := std.OriginCaller()
  coin := std.Coins{{denom, amt}}
  banker := std.NewBanker(std.BankerTypeOriginSend)
  pkgaddr := std.OriginPkgAddress()
  banker.SendCoins(pkgaddr, caller, coin)
  return "Withdrawn!"
}
