# This tests ensure the consistency of the std.PreviousRealm function, in the
# following situations:
#
#
# | Num | Msg Type |      Call from      | Entry Point         | Result       |
# |-----|:--------:|:-------------------:|:-------------------:|:------------:|
# | 1   | MsgCall  | wallet direct       | myrlm.A()           | user address |
# | 2   |          |                     | myrlm.B()           | user address |
# | 3   |          | through /r/foo      | myrlm.A()           | r/foo        |
# | 4   |          |                     | myrlm.B()           | r/foo        |
# | 5   |          | through /p/demo/bar | bar.A()             | <disabled>   |
# | 6   |          |                     | bar.B()             | <disabled>   |
# | 7   | MsgRun   | wallet direct       | myrlm.A()           | user address |
# | 8   |          |                     | myrlm.B()           | user address |
# | 9   |          | through /r/foo      | myrlm.A()           | user address |
# | 10  |          |                     | myrlm.B()           | user address |
# | 11  |          | through /p/demo/bar | bar.A()             | <forbidden>  |
# | 12  |          |                     | bar.B()             | <forbidden>  |
# | 13  | MsgCall  | wallet direct       | std.PreviousRealm() | <forbidden>  |
# | 14  | MsgRun   | wallet direct       | std.PreviousRealm() | user address |

# Init
## deploy myrlm
loadpkg gno.land/r/myrlm $WORK/r/myrlm
## deploy r/foo
loadpkg gno.land/r/foo $WORK/r/foo
## deploy p/demo/bar
loadpkg gno.land/p/demo/bar $WORK/p/demo/bar

## start a new node
gnoland start

env RFOO_USER_ADDR=g1evezrh92xaucffmtgsaa3rvmz5s8kedffsg469

# Test cases
## 1. MsgCall -> myrlm.A: user address
gnokey maketx call -pkgpath gno.land/r/myrlm -func A -gas-fee 100000ugnot -gas-wanted 1500000 -broadcast -chainid tendermint_test test1
stdout ${test1_user_addr}

## 2. MsgCall -> myrealm.B -> myrlm.A: user address
gnokey maketx call -pkgpath gno.land/r/myrlm -func B -gas-fee 100000ugnot -gas-wanted 1000000 -broadcast -chainid tendermint_test test1
stdout ${test1_user_addr}

## 3. MsgCall -> r/foo.A -> myrlm.A: r/foo
gnokey maketx call -pkgpath gno.land/r/foo -func A -gas-fee 100000ugnot -gas-wanted 1500000 -broadcast -chainid tendermint_test test1
stdout ${RFOO_USER_ADDR}

## 4. MsgCall -> r/foo.B -> myrlm.B -> r/foo.A: r/foo
gnokey maketx call -pkgpath gno.land/r/foo -func B -gas-fee 100000ugnot -gas-wanted 1500000 -broadcast -chainid tendermint_test test1
stdout ${RFOO_USER_ADDR}

## remove due to update to maketx call can only call realm (case 5, 6, 13)
## 5. MsgCall -> p/demo/bar.A: user address
## gnokey maketx call -pkgpath gno.land/p/demo/bar -func A -gas-fee 100000ugnot -gas-wanted 4000000 -broadcast -chainid tendermint_test test1
## stdout ${test1_user_addr}

## 6. MsgCall -> p/demo/bar.B: user address
## gnokey maketx call -pkgpath gno.land/p/demo/bar -func B -gas-fee 100000ugnot -gas-wanted 4000000 -broadcast -chainid tendermint_test test1
## stdout ${test1_user_addr}

## 7. MsgRun -> myrlm.A: user address
gnokey maketx run -gas-fee 100000ugnot -gas-wanted 12000000 -broadcast -chainid tendermint_test test1 $WORK/run/myrlm-a.gno
stdout ${test1_user_addr}

## 8. MsgRun -> myrealm.B -> myrlm.A: user address
gnokey maketx run -gas-fee 100000ugnot -gas-wanted 12000000 -broadcast -chainid tendermint_test test1 $WORK/run/myrlm-b.gno
stdout ${test1_user_addr}

## 9. MsgRun -> r/foo.A -> myrlm.A: r/foo
gnokey maketx run -gas-fee 100000ugnot -gas-wanted 12000000 -broadcast -chainid tendermint_test test1 $WORK/run/foo-a.gno
stdout ${RFOO_USER_ADDR}

## 10. MsgRun -> r/foo.B -> myrlm.B -> r/foo.A: r/foo
gnokey maketx run -gas-fee 100000ugnot -gas-wanted 12000000 -broadcast -chainid tendermint_test test1 $WORK/run/foo-b.gno
stdout ${RFOO_USER_ADDR}

## 11. MsgRun -> p/demo/bar.A -> myrlm.A: user address
## XXX: crossing call only allowed in realm packages, doesn't work - not possible
# ! gnokey maketx run -gas-fee 100000ugnot -gas-wanted 12000000 -broadcast -chainid tendermint_test test1 $WORK/run/bar-a.gno
# stderr 'crossing'

## 12. MsgRun -> p/demo/bar.B -> myrlm.B -> r/foo.A: user address
## XXX: crossing call only allowed in realm packages, doesn't work - not possible
# ! gnokey maketx run -gas-fee 100000ugnot -gas-wanted 12000000 -broadcast -chainid tendermint_test test1 $WORK/run/bar-b.gno
# stderr 'crossing'

## 13. MsgCall -> std.PreviousRealm(): user address
## gnokey maketx call -pkgpath std -func PreviousRealm -gas-fee 100000ugnot -gas-wanted 4000000 -broadcast -chainid tendermint_test test1
## stdout ${test1_user_addr}

## 14. MsgRun -> std.PreviousRealm(): user address
gnokey maketx run -gas-fee 100000ugnot -gas-wanted 12000000 -broadcast -chainid tendermint_test test1 $WORK/run/baz.gno
stdout ${test1_user_addr}

-- r/myrlm/myrlm.gno --
package myrlm

import "std"

func A(cur realm) string {
	return std.PreviousRealm().Address().String()
}

func B(cur realm) string {
	return A(cur)
}
-- r/foo/foo.gno --
package foo

import "gno.land/r/myrlm"

func A(cur realm) string {
	return myrlm.A(cross)
}

func B(cur realm) string {
	return myrlm.B(cross)
}
-- p/demo/bar/bar.gno --
package bar

import "std"

func A() string {
	return std.PreviousRealm().Address().String()
}

func B() string {
	 return A()
}
-- run/myrlm-a.gno --
package main

import myrlm "gno.land/r/myrlm"

func main() {
	println(myrlm.A(cross))
}
-- run/myrlm-b.gno --
package main

import "gno.land/r/myrlm"

func main() {
	println(myrlm.B(cross))
}
-- run/foo-a.gno --
package main

import "gno.land/r/foo"

func main() {
	println(foo.A(cross))
}
-- run/foo-b.gno --
package main

import "gno.land/r/foo"

func main() {
	println(foo.B(cross))
}

-- run/bar-b.gno --
package main

import "gno.land/p/demo/bar"

func main() {
	println(bar.B())
}
-- run/baz.gno --
package main

import "std"

func main() {
	name := std.PreviousRealm().Address().String()
	println(name)
}
