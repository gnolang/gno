## It tests changing deposit parameters through GovDAO voting
loadpkg gno.land/r/gov/dao
loadpkg gno.land/r/gov/dao/v3/impl
loadpkg gno.land/r/sys/params
loadpkg gno.land/r/sys/users
loadpkg gno.land/r/gnoland/users/v1

patchpkg "g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm" "g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5"

# load specific govDAO implementation and needed users for your integration test
loadpkg gno.land/r/gov/dao/v3/loader $WORK/loader

gnoland start

## add a contract
gnokey maketx addpkg -pkgdir $WORK/storage -pkgpath gno.land/r/storage -gas-fee 1000000ugnot -gas-wanted 10000000  -broadcast -chainid=tendermint_test test1
stdout OK!

## Propose to update default deposit.
gnokey maketx run -gas-fee 1000000ugnot -gas-wanted 100000000 -broadcast -chainid=tendermint_test test1 $WORK/run/submit_proposal.gno
stdout OK!

## Vote "update default deposit"
gnokey maketx run  -gas-fee 95000ugnot -gas-wanted 95000000 -broadcast -chainid=tendermint_test test1 $WORK/run/vote_proposal.gno

stdout 'OK!'

## query params before the change
gnokey query params/vm:p:default_deposit
stdout '600000000ugnot'

## Execute "update default deposit" proposal
gnokey maketx run  -gas-fee 20000ugnot -gas-wanted 20000000  -broadcast -chainid=tendermint_test test1 $WORK/run/exec_proposal.gno

stdout 'OK!'

## query params,
gnokey query params/vm:p:default_deposit
stdout '1ugnot'


## failed due to not providing enough default deposit

! gnokey maketx call -pkgpath gno.land/r/storage -func SetName -args "hellooo"  -gas-fee 1000000ugnot -gas-wanted 10000000  -broadcast -chainid=tendermint_test test1

stderr 'not enough deposit to cover the storage usage'

-- run/submit_proposal.gno --
package main

import (
  "gno.land/r/gov/dao"
  "gno.land/r/sys/params"
)

func main() {

  prop := params.NewSysParamStringPropRequest("vm", "p", "default_deposit", "1ugnot")
  dao.MustCreateProposal(cross,prop)
}

-- loader/load_govdao.gno --
package load_govdao

import (
	"std"

	"gno.land/r/gov/dao"
	"gno.land/r/gov/dao/v3/impl"
	"gno.land/r/gov/dao/v3/memberstore"
)

func init() {
	memberstore.Get().SetTier(memberstore.T1)
	memberstore.Get().SetTier(memberstore.T2)
	memberstore.Get().SetTier(memberstore.T3)

	memberstore.Get().SetMember(memberstore.T1, std.Address("g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5"), &memberstore.Member{InvitationPoints: 3}) // member address

	dao.UpdateImpl(cross,dao.UpdateRequest{
		DAO:         impl.GetInstance(),
		AllowedDAOs: []string{"gno.land/r/gov/dao/v3/impl"},
	})
}

-- run/vote_proposal.gno --
package main

import (
    "gno.land/r/gov/dao"
)

func main() {
  dao.MustVoteOnProposal(cross,dao.VoteRequest{
    Option:     dao.YesVote,
    ProposalID: dao.ProposalID(0),
  })
}


-- run/exec_proposal.gno --
package main

import (
  "gno.land/r/gov/dao"
)

func main() {
  dao.ExecuteProposal(cross,dao.ProposalID(0))
}



-- storage/gnomod.toml --
module = "gno.land/r/storage"

gno = "0.9"

-- storage/storage.gno --
package storage

var record Foo

func init(){
	NewFoo(cross,"hello")
}

type Foo struct{
  name string
}

func NewFoo(cur realm, name string){
  record = Foo{name}
}
func SetName(cur realm, n string){
  record.name = n
}

func GetName()string {
  return record.name
}

func Clear(cur realm){
  record = Foo{}
}
