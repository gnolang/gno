# XXX: NEED UPDATE: cannot send transfer to self

# Test for https://github.com/gnolang/gno/issues/1786

loadpkg gno.land/r/demo/wugnot

gnoland start

# add contract
gnokey maketx addpkg -pkgdir $WORK -pkgpath gno.land/r/demo/proxywugnot -gas-fee 1000000ugnot -gas-wanted 16000000 -broadcast -chainid=tendermint_test test1
stdout OK!

# approve wugnot to `proxywugnot â‰ˆ g1fndyg0we60rdfchyy5dwxzkfmhl5u34j932rg3`
gnokey maketx call -pkgpath gno.land/r/demo/wugnot -func Approve -args "g1fndyg0we60rdfchyy5dwxzkfmhl5u34j932rg3" -args 10000 -gas-fee 1000000ugnot -gas-wanted 40000000 -broadcast -chainid=tendermint_test test1
stdout OK!

# send 10000ugnot to `proxywugnot` to wrap it
gnokey maketx call -pkgpath gno.land/r/demo/proxywugnot --send "10000ugnot" -func ProxyWrap -gas-fee 1000000ugnot -gas-wanted 40000000 -broadcast -chainid=tendermint_test test1
stdout OK!

# check user's wugnot balance
gnokey query vm/qeval --data "gno.land/r/demo/wugnot.BalanceOf(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")"
stdout '10000 int64'

# unwrap 500 wugnot
gnokey maketx call -pkgpath gno.land/r/demo/proxywugnot -func ProxyUnwrap -args 500 -gas-fee 1000000ugnot -gas-wanted 40000000 -broadcast -chainid=tendermint_test test1

# XXX without patching anything it will panic
# panic msg: insufficient coins error
# XXX with pathcing only wugnot.gnot it will panic
# panic msg: RealmSendBanker can only send from the realm package address "g1fndyg0we60rdfchyy5dwxzkfmhl5u34j932rg3", but got "g1pf6dv9fjk3rn0m4jjcne306ga4he3mzmupfjl6"


# check user's wugnot balance

gnokey query vm/qeval --data "gno.land/r/demo/wugnot.BalanceOf(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")"
stdout '9500 int64'

# render
gnokey query vm/qrender --data "gno.land/r/demo/wugnot:invalid"
stdout 'data: 404'

-- gno.mod --
module gno.land/r/demo/proxywugnot

gno 0.9
-- realm.gno --
package proxywugnot

import (
	"std"

	"gno.land/r/demo/wugnot"
)

func ProxyWrap(cur realm) {
	sent := std.OriginSend()
	ugnotSent := int64(sent.AmountOf("ugnot"))

	if ugnotSent == 0 {
		return
	}

	// WRAP IT
	wugnotAddr := std.DerivePkgAddr("gno.land/r/demo/wugnot")
	banker := std.NewBanker(std.BankerTypeRealmSend)
	banker.SendCoins(std.CurrentRealm().Address(), wugnotAddr, std.Coins{{"ugnot", int64(ugnotSent)}})
	wugnot.Deposit(cross) // `proxywugnot` has ugnot

	// SEND WUGNOT: PROXY_WUGNOT -> USER
	wugnot.Transfer(cross, std.OriginCaller(), ugnotSent)
}

func ProxyUnwrap(cur realm, wugnotAmount int64) {
	if wugnotAmount == 0 {
		return
	}

	// SEND WUGNOT: USER -> PROXY_WUGNOT
	wugnot.TransferFrom(cross, std.OriginCaller(), std.CurrentRealm().Address(), wugnotAmount)

	// UNWRAP IT
	wugnot.Withdraw(cross, wugnotAmount)

	// SEND GNOT: PROXY_WUGNOT -> USER
	banker := std.NewBanker(std.BankerTypeRealmSend)
	banker.SendCoins(std.CurrentRealm().Address(), std.OriginCaller(), std.Coins{{"ugnot", int64(wugnotAmount)}})
}
