# test for https://github.com/gnolang/gnochess/issues/97

## start a new node
gnoland start

gnokey maketx addpkg -pkgdir $WORK -pkgpath gno.land/r/demo/bug97 -gas-fee 1000000ugnot -gas-wanted 2000000 -broadcast -chainid=tendermint_test test1

gnokey maketx call -pkgpath 'gno.land/r/demo/bug97' -func 'Render' -args '' -gas-fee 1000000ugnot -gas-wanted 2000000 -send '' -broadcast -chainid='tendermint_test' test1
stdout '("default:a,b,c\\n" string)'

gnokey maketx call -pkgpath 'gno.land/r/demo/bug97' -func 'Bar' -args 'hello' -gas-fee 1000000ugnot -gas-wanted 2000000 -send '' -broadcast -chainid='tendermint_test' test1
gnokey maketx call -pkgpath 'gno.land/r/demo/bug97' -func 'Render' -args '' -gas-fee 1000000ugnot -gas-wanted 2000000 -send '' -broadcast -chainid='tendermint_test' test1
stdout '("default:a,hello,c\\ninst0:a,hello,c\\n" string)'
# WTF, '("default:a,b,c\\ninst0:a,hello,c\\n" string)' <- should be this.


gnokey maketx call -pkgpath 'gno.land/r/demo/bug97' -func 'Bar' -args 'hi' -gas-fee 1000000ugnot -gas-wanted 2000000 -send '' -broadcast -chainid='tendermint_test' test1
gnokey maketx call -pkgpath 'gno.land/r/demo/bug97' -func 'Render' -args '' -gas-fee 1000000ugnot -gas-wanted 2000000 -send '' -broadcast -chainid='tendermint_test' test1
stdout '("default:a,hi,c\\ninst0:a,hi,c\\ninst1:a,hi,c\\n" string)'
# WTF, '("default:a,b,c\\ninst0:a,hello,c\\ninst1:a,hi,c\\n" string)' <- should be this.

-- bug97.gno --
package bug97

import (
	"strings"

	"gno.land/p/demo/ufmt"
)

type s struct {
	arr [3]string
}

var defS = s{
	arr: [3]string{"a", "b", "c"},
}

var instances = []s{}

func NewS() s { return defS }

func Bar(replace string) {
	bar := NewS()
	bar.arr[1] = replace
	instances = append(instances, bar)
}

func Render(_ string) string {
	output := ufmt.Sprintf("default:%s\n", strings.Join(defS.arr[:], ","))
	for idx, inst := range instances {
		output += ufmt.Sprintf("inst%d:%s\n", idx, strings.Join(inst.arr[:], ","))
	}
	return output
}
