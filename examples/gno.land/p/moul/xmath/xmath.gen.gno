// Code generated by generator.go; DO NOT EDIT.
package xmath

// Int8 helpers
func MaxInt8(a, b int8) int8 {
	if a > b {
		return a
	}
	return b
}

func MinInt8(a, b int8) int8 {
	if a < b {
		return a
	}
	return b
}

func ClampInt8(value, min, max int8) int8 {
	if value < min {
		return min
	}
	if value > max {
		return max
	}
	return value
}

func AbsInt8(x int8) int8 {
	if x < 0 {
		return -x
	}
	return x
}

func SignInt8(x int8) int8 {
	if x < 0 {
		return -1
	}
	if x > 0 {
		return 1
	}
	return 0
}

// Int16 helpers
func MaxInt16(a, b int16) int16 {
	if a > b {
		return a
	}
	return b
}

func MinInt16(a, b int16) int16 {
	if a < b {
		return a
	}
	return b
}

func ClampInt16(value, min, max int16) int16 {
	if value < min {
		return min
	}
	if value > max {
		return max
	}
	return value
}

func AbsInt16(x int16) int16 {
	if x < 0 {
		return -x
	}
	return x
}

func SignInt16(x int16) int16 {
	if x < 0 {
		return -1
	}
	if x > 0 {
		return 1
	}
	return 0
}

// Int32 helpers
func MaxInt32(a, b int32) int32 {
	if a > b {
		return a
	}
	return b
}

func MinInt32(a, b int32) int32 {
	if a < b {
		return a
	}
	return b
}

func ClampInt32(value, min, max int32) int32 {
	if value < min {
		return min
	}
	if value > max {
		return max
	}
	return value
}

func AbsInt32(x int32) int32 {
	if x < 0 {
		return -x
	}
	return x
}

func SignInt32(x int32) int32 {
	if x < 0 {
		return -1
	}
	if x > 0 {
		return 1
	}
	return 0
}

// Int64 helpers
func MaxInt64(a, b int64) int64 {
	if a > b {
		return a
	}
	return b
}

func MinInt64(a, b int64) int64 {
	if a < b {
		return a
	}
	return b
}

func ClampInt64(value, min, max int64) int64 {
	if value < min {
		return min
	}
	if value > max {
		return max
	}
	return value
}

func AbsInt64(x int64) int64 {
	if x < 0 {
		return -x
	}
	return x
}

func SignInt64(x int64) int64 {
	if x < 0 {
		return -1
	}
	if x > 0 {
		return 1
	}
	return 0
}

// Int helpers
func MaxInt(a, b int) int {
	if a > b {
		return a
	}
	return b
}

func MinInt(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func ClampInt(value, min, max int) int {
	if value < min {
		return min
	}
	if value > max {
		return max
	}
	return value
}

func AbsInt(x int) int {
	if x < 0 {
		return -x
	}
	return x
}

func SignInt(x int) int {
	if x < 0 {
		return -1
	}
	if x > 0 {
		return 1
	}
	return 0
}

// Uint8 helpers
func MaxUint8(a, b uint8) uint8 {
	if a > b {
		return a
	}
	return b
}

func MinUint8(a, b uint8) uint8 {
	if a < b {
		return a
	}
	return b
}

func ClampUint8(value, min, max uint8) uint8 {
	if value < min {
		return min
	}
	if value > max {
		return max
	}
	return value
}

// Uint16 helpers
func MaxUint16(a, b uint16) uint16 {
	if a > b {
		return a
	}
	return b
}

func MinUint16(a, b uint16) uint16 {
	if a < b {
		return a
	}
	return b
}

func ClampUint16(value, min, max uint16) uint16 {
	if value < min {
		return min
	}
	if value > max {
		return max
	}
	return value
}

// Uint32 helpers
func MaxUint32(a, b uint32) uint32 {
	if a > b {
		return a
	}
	return b
}

func MinUint32(a, b uint32) uint32 {
	if a < b {
		return a
	}
	return b
}

func ClampUint32(value, min, max uint32) uint32 {
	if value < min {
		return min
	}
	if value > max {
		return max
	}
	return value
}

// Uint64 helpers
func MaxUint64(a, b uint64) uint64 {
	if a > b {
		return a
	}
	return b
}

func MinUint64(a, b uint64) uint64 {
	if a < b {
		return a
	}
	return b
}

func ClampUint64(value, min, max uint64) uint64 {
	if value < min {
		return min
	}
	if value > max {
		return max
	}
	return value
}

// Uint helpers
func MaxUint(a, b uint) uint {
	if a > b {
		return a
	}
	return b
}

func MinUint(a, b uint) uint {
	if a < b {
		return a
	}
	return b
}

func ClampUint(value, min, max uint) uint {
	if value < min {
		return min
	}
	if value > max {
		return max
	}
	return value
}

// Float32 helpers
func MaxFloat32(a, b float32) float32 {
	if a > b {
		return a
	}
	return b
}

func MinFloat32(a, b float32) float32 {
	if a < b {
		return a
	}
	return b
}

func ClampFloat32(value, min, max float32) float32 {
	if value < min {
		return min
	}
	if value > max {
		return max
	}
	return value
}

func AbsFloat32(x float32) float32 {
	if x < 0 {
		return -x
	}
	return x
}

func SignFloat32(x float32) float32 {
	if x < 0 {
		return -1
	}
	if x > 0 {
		return 1
	}
	return 0
}

// Float64 helpers
func MaxFloat64(a, b float64) float64 {
	if a > b {
		return a
	}
	return b
}

func MinFloat64(a, b float64) float64 {
	if a < b {
		return a
	}
	return b
}

func ClampFloat64(value, min, max float64) float64 {
	if value < min {
		return min
	}
	if value > max {
		return max
	}
	return value
}

func AbsFloat64(x float64) float64 {
	if x < 0 {
		return -x
	}
	return x
}

func SignFloat64(x float64) float64 {
	if x < 0 {
		return -1
	}
	if x > 0 {
		return 1
	}
	return 0
}
