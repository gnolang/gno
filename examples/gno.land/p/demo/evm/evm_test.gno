package evm

import (
	"errors"
	"fmt"
	"strconv"
	"strings"
	"testing"
	"time"

	"gno.land/p/demo/uint256"
)

func TestExecuteEvm(t *testing.T) {
	testCases := []struct {
		name                     string
		code                     []byte
		callValue                uint256.Uint
		callData                 []byte
		caller                   Account
		env                      Env
		gas                      uint
		expectedResult           []byte
		expectedMemory           []byte
		expectedStack            []*uint256.Uint
		expectedError            error
		expectedGasConsumed      uint
		expectedTransientStorage map[uint256.Uint]uint256.Uint
		ignoreMemory             bool
		ignoreTransientStorage   bool
		ignoreGasConsumed        bool
		ignoreStack              bool
	}{
		{
			name:                "simple addition",
			code:                []byte{0x60, 1, 0x60, 1, 0x01, 0x00}, // PUSH1 1, PUSH1 1, ADD
			expectedStack:       []*uint256.Uint{uint256.NewUint(2)},
			expectedGasConsumed: 9,
		},
		{
			name:                "error can't add on empty stack",
			code:                []byte{0x01}, // ADD
			expectedError:       errors.New("can't do operation: empty stack"),
			expectedGasConsumed: 3,
		},
		{
			name:                "error push1 out of bounds",
			code:                []byte{0x60}, // PUSH1
			expectedError:       errors.New("can't PUSH1: out of bounds"),
			expectedGasConsumed: 3,
		},
		{
			name:                "exchange 1st and 2nd stack items",
			code:                []byte{byte(PUSH0), byte(PUSH1), 0x42, byte(SWAP1), byte(STOP)}, // PUSH0, PUSH1 0x42, SWAP1
			expectedStack:       []*uint256.Uint{uint256.NewUint(66), uint256.Zero()},
			expectedGasConsumed: 9,
		},
		{
			name:                "push2",
			code:                []byte{byte(PUSH2), 0x42, 0x42, byte(STOP)}, // PUSH1 10, PUSH1 11, ADD, PUSH1 2, MUL
			expectedStack:       []*uint256.Uint{uint256.NewUint(16962)},
			expectedGasConsumed: 3,
		},
		{
			name:                "error push32 out of bounds",
			code:                []byte{byte(PUSH32), 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, // PUSH1
			expectedError:       errors.New("can't PUSH32: out of bounds"),
			expectedGasConsumed: 3,
		},
		{
			name:                "simple addition and mul",
			code:                []byte{byte(PUSH1), 10, byte(PUSH1), 11, byte(ADD), byte(PUSH1), 2, byte(MUL), byte(STOP)}, // PUSH1 10, PUSH1 11, ADD, PUSH1 2, MUL
			expectedStack:       []*uint256.Uint{uint256.NewUint(42)},
			expectedError:       nil,
			expectedGasConsumed: 17,
		},
		{
			name:                "big mul",
			code:                []byte{byte(PUSH31), 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, byte(PUSH1), 0xff, byte(MUL), byte(STOP)}, // PUSH1 10, PUSH1 11, ADD, PUSH1 2, MUL
			expectedStack:       []*uint256.Uint{uint256.Zero().SetBytes([]byte{0xfE, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01})},
			expectedGasConsumed: 11,
		},
		{
			name:                "mul random big",
			code:                []byte{byte(PUSH15), 0xdf, 0x01, 0xe8, 0x5f, 0x91, 0x2e, 0x37, 0xa3, 0x6b, 0x6c, 0x46, 0xde, 0xc5, 0x2f, 0x66, byte(PUSH17), 0x9c, 0x8b, 0xe1, 0xdc, 0x47, 0x25, 0x68, 0xe4, 0xee, 0x20, 0x3b, 0x83, 0xff, 0xff, 0xff, 0xff, 0xf0, byte(MUL), byte(STOP)}, // PUSH1 10, PUSH1 11, ADD, PUSH1 2, MUL
			expectedStack:       []*uint256.Uint{uint256.Zero().SetBytes([]byte{0x88, 0x5f, 0x04, 0x63, 0xf9, 0x35, 0xcc, 0xd3, 0x78, 0x6d, 0x30, 0x27, 0x7a, 0x17, 0x1a, 0x5f, 0x86, 0x81, 0x3e, 0x91, 0xf3, 0xe8, 0x8d, 0x96, 0x22, 0x3b, 0xd3, 0x92, 0x13, 0xad, 0x09, 0xa0})},
			expectedGasConsumed: 11,
		},
		{
			name:                "simple sub",
			code:                []byte{byte(PUSH1), 5, byte(PUSH1), 10, byte(SUB), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.NewUint(5)},
			expectedGasConsumed: 9,
		},
		{
			name:                "simple sub to neg",
			code:                []byte{byte(PUSH1), 10, byte(PUSH1), 5, byte(SUB), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.Zero().Xor(uint256.Zero().SetAllOne(), uint256.NewUint(4))},
			expectedGasConsumed: 9,
		},
		{
			name:                "big sub",
			code:                []byte{byte(PUSH32), 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, byte(PUSH32), 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, byte(SUB), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.Zero()},
			expectedGasConsumed: 9,
		},
		{
			name:                "simple div",
			code:                []byte{byte(PUSH1), 2, byte(PUSH1), 10, byte(DIV), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.NewUint(5)},
			expectedGasConsumed: 11,
		},
		{
			name:                "big div",
			code:                []byte{byte(PUSH16), 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, byte(PUSH32), 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, byte(DIV), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.MustFromHex("0x100000000000000000000000000000001")},
			expectedGasConsumed: 11,
		},
		{
			name:                "simple sdiv",
			code:                []byte{byte(PUSH1), 2, byte(PUSH1), 10, byte(SDIV), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.NewUint(5)},
			expectedGasConsumed: 11,
		},
		{
			name:                "neg sdiv",
			code:                []byte{byte(PUSH32), 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, byte(PUSH32), 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, byte(SDIV), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.NewUint(2)},
			expectedGasConsumed: 11,
		},
		{
			name:                "simple mod",
			code:                []byte{byte(PUSH1), 3, byte(PUSH1), 10, byte(MOD), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.NewUint(1)},
			expectedGasConsumed: 11,
		},
		{
			name:                "simple mod 2",
			code:                []byte{byte(PUSH1), 5, byte(PUSH1), 17, byte(MOD), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.NewUint(2)},
			expectedGasConsumed: 11,
		},
		{
			name:                "big mod",
			code:                []byte{byte(PUSH32), 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, byte(PUSH32), 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, byte(MOD), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.NewUint(1)},
			expectedGasConsumed: 11,
		},
		{
			name:                "simple smod",
			code:                []byte{byte(PUSH1), 3, byte(PUSH1), 10, byte(SMOD), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.NewUint(1)},
			expectedGasConsumed: 11,
		},
		{
			name:                "pos smod neg",
			code:                []byte{byte(PUSH32), 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, byte(PUSH1), 13, byte(SMOD), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.NewUint(1)},
			expectedGasConsumed: 11,
		},
		{
			name:                "neg smod pos",
			code:                []byte{byte(PUSH1), 3, byte(PUSH32), 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, byte(SMOD), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.MustFromHex("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff")},
			expectedGasConsumed: 11,
		},
		{
			name:                "neg smod neg",
			code:                []byte{byte(PUSH32), 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, byte(PUSH32), 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, byte(SMOD), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.MustFromHex("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff")},
			expectedGasConsumed: 11,
		},
		{
			name:                "big smod",
			code:                []byte{byte(PUSH32), 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, byte(PUSH32), 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, byte(SMOD), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.MustFromHex("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff")},
			expectedGasConsumed: 11,
		},
		{
			name:                "simple addmod",
			code:                []byte{byte(PUSH1), 8, byte(PUSH1), 10, byte(PUSH1), 10, byte(ADDMOD), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.NewUint(4)},
			expectedGasConsumed: 17,
		},
		{
			name:                "big addmod",
			code:                []byte{byte(PUSH1), 2, byte(PUSH1), 2, byte(PUSH32), 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, byte(ADDMOD), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.One()},
			expectedGasConsumed: 17,
		},
		{
			name:                "simple mulmod",
			code:                []byte{byte(PUSH1), 8, byte(PUSH1), 10, byte(PUSH1), 10, byte(MULMOD), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.NewUint(4)},
			expectedGasConsumed: 17,
		},
		{
			name:                "big mulmod",
			code:                []byte{byte(PUSH1), 12, byte(PUSH32), 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, byte(PUSH32), 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, byte(MULMOD), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.NewUint(9)},
			expectedGasConsumed: 17,
		},
		{
			name:                "simple exp",
			code:                []byte{byte(PUSH1), 8, byte(PUSH1), 10, byte(EXP), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.NewUint(0x5f5e100)},
			expectedGasConsumed: 66,
		},
		{
			name:                "big exp",
			code:                []byte{byte(PUSH1), 0xff, byte(PUSH1), 2, byte(EXP), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.MustFromHex("0x8000000000000000000000000000000000000000000000000000000000000000")},
			expectedGasConsumed: 66,
		},
		{
			name:                "big exp overflow",
			code:                []byte{byte(PUSH32), 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, byte(PUSH1), 12, byte(EXP), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.Zero()},
			expectedGasConsumed: 1616,
		},
		{
			name:                "simple signextend",
			code:                []byte{byte(PUSH1), 8, byte(PUSH1), 10, byte(SIGNEXTEND), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.NewUint(8)},
			expectedGasConsumed: 11,
		},
		{
			name:                "big signextend",
			code:                []byte{byte(PUSH1), 0xff, byte(PUSH1), 0, byte(SIGNEXTEND), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.MustFromHex("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff")},
			expectedGasConsumed: 11,
		},
		{
			name:                "simple lt",
			code:                []byte{byte(PUSH1), 10, byte(PUSH1), 8, byte(LT), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.One()},
			expectedGasConsumed: 9,
		},
		{
			name:                "big lt",
			code:                []byte{byte(PUSH32), 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, byte(PUSH32), 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, byte(LT), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.One()},
			expectedGasConsumed: 9,
		},
		{
			name:                "simple gt",
			code:                []byte{byte(PUSH1), 10, byte(PUSH1), 8, byte(GT), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.Zero()},
			expectedGasConsumed: 9,
		},
		{
			name:                "big gt",
			code:                []byte{byte(PUSH32), 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, byte(PUSH32), 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, byte(GT), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.Zero()},
			expectedGasConsumed: 9,
		},
		{
			name:                "simple sar",
			code:                []byte{byte(PUSH1), 2, byte(PUSH1), 1, byte(SAR), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.NewUint(1)},
			expectedGasConsumed: 9,
		},
		{
			name:                "big sar",
			code:                []byte{byte(PUSH32), 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, byte(PUSH1), 4, byte(SAR), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.MustFromHex("0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF")},
			expectedGasConsumed: 9,
		},
		{
			name:                "jump jump !",
			code:                []byte{byte(PUSH1), 1, byte(PUSH1), 8, byte(JUMP), byte(PUSH1), 1, byte(ADD), byte(JUMPDEST), byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.NewUint(1)},
			expectedGasConsumed: 14,
		},
		{
			name:                "jumpi yes",
			code:                []byte{byte(PUSH1), 1, byte(PUSH1), 10, byte(JUMPI), byte(PUSH1), 1, byte(PUSH1), 1, byte(ADD), byte(JUMPDEST), byte(STOP)},
			expectedStack:       []*uint256.Uint{},
			expectedGasConsumed: 16,
		},
		{
			name: "jumpi no",
			code: []byte{
				byte(PUSH1), 0,
				byte(PUSH1), 10,
				byte(JUMPI),
				byte(PUSH1), 1,
				byte(PUSH1), 1,
				byte(ADD),
				byte(JUMPDEST),
				byte(STOP),
			},
			expectedStack:       []*uint256.Uint{uint256.NewUint(2)},
			expectedGasConsumed: 26,
		},
		{
			name: "check zero and jump",
			code: []byte{
				byte(PUSH1), 4,
				byte(PUSH1), 2,
				byte(PUSH1), 2,
				byte(ADD),
				byte(SUB),
				byte(ISZERO),
				byte(PUSH1), 14,
				byte(JUMPI),
				byte(PUSH1), 42,
				byte(JUMPDEST),
				byte(STOP),
			},
			expectedStack:       []*uint256.Uint{},
			expectedGasConsumed: 31,
		},
		{
			name: "check zero and dont jump",
			code: []byte{
				byte(PUSH1), 4,
				byte(PUSH1), 2,
				byte(PUSH1), 3,
				byte(ADD),
				byte(SUB),
				byte(ISZERO),
				byte(PUSH1), 14,
				byte(JUMPI),
				byte(PUSH1), 42,
				byte(JUMPDEST),
				byte(STOP),
			},
			expectedStack:       []*uint256.Uint{uint256.NewUint(42)},
			expectedGasConsumed: 35,
		},
		{
			name: "exchange 1st and 5th stack items",
			code: []byte{
				byte(PUSH1), 1,
				byte(PUSH1), 2,
				byte(PUSH1), 3,
				byte(PUSH1), 4,
				byte(PUSH1), 5,
				byte(PUSH1), 6,
				byte(SWAP5),
				byte(STOP),
			},
			expectedStack: []*uint256.Uint{
				uint256.NewUint(6),
				uint256.NewUint(2),
				uint256.NewUint(3),
				uint256.NewUint(4),
				uint256.NewUint(5),
				uint256.NewUint(1),
			},
			expectedGasConsumed: 21,
		},
		{
			name: "read raw mem at offset 12",
			code: []byte{
				byte(PUSH1), 12,
				byte(MLOAD),
				byte(STOP),
			},
			expectedStack:       []*uint256.Uint{uint256.Zero()},
			ignoreMemory:        true,
			expectedGasConsumed: 6,
		},
		{
			name: "read raw mem at offset 0",
			code: []byte{
				byte(PUSH1), 12,
				byte(MLOAD),
				byte(STOP),
			},
			expectedStack:       []*uint256.Uint{uint256.Zero()},
			ignoreMemory:        true,
			expectedGasConsumed: 6,
		},
		{
			name: "write mem",
			code: []byte{
				byte(PUSH1), 42, // data
				byte(PUSH1), 0, // offset
				byte(MSTORE),
				byte(PUSH1), 0,
				byte(MLOAD),
				byte(STOP),
			},
			expectedStack:       []*uint256.Uint{uint256.NewUint(42)},
			ignoreMemory:        true,
			expectedGasConsumed: 47,
		},
		{
			name: "write mem offsetted",
			code: []byte{
				byte(PUSH1), 42, // data
				byte(PUSH1), 12, // offset
				byte(MSTORE),
				byte(PUSH1), 12,
				byte(MLOAD),
				byte(STOP),
			},
			expectedStack:       []*uint256.Uint{uint256.NewUint(42)},
			ignoreMemory:        true,
			expectedGasConsumed: 47,
		},
		{
			name: "mem example https://www.evm.codes/",
			code: []byte{
				byte(PUSH1), 0,
				byte(MLOAD),

				byte(PUSH1), 0xff, // data
				byte(PUSH1), 0, // offset
				byte(MSTORE),
				byte(PUSH1), 0,
				byte(MLOAD),

				byte(PUSH1), 0xff, // data
				byte(PUSH1), 1, // offset
				byte(MSTORE),
				byte(PUSH1), 0,
				byte(MLOAD),

				byte(STOP),
			},
			expectedStack: []*uint256.Uint{
				uint256.Zero(),
				uint256.NewUint(0xff),
				uint256.Zero(),
			},
			ignoreMemory:        true,
			expectedGasConsumed: 69,
		},
		{
			name: "mem save byte",
			code: []byte{
				byte(PUSH4), 0xaa, 0xbb, 0xcc, 0xdd, // data
				byte(PUSH1), 0, // offset
				byte(MSTORE8),
				byte(STOP),
			},
			expectedMemory:      []byte{0xdd},
			expectedGasConsumed: 10,
		},
		{
			name: "simple dup5",
			code: []byte{
				byte(PUSH1), 1,
				byte(PUSH1), 2,
				byte(PUSH1), 3,
				byte(PUSH1), 4,
				byte(PUSH1), 5,
				byte(PUSH1), 6,
				byte(PUSH1), 7,
				byte(DUP5),
				byte(STOP),
			},
			expectedStack: []*uint256.Uint{
				uint256.NewUint(1),
				uint256.NewUint(2),
				uint256.NewUint(3),
				uint256.NewUint(4),
				uint256.NewUint(5),
				uint256.NewUint(6),
				uint256.NewUint(7),
				uint256.NewUint(3),
			},
			expectedGasConsumed: 24,
		},
		{
			name: "bitwise AND operation",
			code: []byte{
				byte(PUSH2), 0x00, 0xFF,
				byte(NOT),
				byte(PUSH2), 0x0F, 0x0F,
				byte(AND),
				byte(STOP),
			},
			expectedStack:       []*uint256.Uint{uint256.NewUint(3840)}, // 0x0F00
			expectedGasConsumed: 12,
		},
		{
			name: "bitwise OR operation",
			code: []byte{
				byte(PUSH2), 0x00, 0xFF,
				byte(NOT),
				byte(PUSH2), 0x0F, 0x0F,
				byte(OR),
				byte(STOP),
			},
			expectedStack:       []*uint256.Uint{uint256.Zero().SetBytes([]byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f})},
			expectedGasConsumed: 12,
		},
		{
			name: "bitwise XOR operation",
			code: []byte{
				byte(PUSH2), 0x00, 0xFF,
				byte(NOT),
				byte(PUSH1), 0x0F,
				byte(XOR),
				byte(STOP),
			},
			expectedStack:       []*uint256.Uint{uint256.Zero().SetBytes([]byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f})},
			expectedGasConsumed: 12,
		},
		{
			name: "just do some keccak256 with 0xffffffff",
			code: []byte{
				byte(PUSH1), 0xff, // store 0xffffffff
				byte(PUSH0),
				byte(MSTORE8),
				byte(PUSH1), 0xff,
				byte(PUSH1), 1,
				byte(MSTORE8),
				byte(PUSH1), 0xff,
				byte(PUSH1), 2,
				byte(MSTORE8),
				byte(PUSH1), 0xff,
				byte(PUSH1), 3,
				byte(MSTORE8),

				byte(PUSH1), 4, // size
				byte(PUSH0), // offset
				byte(KECCAK256),

				byte(STOP),
			},
			expectedStack: []*uint256.Uint{
				uint256.Zero().SetBytes([]byte{0x29, 0x04, 0x5A, 0x59, 0x20, 0x07, 0xD0, 0xC2, 0x46, 0xEF, 0x02, 0xC2, 0x22, 0x35, 0x70, 0xDA, 0x95, 0x22, 0xD0, 0xCF, 0x0F, 0x73, 0x28, 0x2C, 0x79, 0xA1, 0xBC, 0x8F, 0x0B, 0xB2, 0xC2, 0x38}),
			},
			expectedMemory:      []byte{0xff, 0xff, 0xff, 0xff},
			expectedGasConsumed: 82,
		},
		{
			name: "checkin da mem size",
			code: []byte{
				byte(PUSH1), 0xff, // store 0xffffff
				byte(PUSH0),
				byte(MSTORE8),
				byte(PUSH1), 0xff,
				byte(PUSH1), 1,
				byte(MSTORE8),
				byte(PUSH1), 0xff,
				byte(PUSH1), 2,
				byte(MSTORE8),

				byte(MSIZE),

				byte(STOP),
			},
			expectedStack: []*uint256.Uint{
				uint256.NewUint(3),
			},
			expectedMemory:      []byte{0xff, 0xff, 0xff},
			expectedGasConsumed: 32,
		},
		{
			name: "checkin da pc",
			code: []byte{
				byte(PUSH1), 0xff, // store 0xffffff
				byte(PUSH0),
				byte(MSTORE8),
				byte(PUSH1), 0xff,
				byte(PUSH1), 1,
				byte(MSTORE8),
				byte(PUSH1), 0xff,
				byte(PUSH1), 2,
				byte(MSTORE8),

				byte(PC),

				byte(STOP),
			},
			expectedStack: []*uint256.Uint{
				uint256.NewUint(14),
			},
			ignoreMemory:        true,
			expectedGasConsumed: 32,
		},
		{
			name:                "simple push 2 byte",
			code:                []byte{byte(PUSH2), 0xff, 0x00, byte(STOP)},
			expectedStack:       []*uint256.Uint{uint256.NewUint(0xff00)},
			expectedGasConsumed: 3,
		},
		{
			name: "byte instruction from https://www.evm.codes/",
			code: []byte{
				byte(PUSH1), 0xff,
				byte(PUSH1), 31,
				byte(BYTE),

				byte(PUSH2), 0xff, 0x00,
				byte(PUSH1), 30,
				byte(BYTE),

				byte(STOP),
			},
			expectedStack: []*uint256.Uint{
				uint256.NewUint(0xff),
				uint256.NewUint(0xff),
			},
			expectedGasConsumed: 18,
		},
		{
			name: "set 0 in memory and inshala memory is 32 bytes",
			code: []byte{
				byte(PUSH0),
				byte(PUSH0),
				byte(MSTORE),
				byte(STOP),
			},
			expectedMemory:      make([]byte, 32),
			expectedGasConsumed: 41,
		},
		{
			name: "check for 2 32 byte long stuff",
			code: []byte{
				byte(PUSH0),
				byte(PUSH0),
				byte(MSTORE),

				byte(PUSH32), 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
				byte(PUSH1), 32,
				byte(MSTORE),
				byte(STOP),
			},
			expectedMemory:      append(make([]byte, 32), []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f}...),
			expectedGasConsumed: 82,
		},
		{
			name: "memcopy ahh https://www.evm.codes/ example",
			code: []byte{
				byte(PUSH0),
				byte(PUSH0),
				byte(MSTORE),

				byte(PUSH32), 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
				byte(PUSH1), 32,
				byte(MSTORE),

				byte(PUSH1), 32,
				byte(PUSH1), 32,
				byte(PUSH0),
				byte(MCOPY),

				byte(STOP),
			},
			expectedMemory:      []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f},
			expectedGasConsumed: 94,
		},
		{
			name: "out of gas ? what a loser",
			code: []byte{
				byte(PUSH0),
				byte(PUSH0),
				byte(MSTORE),
				byte(STOP),
			},
			expectedError:     outOfGas,
			gas:               1,
			ignoreMemory:      true,
			ignoreGasConsumed: true,
			ignoreStack:       true,
		},
		{
			name: "how much many much gas me use ?",
			code: []byte{
				byte(PUSH0),  // 3 gas
				byte(PUSH0),  // 3 gas
				byte(MSTORE), // 3 gas + 32 offset = 35 gas
				byte(GAS),    // 2 gas -> should be 35 + 3 + 3 + 2 == 35 + 6 + 2 == 35 + 8 == 35 + 5 + 3 == 40 + 3 == 43
				byte(STOP),
			},
			gas:                 100,
			expectedMemory:      make([]byte, 32),
			expectedStack:       []*uint256.Uint{uint256.NewUint(100 - 43)},
			expectedGasConsumed: 43,
		},
		{
			name: "append log record with one topic",
			code: []byte{
				byte(PUSH1), 0x04, // size
				byte(PUSH1), 0x00, // offset
				byte(PUSH32),
				// topic
				0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88,
				0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00,
				0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88,
				0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00,
				byte(LOG1),
				byte(STOP),
			},
			ignoreGasConsumed: true,
		},
		{
			name: "append log record with three topics",
			code: []byte{
				byte(PUSH1), 0x04,
				byte(PUSH1), 0x00,
				byte(PUSH32),
				// topic 1
				0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
				0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
				0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
				0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
				byte(PUSH32),
				// topic 2
				0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
				0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
				0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
				0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
				byte(PUSH32),
				// topic 3
				0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
				0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
				0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
				0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
				byte(LOG3),
				byte(STOP),
			},
			expectedStack:     []*uint256.Uint{},
			ignoreGasConsumed: true,
		},
		{
			name: "simple slt positive",
			code: []byte{
				byte(PUSH1), 0x02,
				byte(PUSH1), 0x03,
				byte(SLT),
				byte(STOP),
			},
			expectedStack: []*uint256.Uint{
				uint256.NewUint(1), // 2 < 3 -> 1
			},
			expectedGasConsumed: 9,
		},
		{
			name: "simple sgt negative",
			code: []byte{
				byte(PUSH1), 0x02,
				byte(PUSH1), 0x03,
				byte(SGT), // 2 > 3 -> false
				byte(STOP),
			},
			expectedStack: []*uint256.Uint{
				uint256.NewUint(0),
			},
			expectedGasConsumed: 9,
		},
		{
			name: "timestamp is now",
			code: []byte{
				byte(TIMESTAMP),
				byte(STOP),
			},
			expectedStack: []*uint256.Uint{
				uint256.NewUint(uint64(time.Now().Unix())),
			},
			expectedGasConsumed: 2,
		},
		{
			name: "push 0 in transient storage",
			code: []byte{
				byte(PUSH0),
				byte(PUSH0),
				byte(TSTORE),
				byte(PUSH0),
				byte(TLOAD),
				byte(STOP),
			},
			expectedStack: []*uint256.Uint{
				uint256.Zero(),
			},
			expectedGasConsumed: 209,
		},
		{
			name: "push multiple values in transient storage",
			code: []byte{
				byte(PUSH1), 1,
				byte(PUSH1), 2,
				byte(PUSH1), 3,
				byte(PUSH1), 4,
				byte(TSTORE),
				byte(TSTORE),
				byte(PUSH1), 2,
				byte(TLOAD),
				byte(PUSH1), 4,
				byte(TLOAD),
				byte(STOP),
			},
			expectedStack: []*uint256.Uint{
				uint256.NewUint(1),
				uint256.NewUint(3),
			},
			expectedGasConsumed: 418,
		},
		{
			name: "push big in transient storage",
			code: []byte{
				byte(PUSH32), 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				byte(PUSH32), 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				byte(TSTORE),
				byte(PUSH32), 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				byte(TLOAD),
				byte(STOP),
			},
			expectedStack: []*uint256.Uint{
				uint256.MustFromHex("0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"),
			},
			expectedGasConsumed: 209,
		},
		{
			name: "return 42",
			code: []byte{
				byte(PUSH1), 42, // data
				byte(PUSH0), // offset
				byte(MSTORE),

				byte(PUSH1), 1, // size
				byte(PUSH1), 31, // offset
				byte(RETURN),
			},
			expectedMemory:    append(make([]byte, 31), 42),
			expectedResult:    []byte{42},
			ignoreGasConsumed: true,
		},
		{
			name: "2 return 42 (should do only one i think)",
			code: []byte{
				byte(PUSH1), 42, // data
				byte(PUSH0), // offset
				byte(MSTORE),

				byte(PUSH1), 1, // size
				byte(PUSH1), 31, // offset
				byte(RETURN),

				byte(PUSH1), 1, // size
				byte(PUSH1), 31, // offset
				byte(RETURN),
			},
			expectedMemory:    append(make([]byte, 31), 42),
			expectedResult:    []byte{42},
			ignoreGasConsumed: true,
		},
		{
			name: "push 0 in global storage",
			code: []byte{
				byte(PUSH0),
				byte(PUSH0),
				byte(SSTORE),
				byte(PUSH0),
				byte(SLOAD),
				byte(STOP),
			},
			expectedStack: []*uint256.Uint{
				uint256.Zero(),
			},
			expectedGasConsumed: 2209,
		},
		{
			name: "push multiple values in global storage",
			code: []byte{
				byte(PUSH1), 1,
				byte(PUSH1), 2,
				byte(PUSH1), 3,
				byte(PUSH1), 4,
				byte(SSTORE),
				byte(SSTORE),
				byte(PUSH1), 2,
				byte(SLOAD),
				byte(PUSH1), 4,
				byte(SLOAD),
				byte(STOP),
			},
			expectedStack: []*uint256.Uint{
				uint256.NewUint(1),
				uint256.NewUint(3),
			},
			expectedGasConsumed: 4418,
		},
		{
			name: "reuse global storage cost less",
			code: []byte{
				byte(PUSH1), 1,
				byte(PUSH1), 2,
				byte(SSTORE),
				byte(PUSH1), 2,
				byte(SLOAD),
				byte(PUSH1), 3,
				byte(PUSH1), 2,
				byte(SSTORE),
				byte(PUSH1), 2,
				byte(SLOAD),
				byte(STOP),
			},
			expectedStack: []*uint256.Uint{
				uint256.NewUint(1),
				uint256.NewUint(3),
			},
			expectedGasConsumed: 2418,
		},
		{
			name: "push big in global storage",
			code: []byte{
				byte(PUSH32), 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				byte(PUSH32), 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				byte(SSTORE),
				byte(PUSH32), 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				byte(SLOAD),
				byte(STOP),
			},
			expectedStack: []*uint256.Uint{
				uint256.MustFromHex("0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"),
			},
			expectedGasConsumed: 2209,
		},
		{
			name: "revert",
			code: []byte{
				byte(PUSH0),
				byte(PUSH0),
				byte(REVERT),
			},
			ignoreGasConsumed: true,
			expectedError:     revertError,
		},
		{
			name: "caller",
			code: []byte{
				byte(CALLER),
				byte(STOP),
			},
			caller: Account{
				EvmAddress: 0xcacabebe,
			},
			expectedStack: []*uint256.Uint{
				uint256.NewUint(0xcacabebe),
			},
			expectedGasConsumed: 2,
		},
		{
			name: "call value",
			code: []byte{
				byte(CALLVALUE),
				byte(STOP),
			},
			callValue: *uint256.NewUint(0xcacabebe),
			expectedStack: []*uint256.Uint{
				uint256.NewUint(0xcacabebe),
			},
			expectedGasConsumed: 2,
		},
		{
			name: "simple calldataload",
			code: []byte{
				byte(PUSH0),
				byte(CALLDATALOAD),
				byte(STOP),
			},
			callData: []byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			expectedStack: []*uint256.Uint{
				uint256.MustFromHex("0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"),
			},
			expectedGasConsumed: 6,
		},
		{
			name: "calldataload overflow at nil",
			code: []byte{
				byte(PUSH0),
				byte(CALLDATALOAD),
				byte(STOP),
			},
			callData: []byte{0xff},
			expectedStack: []*uint256.Uint{
				uint256.MustFromHex("0xFF00000000000000000000000000000000000000000000000000000000000000"),
			},
			expectedGasConsumed: 6,
		},
		{
			name: "calldataload overflow at far",
			code: []byte{
				byte(PUSH1), 8,
				byte(CALLDATALOAD),
				byte(STOP),
			},
			callData: []byte{0, 0, 0, 0, 0, 0, 0, 0, 0xff},
			expectedStack: []*uint256.Uint{
				uint256.MustFromHex("0xFF00000000000000000000000000000000000000000000000000000000000000"),
			},
			expectedGasConsumed: 6,
		},
		{
			name: "simple calldatasize",
			code: []byte{
				byte(CALLDATASIZE),
				byte(STOP),
			},
			callData: []byte{0xff},
			expectedStack: []*uint256.Uint{
				uint256.One(),
			},
			expectedGasConsumed: 2,
		},
		{
			name: "calldatasize on null byte",
			code: []byte{
				byte(CALLDATASIZE),
				byte(STOP),
			},
			callData: []byte{0x00},
			expectedStack: []*uint256.Uint{
				uint256.One(),
			},
			expectedGasConsumed: 2,
		},
		{
			name: "big calldatasize",
			code: []byte{
				byte(CALLDATASIZE),
				byte(STOP),
			},
			callData: []byte{0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42},
			expectedStack: []*uint256.Uint{
				uint256.NewUint(0x100),
			},
			expectedGasConsumed: 2,
		},
		{
			name: "simple calldatacopy",
			code: []byte{
				byte(PUSH1), 32,
				byte(PUSH0),
				byte(PUSH0),
				byte(CALLDATACOPY),
				byte(STOP),
			},
			callData:          []byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			expectedStack:     []*uint256.Uint{},
			expectedMemory:    []byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			ignoreGasConsumed: true,
		},
		{
			name: "big calldatacopy",
			code: []byte{
				byte(PUSH1), 255,
				byte(PUSH0),
				byte(PUSH0),
				byte(CALLDATACOPY),
				byte(STOP),
			},
			callData:          []byte{0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42},
			expectedStack:     []*uint256.Uint{},
			expectedMemory:    []byte{0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42},
			ignoreGasConsumed: true,
		},
		{
			name: "override calldatacopy",
			code: []byte{
				byte(PUSH1), 32,
				byte(PUSH1), 0,
				byte(PUSH1), 0,
				byte(CALLDATACOPY),
				byte(PUSH1), 8,
				byte(PUSH1), 31,
				byte(PUSH1), 0,
				byte(CALLDATACOPY),
				byte(STOP),
			},
			callData:          []byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			expectedStack:     []*uint256.Uint{},
			expectedMemory:    []byte{0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			ignoreGasConsumed: true,
		},
		{
			name:              "working simple code",
			code:              mustHex("6080604052348015600e575f5ffd5b50602a00"),
			expectedMemory:    append(make([]byte, 64+31), 0x80), // 00 00 ... 00 80, the free pointer
			expectedStack:     []*uint256.Uint{uint256.NewUint(42)},
			ignoreGasConsumed: true,
		},
		{
			name:              "full code with no callData (should return double revert)",
			code:              mustHex("6080604052348015600f57600080fd5b506004361060285760003560e01c80630dbe671f14602d575b600080fd5b60336047565b604051603e9190606a565b60405180910390f35b60006054905090565b600060ff82169050919050565b6064816050565b82525050565b6000602082019050607d6000830184605d565b9291505056fea2646970667358221220368126a6b73d43aa76aadbfe86261dc0527ac2037fbd80bdcd4bee7210eef92e64736f6c634300081b0033"),
			ignoreGasConsumed: true,
			ignoreMemory:      true,
			expectedError:     revertError,
		},
		{
			name:              "full code with callData (should work)",
			code:              mustHex("6080604052348015600f57600080fd5b506004361060285760003560e01c80630dbe671f14602d575b600080fd5b60336047565b604051603e9190606a565b60405180910390f35b60006054905090565b600060ff82169050919050565b6064816050565b82525050565b6000602082019050607d6000830184605d565b9291505056fea2646970667358221220368126a6b73d43aa76aadbfe86261dc0527ac2037fbd80bdcd4bee7210eef92e64736f6c634300081b0033"),
			callData:          []byte{0x0d, 0xbe, 0x67, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
			expectedResult:    []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54},
			ignoreGasConsumed: true,
			ignoreMemory:      true,
			ignoreStack:       true,
		},
		{
			name: "test stack order",
			code: []byte{
				byte(PUSH1), 1,
				byte(PUSH1), 2,
				byte(STOP),
			},
			expectedStack:     []*uint256.Uint{uint256.NewUint(1), uint256.NewUint(2)},
			ignoreGasConsumed: true,
		},
		{
			name: "dup doesnt copies ref",
			code: []byte{
				byte(PUSH1), 0x80,
				byte(PUSH0),
				byte(PUSH1), 0x20,
				byte(DUP3),
				byte(ADD),
				byte(STOP),
			},
			expectedStack:     []*uint256.Uint{uint256.NewUint(0x80), uint256.NewUint(0x0), uint256.NewUint(0xa0)},
			ignoreGasConsumed: true,
		},
		{
			name: "simple codecopy",
			code: []byte{
				byte(PUSH30), 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				byte(PUSH32), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				byte(POP),
				byte(POP),
				byte(PUSH1), 32,
				byte(PUSH0),
				byte(PUSH0),
				byte(CODECOPY),
				byte(STOP),
			},
			expectedStack:     []*uint256.Uint{},
			expectedMemory:    []byte{0x7d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f},
			ignoreGasConsumed: true,
		},
		{
			name: "big codecopy",
			code: []byte{
				byte(PUSH32), 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
				byte(PUSH32), 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
				byte(PUSH32), 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
				byte(PUSH32), 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
				byte(PUSH32), 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
				byte(PUSH32), 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
				byte(PUSH32), 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
				byte(PUSH32), 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
				byte(POP),
				byte(POP),
				byte(POP),
				byte(POP),
				byte(POP),
				byte(POP),
				byte(POP),
				byte(POP),
				byte(PUSH1), 255,
				byte(PUSH0),
				byte(PUSH0),
				byte(CODECOPY),
				byte(STOP),
			},
			expectedStack:     []*uint256.Uint{},
			expectedMemory:    []byte{0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f},
			ignoreGasConsumed: true,
		},
		{
			name: "override codecopy",
			code: []byte{
				byte(PUSH30), 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				byte(PUSH32), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				byte(POP),
				byte(POP),
				byte(PUSH1), 32,
				byte(PUSH1), 0,
				byte(PUSH1), 0,
				byte(CODECOPY),
				byte(PUSH1), 8,
				byte(PUSH1), 31,
				byte(PUSH1), 0,
				byte(CODECOPY),
				byte(STOP),
			},
			expectedStack:     []*uint256.Uint{},
			expectedMemory:    []byte{0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f},
			ignoreGasConsumed: true,
		},
		{
			name: "code copy https://www.evm.codes/ 1",
			code: []byte{
				byte(PUSH1), 32, // 2
				byte(PUSH0),                                    // 3
				byte(PUSH0),                                    // 4
				byte(CODECOPY),                                 // 5
				byte(STOP),                                     // 6
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // +8
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // +8=16
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // +8=24
				0xff, 0xff, // +8=32 - 6 == 26
			},
			expectedMemory: []byte{
				byte(PUSH1), 32,
				byte(PUSH0),
				byte(PUSH0),
				byte(CODECOPY),
				byte(STOP),
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				0xff, 0xff,
			},
			ignoreGasConsumed: true,
		},
		{
			name: "code copy https://www.evm.codes/ 2",
			code: []byte{
				byte(PUSH1), 8,
				byte(PUSH1), 31,
				byte(PUSH0),
				byte(CODECOPY),
				byte(STOP),                                     // 7 bytes
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 8
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 16
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 24
				0x7f, // 32 - 7
			},
			expectedMemory:    []byte{0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
			ignoreGasConsumed: true,
		},
		{
			name: "code copy too far",
			code: []byte{
				byte(PUSH1), 4, // size
				byte(PUSH1), 100, // offset
				byte(PUSH0), // destoffset
				byte(CODECOPY),
				byte(STOP),
			},
			expectedMemory:    []byte{0x00, 0x00, 0x00, 0x00},
			ignoreGasConsumed: true,
		},
		{
			name: "code copy nothing",
			code: []byte{
				byte(PUSH1), 0, // size
				byte(PUSH1), 0, // offset
				byte(PUSH0), // destoffset
				byte(CODECOPY),
				byte(STOP),
			},
			ignoreGasConsumed: true,
		},
		{
			name: "gasPrice is 10 wei",
			code: []byte{
				byte(GASPRICE),
				byte(STOP),
			},
			expectedStack:       []*uint256.Uint{uint256.NewUint(10)},
			expectedGasConsumed: 2,
		},
		{
			name: "get the chain ID",
			code: []byte{
				byte(CHAINID),
				byte(STOP),
			},
			expectedStack: []*uint256.Uint{
				uint256.NewUint(2),
			},
			env: Env{
				ChainID: uint256.NewUint(2),
			},
			expectedGasConsumed: 2,
		},
		{
			name: "return data size after call",
			code: []byte{
				byte(PUSH1), 1,
				byte(PUSH0),
				byte(PUSH0),
				byte(PUSH0),
				byte(PUSH1), 80,
				byte(PUSH1), 0x42,
				byte(PUSH1), 255,
				byte(CALL),
				byte(RETURNDATASIZE),
			},
			caller: Account{
				AccountType: CallerAccount,
				EvmAddress:  0,
				GnoAddress:  "address",
				Balance:     uint256.NewUint(100),
				Gas:         uint(1000),
				Code:        []byte{},
			},
			env: Env{
				Accounts: Accounts{
					uint64(0x42): &Account{
						AccountType: ContractAccount,
						EvmAddress:  0x42,
						GnoAddress:  "address",
						Balance:     uint256.NewUint(100),
						Gas:         uint(1000),
						Code: []byte{
							byte(PUSH1), 42, // data
							byte(PUSH0), // offset
							byte(MSTORE),

							byte(PUSH1), 1, // size
							byte(PUSH1), 31, // offset
							byte(RETURN),
						},
					},
				},
			},
			expectedStack: []*uint256.Uint{
				uint256.One(),
				uint256.One(),
			},
			expectedMemory: []byte{
				0x2a,
			},
			ignoreGasConsumed: true,
		},
		{
			name: "precompiled: empty sha256",
			code: []byte{
				byte(PUSH1), 0x20, // retSize
				byte(PUSH1), 0x20, // retOffset
				byte(PUSH0),    // argsSize
				byte(PUSH0),    // argsOffset
				byte(PUSH0),    // value
				byte(PUSH1), 2, // address
				byte(PUSH4), 0xff, 0xff, 0xff, 0xff, // gas
				byte(CALL),
			},
			caller: Account{
				AccountType: CallerAccount,
				EvmAddress:  0xbebecaca,
				GnoAddress:  "bebecaca",
				Balance:     uint256.NewUint(100),
				Gas:         uint(0xffffffffff),
				Code:        []byte{},
			},
			ignoreGasConsumed:      true,
			ignoreMemory:           true,
			ignoreTransientStorage: true,
			ignoreStack:            true,
		},
		{
			name: "blobbasefee basic",
			code: []byte{
				byte(BLOBBASEFEE),
				byte(STOP)},
			env: Env{
				BlobBaseFee: uint256.NewUint(12345),
			},
			expectedStack: []*uint256.Uint{
				uint256.NewUint(12345),
			},
			expectedGasConsumed: 2,
		},
		{
			name: "blobbasefee blob base fee nil",
			code: []byte{
				byte(BLOBBASEFEE),
				byte(STOP)},
			env: Env{
				BlobBaseFee: nil,
			},
			expectedStack: []*uint256.Uint{
				uint256.Zero(),
			},
			expectedGasConsumed: 2,
		},
		{
			name: "basefee with env",
			code: []byte{
				byte(BASEFEE),
				byte(STOP)},
			env: Env{
				PrevBaseFee: 100_000_000_000,
				IncludedGas: 30_000_000,
				TargetGas:   15_000_000,
			},
			expectedStack: []*uint256.Uint{
				uint256.NewUint(112_500_000_000),
			},
			expectedGasConsumed: 2,
		},
		{
			name: "valid blobhash",
			code: []byte{
				byte(PUSH1), 0x00,
				byte(BLOBHASH),
				byte(STOP),
			},
			env: Env{
				BlobHashes: []*uint256.Uint{
					uint256.Zero().SetBytes([]byte{0x01, 0x02, 0x03}), // hash
				},
			},
			expectedStack: []*uint256.Uint{
				uint256.Zero().SetBytes([]byte{0x01, 0x02, 0x03}),
			},
			expectedGasConsumed: 6,
		},
		{
			name: "invalid blobhash",
			code: []byte{
				byte(PUSH1), 0x01,
				byte(BLOBHASH),
				byte(STOP),
			},
			env: Env{
				BlobHashes: []*uint256.Uint{
					uint256.Zero().SetBytes([]byte{0x01, 0x02, 0x03}), // only one blobhash at index 0
				},
			},
			expectedStack: []*uint256.Uint{
				uint256.Zero(),
			},
			expectedGasConsumed: 6,
		},
		{
			name: "coinbase",
			code: []byte{
				byte(COINBASE),
				byte(STOP),
			},
			env: Env{
				Coinbase: uint256.Zero().SetBytes([]byte{
					0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
					0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
					0xde, 0xad, 0xbe, 0xef, // 20 bytes
				}),
			},
			expectedStack: []*uint256.Uint{
				uint256.Zero().SetBytes([]byte{
					0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
					0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
					0xde, 0xad, 0xbe, 0xef, // 20 bytes
				}),
			},
			expectedGasConsumed: 2,
		},
		{
			name: "valid blockhash",
			code: []byte{
				byte(PUSH1), 247, // currentBlock=500, 500-256=244, 247 -> valid
				byte(BLOCKHASH),
				byte(STOP),
			},
			env: Env{
				BlockNumber: uint256.NewUint(500),
				BlockHashes: map[uint64]*uint256.Uint{
					247: uint256.NewUint(0xdeadbeef), // (dummy) hash value for testing
				},
			},
			expectedStack: []*uint256.Uint{
				uint256.NewUint(0xdeadbeef),
			},
			expectedGasConsumed: 23,
		},
		{
			name: "blockhash out of accessible range",
			code: []byte{
				byte(PUSH1), 243, // out of bounds (500-256 = 244)
				byte(BLOCKHASH),
				byte(STOP),
			},
			env: Env{
				BlockNumber: uint256.NewUint(500),
				BlockHashes: map[uint64]*uint256.Uint{
					243: uint256.NewUint(0xdeadbeef),
				},
			},
			expectedStack: []*uint256.Uint{
				uint256.Zero(),
			},
			expectedGasConsumed: 23,
		},
		{
			name: "extcodehash with no code",
			code: []byte{
				byte(PUSH1), 0x43, // addr
				byte(EXTCODEHASH),
				byte(STOP),
			},
			env: Env{
				Accounts: Accounts{
					0x43: &Account{
						Code: []byte{}, // empty code
					},
				},
			},
			expectedStack: []*uint256.Uint{
				uint256.Zero().SetBytes(
					[]byte{
						0xc5, 0xd2, 0x46, 0x01, 0x86, 0xf7, 0x23, 0x3c,
						0x92, 0x7e, 0x7d, 0xb2, 0xdc, 0xc7, 0x03, 0xc0,
						0xe5, 0x00, 0xb6, 0x53, 0xca, 0x82, 0x27, 0x3b,
						0x7b, 0xfa, 0xd8, 0x04, 0x5d, 0x85, 0xa4, 0x70,
					}, // empty code returns keccak256("")
				),
			},
			expectedGasConsumed: 103,
		},
		{
			name: "extcodehash on non-existing account",
			code: []byte{
				byte(PUSH1), 0x99, // addr not in accounts
				byte(EXTCODEHASH),
				byte(STOP),
			},
			env: Env{
				Accounts: Accounts{}, // empty accounts
			},
			expectedStack: []*uint256.Uint{
				uint256.Zero(),
			},
			expectedGasConsumed: 103,
		},
		{
			name: "extcodehash with no env",
			code: []byte{
				byte(PUSH1), 0x99,
				byte(EXTCODEHASH),
				byte(STOP),
			},
			env: Env{
				Accounts: nil, // nil -> no accounts context
			},
			expectedStack: []*uint256.Uint{
				uint256.Zero(),
			},
			expectedGasConsumed: 103,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			errStack, errResult, errMem := false, false, false

			st := newStateFromEnv(&tc.env)
			st.setCallData(tc.callData)
			st.setCallValue(&tc.callValue)
			st.setCallerAddress(tc.caller.EvmAddress)
			st.tmp.accounts[tc.caller.EvmAddress] = &tc.caller
			if tc.gas > 0 {
				st.setGasLimit(tc.gas)
			}
			st.setCode(tc.code)
			err := st.executeByteCode()
			stack := st.getStackData()
			result := st.getResult()
			mem := st.memory

			if (err != tc.expectedError && (err == nil || tc.expectedError == nil)) || (err != nil && tc.expectedError != nil && err.Error() != tc.expectedError.Error()) {
				if err == nil {
					t.Errorf("I expected this error:\n -> '%s'\nbut I got no", tc.expectedError)
				} else if tc.expectedError == nil {
					t.Errorf("I expected no error but I got that one:\n -> '%s'", err)
				} else {
					t.Errorf("I expected this error:\n -> '%s'\nbut I got that one:\n -> '%s'", tc.expectedError, err)
				}
			}

			if !tc.ignoreGasConsumed && st.gasConsumed != tc.expectedGasConsumed {
				t.Errorf("I expected this gas usage:\n -> %d\nbut I got:\n -> %d", tc.expectedGasConsumed, st.gasConsumed)
			}

			if len(stack) != len(tc.expectedStack) {
				errStack = true
			} else {
				for i := 0; i < len(stack); i++ {
					if !stack[i].Eq(tc.expectedStack[i]) {
						errStack = true
						break
					}
				}
			}

			if len(result) != len(tc.expectedResult) {
				errResult = true
			} else {
				for i := 0; i < len(result); i++ {
					if result[i] != tc.expectedResult[i] {
						errResult = true
						break
					}
				}
			}

			if len(mem) != len(tc.expectedMemory) {
				errMem = true
			} else {
				for i := 0; i < len(mem); i++ {
					if mem[i] != tc.expectedMemory[i] {
						errMem = true
						break
					}
				}
			}
			if tc.ignoreMemory {
				fmt.Println("--- WARN: Memory is ignored for this test")
				errMem = false
			}
			if tc.ignoreGasConsumed {
				fmt.Println("--- WARN: GasConsumed is ignored for this test")
			}
			if tc.ignoreStack {
				fmt.Println("--- WARN: Stack is ignored for this test")
				errStack = false
			}

			if errStack {
				t.Errorf("I expected this stack at exit:")
				for i := 0; i < len(stack) || i < len(tc.expectedStack); i++ {
					expected := "empty"
					if i < len(tc.expectedStack) {
						expected = "'" + tc.expectedStack[i].Hex() + "'"
					}
					t.Errorf("-> %s", expected)
				}
				t.Error("but I got that one:")
				for i := 0; i < len(stack) || i < len(tc.expectedStack); i++ {
					actual := "empty"
					if i < len(stack) {
						actual = "'" + stack[i].Hex() + "'"
					}
					t.Errorf("-> %s", actual)
				}
			}
			if errResult {
				t.Errorf("I expected this result:")
				for i := 0; i < len(result) || i < len(tc.expectedResult); i++ {
					expected := "empty"
					if i < len(tc.expectedResult) {
						expected = "'" + strconv.FormatUint(uint64(tc.expectedResult[i]), 16) + "'"
					}
					t.Errorf("-> %s", expected)
				}
				t.Error("but I got that one:")
				for i := 0; i < len(result) || i < len(tc.expectedResult); i++ {
					actual := "empty"
					if i < len(result) {
						actual = "'" + strconv.FormatUint(uint64(result[i]), 16) + "'"
					}
					t.Errorf("-> %s", actual)
				}
			}
			max := len(mem)
			if len(tc.expectedMemory) > max {
				max = len(tc.expectedMemory)
			}
			if errMem {
				t.Errorf("Memory doesnt match expected")
				t.Errorf("|  Address  | EXPECTED |  REALLY  |")
				t.Errorf("|----------|----------|----------|")
				for i := 0; i < max; i++ {
					x := "        "
					y := "        "
					tmp := ""
					if i < len(tc.expectedMemory) {
						tmp = strconv.FormatUint(uint64(tc.expectedMemory[i]), 16)
						x = strings.Repeat(" ", 8-len(tmp)) + tmp
					}
					if i < len(mem) {
						tmp = strconv.FormatUint(uint64(mem[i]), 16)
						y = strings.Repeat(" ", 8-len(tmp)) + tmp
					}
					tmp = strconv.FormatUint(uint64(i), 16)
					t.Errorf("| " + tmp + strings.Repeat(" ", 8-len(tmp)) + " | " + x + " | " + y + " |")
				}
			}
		})
	}
}
