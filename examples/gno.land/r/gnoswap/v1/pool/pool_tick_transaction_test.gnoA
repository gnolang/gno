package pool

import (
	"std"
	"testing"

	"gno.land/p/demo/uassert"
	i256 "gno.land/p/gnoswap/int256"
	u256 "gno.land/p/gnoswap/uint256"

	plp "gno.land/p/gnoswap/gnsmath"

	"gno.land/p/gnoswap/consts"
	"gno.land/r/gnoswap/v1/common"

	"gno.land/r/gnoswap/v1/gns"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/foo"
)

func TestTickTransaction(t *testing.T) {
	std.TestSetRealm(adminRealm)
	gns.Approve(poolAddr, poolCreationFee)

	testSqrt := common.TickMathGetSqrtRatioAtTick(-24081)
	testSqrt = testSqrt.Add(testSqrt, u256.One())
	CreatePool(barPath, fooPath, fee100, testSqrt.ToString())

	thisPool := GetPool(barPath, fooPath, fee100)

	uassert.Equal(t, thisPool.liquidity.ToString(), "0")
	uassert.Equal(t, thisPool.slot0.tick, int32(-24081))

	liqToMint := "10000000000" // 10_000_000_000
	foo.Approve(poolAddr, consts.UINT64_MAX)
	bar.Approve(poolAddr, consts.UINT64_MAX)

	std.TestSetRealm(posRealm)
	Mint(
		barPath,
		fooPath,
		fee100,
		positionAddr,
		-24082,
		-24080,
		liqToMint,
		adminAddr,
	)
	uassert.Equal(t, thisPool.liquidity.ToString(), "10000000000")

	std.TestSetRealm(posRealm)
	Mint(
		barPath,
		fooPath,
		fee100,
		positionAddr,
		-24082,
		-24081,
		liqToMint,
		adminAddr,
	)
	uassert.Equal(t, thisPool.liquidity.ToString(), "10000000000")

	testSqrtSubOne := new(u256.Uint).Sub(testSqrt, u256.One())
	{
		sqrtQ, amountIn, amountOut, feeAmount := plp.SwapMathComputeSwapStepStr(
			testSqrt,
			testSqrtSubOne,
			u256.MustFromDecimal(liqToMint),
			i256.MustFromDecimal("3"),
			uint64(3000),
		)

		uassert.Equal(t, sqrtQ, testSqrtSubOne.ToString())
		uassert.Equal(t, amountIn, "1")
		uassert.Equal(t, amountOut, "0")
		uassert.Equal(t, feeAmount, "1")
	}

	std.TestSetRealm(rouRealm)
	Swap(
		barPath,
		fooPath,
		fee100,
		adminAddr,
		true,
		"3",
		consts.MIN_PRICE,
		adminAddr,
	)

	uassert.Equal(t, thisPool.slot0.tick, int32(-24082))
	uassert.Equal(t, thisPool.slot0.sqrtPriceX96.ToString(), testSqrtSubOne.ToString())
	uassert.Equal(t, thisPool.liquidity.ToString(), "20000000000")
}
