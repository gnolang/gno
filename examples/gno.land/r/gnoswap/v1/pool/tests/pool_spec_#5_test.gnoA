package pool

import (
	"std"
	"testing"

	"gno.land/p/demo/uassert"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/foo"

	"gno.land/p/gnoswap/consts"

	"gno.land/r/gnoswap/v1/gns"
	pl "gno.land/r/gnoswap/v1/pool"
)

var (
	test_tickLower                      = int32(9000)
	test_tickUpper                      = int32(11000)
	test_liquidityExpectStr             = "100000000"
	user1Addr               std.Address = "g1ecely4gjy0yl6s9kt409ll330q9hk2lj9ls3ec"
	minTick                             = int32(-887220)
	maxTick                             = int32(887220)
)

func init() {
	std.TestSkipHeights(100)
}

func AfterTest(t *testing.T) {
	poolRealm := std.NewUserRealm(poolAddr)
	std.TestSetRealm(poolRealm)
	barBal := bar.BalanceOf(poolAddr)
	fooBal := foo.BalanceOf(poolAddr)
	bar.Transfer(adminAddr, barBal)
	foo.Transfer(adminAddr, fooBal)
	pools.Remove("gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000")
}

func TestSuccess_transfers_token1_only(t *testing.T) {
	// ================================ Pool Setup ================================================
	std.TestSetRealm(adminRealm)

	gns.Approve(poolAddr, poolCreationFee)

	token0Path := "gno.land/r/onbloc/foo"

	foo.Approve(poolAddr, consts.UINT64_MAX)
	bar.Approve(poolAddr, consts.UINT64_MAX)
	pl.CreatePool(barPath, token0Path, 3000, "25054144837504793118641380156") // encodePriceSqrt(1, 10)
	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000"

	std.TestSetRealm(posRealm)
	pl.Mint(token0Path, barPath, 3000, positionAddr, minTick, maxTick, "3161", adminAddr)

	// ===================== transfers token1 only =====================
	pool := GetPool(token0Path, barPath, 3000)
	tickSpacing := pool.tickSpacing

	std.TestSetRealm(posRealm)
	pl.Mint(token0Path, barPath, 3000, positionAddr, -46080, -23040, "10000", adminAddr)

	barBalance := bar.BalanceOf(poolAddr)
	fooBalance := foo.BalanceOf(poolAddr)

	uassert.Equal(t, barBalance, uint64(9996))
	uassert.Equal(t, fooBalance, uint64(1000+2162))

	AfterTest(t)
}

func TestSuccess_min_tick_with_max_leverage(t *testing.T) {
	// ================================ Pool Setup ================================================
	std.TestSetRealm(adminRealm)

	gns.Approve(poolAddr, poolCreationFee)

	token0Path := "gno.land/r/onbloc/foo"

	foo.Approve(poolAddr, consts.UINT64_MAX)
	bar.Approve(poolAddr, consts.UINT64_MAX)
	pl.CreatePool(barPath, token0Path, 3000, "25054144837504793118641380156") // encodePriceSqrt(1, 10)
	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000"

	std.TestSetRealm(posRealm)
	pl.Mint(token0Path, barPath, 3000, positionAddr, minTick, maxTick, "3161", adminAddr)

	// ===================== min tick with max leverage =====================
	pool := GetPool(token0Path, barPath, 3000)
	tickSpacing := pool.tickSpacing

	std.TestSetRealm(posRealm)
	pl.Mint(token0Path, barPath, 3000, positionAddr, minTick, minTick+tickSpacing, "5070602400912917605986812821504", adminAddr) // 2**102

	barBalance := bar.BalanceOf(poolAddr)
	fooBalance := foo.BalanceOf(poolAddr)

	uassert.Equal(t, barBalance, uint64(9996)) // got 19992, expected 9996
	uassert.Equal(t, fooBalance, uint64(1000+828011520))

	AfterTest(t)
}

func TestSuccess_work_for_min_tick(t *testing.T) {
	// ================================ Pool Setup ================================================
	std.TestSetRealm(adminRealm)

	gns.Approve(poolAddr, poolCreationFee)

	token0Path := "gno.land/r/onbloc/foo"

	foo.Approve(poolAddr, consts.UINT64_MAX)
	bar.Approve(poolAddr, consts.UINT64_MAX)
	pl.CreatePool(barPath, token0Path, 3000, "25054144837504793118641380156") // encodePriceSqrt(1, 10)
	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000"

	std.TestSetRealm(posRealm)
	pl.Mint(token0Path, barPath, 3000, positionAddr, minTick, maxTick, "3161", adminAddr)

	// ===================== work for min tick =====================
	pool := GetPool(token0Path, barPath, 3000)
	tickSpacing := pool.tickSpacing

	std.TestSetRealm(posRealm)
	pl.Mint(token0Path, barPath, 3000, positionAddr, minTick, -23040, "10000", adminAddr)

	barBalance := bar.BalanceOf(poolAddr)
	fooBalance := foo.BalanceOf(poolAddr)

	uassert.Equal(t, barBalance, uint64(9996))
	uassert.Equal(t, fooBalance, uint64(1000+3161))

	AfterTest(t)
}

func TestSuccess_removing_works(t *testing.T) {
	// ================================ Pool Setup ================================================
	std.TestSetRealm(adminRealm)

	gns.Approve(poolAddr, poolCreationFee)

	token0Path := "gno.land/r/onbloc/foo"

	foo.Approve(poolAddr, consts.UINT64_MAX)
	bar.Approve(poolAddr, consts.UINT64_MAX)
	pl.CreatePool(barPath, token0Path, 3000, "25054144837504793118641380156") // encodePriceSqrt(1, 10)
	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000"

	std.TestSetRealm(posRealm)
	pl.Mint(token0Path, barPath, 3000, positionAddr, minTick, maxTick, "3161", adminAddr)

	// ===================== removing works =====================
	pool := GetPool(token0Path, barPath, 3000)
	tickSpacing := pool.tickSpacing

	std.TestSetRealm(posRealm)
	pl.Mint(token0Path, barPath, 3000, positionAddr, -46080, -46020, "10000", adminAddr)
	amount0, amount1 := pl.Burn(token0Path, barPath, 3000, -46080, -46020, "10000")

	uassert.Equal(t, amount0, "0")
	uassert.Equal(t, amount1, "3")
}

func gnsBalance(addr std.Address) uint64 {
	return gns.BalanceOf(addr)
}
