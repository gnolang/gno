package pool

import (
	"testing"

	"gno.land/p/demo/uassert"
	"gno.land/p/demo/ufmt"

	u256 "gno.land/p/gnoswap/uint256"

	plp "gno.land/p/gnoswap/gnsmath"

	"gno.land/p/gnoswap/consts"
)

var (
	tickSpacing = int32(1)
	minTick     = (consts.MIN_TICK / tickSpacing) * tickSpacing
	maxTick     = (consts.MAX_TICK / tickSpacing) * tickSpacing
)

func BeforeEachTest(t *testing.T) {
	InitializeTickBitmaps_Helper()
}

func TestTickInit_1(t *testing.T) {
	BeforeEachTest(t)
	t.Run("is flipped by #flipTick", func(t *testing.T) {
		TickBitmapFlipTick_Helper(int32(1), tickSpacing)
		nextTick_res, bool_res := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(1), tickSpacing, true)
		uassert.Equal(t, nextTick_res, int32(1))
		uassert.Equal(t, bool_res, true)
	})
}

func TestTickInit_2(t *testing.T) {
	BeforeEachTest(t)
	t.Run("is flipped back by #flipTick", func(t *testing.T) {
		TickBitmapFlipTick_Helper(int32(1), tickSpacing)
		TickBitmapFlipTick_Helper(int32(1), tickSpacing)
		nextTick_res, bool_res := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(1), tickSpacing, true)
		uassert.Equal(t, bool_res, false)
	})
}

func TestTickInit_3(t *testing.T) {
	BeforeEachTest(t)
	t.Run("is not changed by another flip to a different tick", func(t *testing.T) {
		TickBitmapFlipTick_Helper(int32(2), tickSpacing)
		nextTick_res, bool_res := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(1), tickSpacing, true)
		uassert.Equal(t, bool_res, false)
	})
}

func TestTickInit_4(t *testing.T) {
	BeforeEachTest(t)
	t.Run("is not changed by another flip to a different tick on another word", func(t *testing.T) {
		TickBitmapFlipTick_Helper(int32(1)+int32(256), tickSpacing)
		nextTick_res_1, bool_res_1 := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(257), tickSpacing, true)
		nextTick_res_2, bool_res_2 := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(1), tickSpacing, true)
		uassert.Equal(t, bool_res_2, false)
	})
}

func TestTickFlip_1(t *testing.T) {
	BeforeEachTest(t)
	t.Run("flips only the specified tick", func(t *testing.T) {
		TickBitmapFlipTick_Helper(int32(-230), tickSpacing)
		nextTick_res_1, bool_res_1 := IsInitialized_Helper(int32(-230), tickSpacing)
		uassert.Equal(t, bool_res_1, true)
		nextTick_res_2, bool_res_2 := IsInitialized_Helper(int32(-231), tickSpacing)
		uassert.Equal(t, bool_res_2, false)
		nextTick_res_3, bool_res_3 := IsInitialized_Helper(int32(-229), tickSpacing)
		uassert.Equal(t, bool_res_3, false)
		nextTick_res_4, bool_res_4 := IsInitialized_Helper(int32(-230+256), tickSpacing)
		uassert.Equal(t, bool_res_4, false)
		nextTick_res_5, bool_res_5 := IsInitialized_Helper(int32(-230-256), tickSpacing)
		uassert.Equal(t, bool_res_5, false)

		TickBitmapFlipTick_Helper(int32(-230), tickSpacing)
		nextTick_res_6, bool_res_6 := IsInitialized_Helper(int32(-230), tickSpacing)
		uassert.Equal(t, bool_res_6, false)
		nextTick_res_7, bool_res_7 := IsInitialized_Helper(int32(-231), tickSpacing)
		uassert.Equal(t, bool_res_7, false)
		nextTick_res_8, bool_res_8 := IsInitialized_Helper(int32(-229), tickSpacing)
		uassert.Equal(t, bool_res_8, false)
		nextTick_res_9, bool_res_9 := IsInitialized_Helper(int32(-230+256), tickSpacing)
		uassert.Equal(t, bool_res_9, false)
		nextTick_res_10, bool_res_10 := IsInitialized_Helper(int32(-230-256), tickSpacing)
		uassert.Equal(t, bool_res_10, false)
	})
}

func TestTickFlip_2(t *testing.T) {
	BeforeEachTest(t)
	t.Run("reverts only itself", func(t *testing.T) {
		TickBitmapFlipTick_Helper(int32(-230), tickSpacing)
		TickBitmapFlipTick_Helper(int32(-259), tickSpacing)
		TickBitmapFlipTick_Helper(int32(-229), tickSpacing)
		TickBitmapFlipTick_Helper(int32(500), tickSpacing)
		TickBitmapFlipTick_Helper(int32(-259), tickSpacing)
		TickBitmapFlipTick_Helper(int32(-229), tickSpacing)
		TickBitmapFlipTick_Helper(int32(-259), tickSpacing)
		nextTick_res_1, bool_res_1 := IsInitialized_Helper(int32(-259), tickSpacing)
		uassert.Equal(t, bool_res_1, true)
		nextTick_res_2, bool_res_2 := IsInitialized_Helper(int32(-229), tickSpacing)
		uassert.Equal(t, bool_res_2, false)
	})
}

func TestTicknextInitializedTickWithinOneWord_1(t *testing.T) {
	BeforeEachTest(t)
	TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
	TickBitmapFlipTick_Helper(int32(70), tickSpacing)
	TickBitmapFlipTick_Helper(int32(78), tickSpacing)
	TickBitmapFlipTick_Helper(int32(84), tickSpacing)
	TickBitmapFlipTick_Helper(int32(139), tickSpacing)
	TickBitmapFlipTick_Helper(int32(240), tickSpacing)
	TickBitmapFlipTick_Helper(int32(535), tickSpacing)
	t.Run("returns tick to right if at initialized tick", func(t *testing.T) {
		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(78), tickSpacing, false)
		uassert.Equal(t, next, int32(84))
		uassert.Equal(t, initialized, true)
	})
}

func TestTicknextInitializedTickWithinOneWord_2(t *testing.T) {
	BeforeEachTest(t)
	TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
	TickBitmapFlipTick_Helper(int32(70), tickSpacing)
	TickBitmapFlipTick_Helper(int32(78), tickSpacing)
	TickBitmapFlipTick_Helper(int32(84), tickSpacing)
	TickBitmapFlipTick_Helper(int32(139), tickSpacing)
	TickBitmapFlipTick_Helper(int32(240), tickSpacing)
	TickBitmapFlipTick_Helper(int32(535), tickSpacing)
	t.Run("returns tick to right if at initialized tick", func(t *testing.T) {
		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(-55), tickSpacing, false)
		uassert.Equal(t, next, int32(-4))
		uassert.Equal(t, initialized, true)
	})
}

func TestTicknextInitializedTickWithinOneWord_3(t *testing.T) {
	BeforeEachTest(t)
	TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
	TickBitmapFlipTick_Helper(int32(70), tickSpacing)
	TickBitmapFlipTick_Helper(int32(78), tickSpacing)
	TickBitmapFlipTick_Helper(int32(84), tickSpacing)
	TickBitmapFlipTick_Helper(int32(139), tickSpacing)
	TickBitmapFlipTick_Helper(int32(240), tickSpacing)
	TickBitmapFlipTick_Helper(int32(535), tickSpacing)
	t.Run("returns the tick directly to the right", func(t *testing.T) {
		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(77), tickSpacing, false)
		uassert.Equal(t, next, int32(78))
		uassert.Equal(t, initialized, true)
	})
}

func TestTicknextInitializedTickWithinOneWord_4(t *testing.T) {
	BeforeEachTest(t)
	TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
	TickBitmapFlipTick_Helper(int32(70), tickSpacing)
	TickBitmapFlipTick_Helper(int32(78), tickSpacing)
	TickBitmapFlipTick_Helper(int32(84), tickSpacing)
	TickBitmapFlipTick_Helper(int32(139), tickSpacing)
	TickBitmapFlipTick_Helper(int32(240), tickSpacing)
	TickBitmapFlipTick_Helper(int32(535), tickSpacing)
	t.Run("returns the tick directly to the right", func(t *testing.T) {
		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(-56), tickSpacing, false)
		uassert.Equal(t, next, int32(-55))
		uassert.Equal(t, initialized, true)
	})
}

func TestTicknextInitializedTickWithinOneWord_5(t *testing.T) {
	BeforeEachTest(t)
	TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
	TickBitmapFlipTick_Helper(int32(70), tickSpacing)
	TickBitmapFlipTick_Helper(int32(78), tickSpacing)
	TickBitmapFlipTick_Helper(int32(84), tickSpacing)
	TickBitmapFlipTick_Helper(int32(139), tickSpacing)
	TickBitmapFlipTick_Helper(int32(240), tickSpacing)
	TickBitmapFlipTick_Helper(int32(535), tickSpacing)
	t.Run("skips half word", func(t *testing.T) {
		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(255), tickSpacing, false)
		uassert.Equal(t, next, int32(511))
		uassert.Equal(t, initialized, false)
	})
}

func TestTicknextInitializedTickWithinOneWord_6(t *testing.T) {
	BeforeEachTest(t)
	TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
	TickBitmapFlipTick_Helper(int32(70), tickSpacing)
	TickBitmapFlipTick_Helper(int32(78), tickSpacing)
	TickBitmapFlipTick_Helper(int32(84), tickSpacing)
	TickBitmapFlipTick_Helper(int32(139), tickSpacing)
	TickBitmapFlipTick_Helper(int32(240), tickSpacing)
	TickBitmapFlipTick_Helper(int32(535), tickSpacing)
	t.Run("skips half word", func(t *testing.T) {
		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(383), tickSpacing, false)
		uassert.Equal(t, next, int32(511))
		uassert.Equal(t, initialized, false)
	})
}

func TestTickLteEqTrue_1(t *testing.T) {
	BeforeEachTest(t)
	TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
	TickBitmapFlipTick_Helper(int32(70), tickSpacing)
	TickBitmapFlipTick_Helper(int32(78), tickSpacing)
	TickBitmapFlipTick_Helper(int32(84), tickSpacing)
	TickBitmapFlipTick_Helper(int32(139), tickSpacing)
	TickBitmapFlipTick_Helper(int32(240), tickSpacing)
	TickBitmapFlipTick_Helper(int32(535), tickSpacing)
	t.Run("returns same tick if initialized", func(t *testing.T) {
		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(78), tickSpacing, true)
		uassert.Equal(t, next, int32(78))
		uassert.Equal(t, initialized, true)
	})
}

func TestTickLteEqTrue_2(t *testing.T) {
	BeforeEachTest(t)
	TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
	TickBitmapFlipTick_Helper(int32(70), tickSpacing)
	TickBitmapFlipTick_Helper(int32(78), tickSpacing)
	TickBitmapFlipTick_Helper(int32(84), tickSpacing)
	TickBitmapFlipTick_Helper(int32(139), tickSpacing)
	TickBitmapFlipTick_Helper(int32(240), tickSpacing)
	TickBitmapFlipTick_Helper(int32(535), tickSpacing)
	t.Run("returns tick directly to the left of input tick if not initialized", func(t *testing.T) {
		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(79), tickSpacing, true)
		uassert.Equal(t, next, int32(78))
		uassert.Equal(t, initialized, true)
	})
}

func TestTickLteEqTrue_3(t *testing.T) {
	BeforeEachTest(t)
	TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
	TickBitmapFlipTick_Helper(int32(70), tickSpacing)
	TickBitmapFlipTick_Helper(int32(78), tickSpacing)
	TickBitmapFlipTick_Helper(int32(84), tickSpacing)
	TickBitmapFlipTick_Helper(int32(139), tickSpacing)
	TickBitmapFlipTick_Helper(int32(240), tickSpacing)
	TickBitmapFlipTick_Helper(int32(535), tickSpacing)
	t.Run("will not exceed the word boundary", func(t *testing.T) {
		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(258), tickSpacing, true)
		uassert.Equal(t, next, int32(256))
		uassert.Equal(t, initialized, false)
	})
}

func TestTickLteEqTrue_4(t *testing.T) {
	BeforeEachTest(t)
	TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
	TickBitmapFlipTick_Helper(int32(70), tickSpacing)
	TickBitmapFlipTick_Helper(int32(78), tickSpacing)
	TickBitmapFlipTick_Helper(int32(84), tickSpacing)
	TickBitmapFlipTick_Helper(int32(139), tickSpacing)
	TickBitmapFlipTick_Helper(int32(240), tickSpacing)
	TickBitmapFlipTick_Helper(int32(535), tickSpacing)
	t.Run("at the word boundary", func(t *testing.T) {
		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(256), tickSpacing, true)
		uassert.Equal(t, next, int32(256))
		uassert.Equal(t, initialized, false)
	})
}

func TestTickLteEqTrue_5_1(t *testing.T) {
	BeforeEachTest(t)
	TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
	TickBitmapFlipTick_Helper(int32(70), tickSpacing)
	TickBitmapFlipTick_Helper(int32(78), tickSpacing)
	TickBitmapFlipTick_Helper(int32(84), tickSpacing)
	TickBitmapFlipTick_Helper(int32(139), tickSpacing)
	TickBitmapFlipTick_Helper(int32(240), tickSpacing)
	TickBitmapFlipTick_Helper(int32(535), tickSpacing)
	t.Run("word boundary less 1 (next initialized tick in next word", func(t *testing.T) {
		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(72), tickSpacing, true)
		uassert.Equal(t, next, int32(70))
		uassert.Equal(t, initialized, true)
	})
}

func TestTickLteEqTrue_5_2(t *testing.T) {
	BeforeEachTest(t)
	TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
	TickBitmapFlipTick_Helper(int32(70), tickSpacing)
	TickBitmapFlipTick_Helper(int32(78), tickSpacing)
	TickBitmapFlipTick_Helper(int32(84), tickSpacing)
	TickBitmapFlipTick_Helper(int32(139), tickSpacing)
	TickBitmapFlipTick_Helper(int32(240), tickSpacing)
	TickBitmapFlipTick_Helper(int32(535), tickSpacing)
	t.Run("word boundary", func(t *testing.T) {
		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(-257), tickSpacing, true)
		uassert.Equal(t, next, int32(-512))
		uassert.Equal(t, initialized, false)
	})
}

func TestTickLteEqTrue_6(t *testing.T) {
	BeforeEachTest(t)
	TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
	TickBitmapFlipTick_Helper(int32(70), tickSpacing)
	TickBitmapFlipTick_Helper(int32(78), tickSpacing)
	TickBitmapFlipTick_Helper(int32(84), tickSpacing)
	TickBitmapFlipTick_Helper(int32(139), tickSpacing)
	TickBitmapFlipTick_Helper(int32(240), tickSpacing)
	TickBitmapFlipTick_Helper(int32(535), tickSpacing)
	t.Run("entire empty word", func(t *testing.T) {
		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(1023), tickSpacing, true)
		uassert.Equal(t, next, int32(768))
		uassert.Equal(t, initialized, false)
	})
}

func TestTickLteEqTrue_7(t *testing.T) {
	BeforeEachTest(t)
	TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
	TickBitmapFlipTick_Helper(int32(70), tickSpacing)
	TickBitmapFlipTick_Helper(int32(78), tickSpacing)
	TickBitmapFlipTick_Helper(int32(84), tickSpacing)
	TickBitmapFlipTick_Helper(int32(139), tickSpacing)
	TickBitmapFlipTick_Helper(int32(240), tickSpacing)
	TickBitmapFlipTick_Helper(int32(535), tickSpacing)
	t.Run("boundary is initialized", func(t *testing.T) {
		TickBitmapFlipTick_Helper(int32(329), tickSpacing)
		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(456), tickSpacing, true)
		uassert.Equal(t, next, int32(329))
		uassert.Equal(t, initialized, true)
	})
}

func TestTickNextInitializedTickWithinOneWordRight(t *testing.T) {
	t.Run("returns the next words initialized tick if on the right boundary_255", func(t *testing.T) {
		BeforeEachTest(t)
		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(255), tickSpacing, false)
		uassert.Equal(t, next, int32(511))
		uassert.Equal(t, initialized, false)
	})

	t.Run("returns the next words initialized tick if on the right boundary_-257", func(t *testing.T) {
		BeforeEachTest(t)
		TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
		TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
		TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
		TickBitmapFlipTick_Helper(int32(70), tickSpacing)
		TickBitmapFlipTick_Helper(int32(78), tickSpacing)
		TickBitmapFlipTick_Helper(int32(84), tickSpacing)
		TickBitmapFlipTick_Helper(int32(139), tickSpacing)
		TickBitmapFlipTick_Helper(int32(240), tickSpacing)
		TickBitmapFlipTick_Helper(int32(535), tickSpacing)

		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(-257), tickSpacing, false)
		uassert.Equal(t, next, int32(-200))
		uassert.Equal(t, initialized, true)
	})
}

func TestTickNextInitializedTickWithinOneWordNextword(t *testing.T) {
	t.Run("returns the next initialized tick from the next word", func(t *testing.T) {
		BeforeEachTest(t)
		TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
		TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
		TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
		TickBitmapFlipTick_Helper(int32(70), tickSpacing)
		TickBitmapFlipTick_Helper(int32(78), tickSpacing)
		TickBitmapFlipTick_Helper(int32(84), tickSpacing)
		TickBitmapFlipTick_Helper(int32(139), tickSpacing)
		TickBitmapFlipTick_Helper(int32(240), tickSpacing)
		TickBitmapFlipTick_Helper(int32(535), tickSpacing)

		TickBitmapFlipTick_Helper(int32(340), tickSpacing)

		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(328), tickSpacing, false)
		uassert.Equal(t, next, int32(340))
		uassert.Equal(t, initialized, true)
	})
}

func TestTickNextInitializedTickWithinOneWordBoundary(t *testing.T) {
	t.Run("does not exceed boundary", func(t *testing.T) {
		BeforeEachTest(t)
		TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
		TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
		TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
		TickBitmapFlipTick_Helper(int32(70), tickSpacing)
		TickBitmapFlipTick_Helper(int32(78), tickSpacing)
		TickBitmapFlipTick_Helper(int32(84), tickSpacing)
		TickBitmapFlipTick_Helper(int32(139), tickSpacing)
		TickBitmapFlipTick_Helper(int32(240), tickSpacing)
		TickBitmapFlipTick_Helper(int32(535), tickSpacing)

		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(508), tickSpacing, false)
		uassert.Equal(t, next, int32(511))
		uassert.Equal(t, initialized, false)
	})
}

func TestTickNextInitializedTickWithinOneWordSkipEntire(t *testing.T) {
	t.Run("skips entire word", func(t *testing.T) {
		BeforeEachTest(t)
		TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
		TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
		TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
		TickBitmapFlipTick_Helper(int32(70), tickSpacing)
		TickBitmapFlipTick_Helper(int32(78), tickSpacing)
		TickBitmapFlipTick_Helper(int32(84), tickSpacing)
		TickBitmapFlipTick_Helper(int32(139), tickSpacing)
		TickBitmapFlipTick_Helper(int32(240), tickSpacing)
		TickBitmapFlipTick_Helper(int32(535), tickSpacing)

		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(255), tickSpacing, false)
		uassert.Equal(t, next, int32(511))
		uassert.Equal(t, initialized, false)
	})
}

func TestTickNextInitializedTickWithinOneWordHalfWayEmptyWord(t *testing.T) {
	t.Run("halfway through empty word", func(t *testing.T) {
		BeforeEachTest(t)

		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(900), tickSpacing, true)
		uassert.Equal(t, next, int32(768))
		uassert.Equal(t, initialized, false)
	})
}

// HELPERs
var (
	tickBitmaps map[int16]*u256.Uint = make(map[int16]*u256.Uint)
)

// tickBitmapPosition calculates the word and bit position for a given tick
func TickBitmapPosition_Helper(tick int32) (int16, uint8) {
	wordPos := int16(tick >> 8) // tick / 256
	bitPos := uint8(tick % 256)

	return wordPos, bitPos
}

// tickBitmapFlipTick flips tthe bit corresponding to the given tick
// in the pool's tick bitmap.
//
// Panics:
//   - If tick % tickSpacing != 0
func TickBitmapFlipTick_Helper(
	tick int32,
	tickSpacing int32,
) {
	if tick%tickSpacing != 0 {
		panic(ufmt.Sprintf("[POOL] tick_bitmap.gno__tickBitmapFlipTick() || tick(%d) MOD tickSpacing(%d) != 0(%d)", tick, tickSpacing, tick%tickSpacing))
	}

	wordPos, bitPos := TickBitmapPosition_Helper(tick / tickSpacing)

	// 1 << bitPos
	mask := new(u256.Uint).Lsh(u256.NewUint(1), uint(bitPos))

	tickBitmaps[wordPos] = tickBitmaps[wordPos].NilToZero()
	tickBitmaps[wordPos] = new(u256.Uint).Xor(tickBitmaps[wordPos], mask)
}

// tickBitmapNextInitializedTickWithInOneWord finds the next initialized tick within
// one word of the bitmap.
func TickBitmapNextInitializedTickWithInOneWord_Helper(
	tick int32,
	tickSpacing int32,
	lte bool,
) (int32, bool) {
	compress := tick / tickSpacing

	if tick < 0 && tick%tickSpacing != 0 {
		compress--
	}

	if lte {

		wordPos, bitPos := TickBitmapPosition_Helper(compress)

		// mask := (1 << bitPos) - 1 + (1 << bitPos)
		shift1LeftByBitPos := new(u256.Uint).Lsh(u256.NewUint(1), uint(bitPos))

		mask := shift1LeftByBitPos.Clone()
		mask = new(u256.Uint).Sub(mask, u256.NewUint(1))

		mask = new(u256.Uint).Add(mask, shift1LeftByBitPos.Clone())

		tickBitmaps[wordPos] = tickBitmaps[wordPos].NilToZero()

		masked := new(u256.Uint).And(tickBitmaps[wordPos], mask)

		initialized := !(masked.IsZero())

		if initialized {
			next := compress - int32(bitPos-plp.BitMathMostSignificantBit(masked))*tickSpacing
			return next, initialized
		}

		next := (compress - int32(bitPos)) * tickSpacing
		return next, initialized

	}

	wordPos, bitPos := TickBitmapPosition_Helper(compress + 1)

	shift1LeftByBitPos := new(u256.Uint).Lsh(u256.NewUint(1), uint(bitPos))
	_mask := shift1LeftByBitPos.Clone()
	_mask = new(u256.Uint).Sub(_mask, u256.NewUint(1))
	mask := BitwiseNotForUint256BitmapIndexing_Helper(_mask)

	tickBitmaps[wordPos] = tickBitmaps[wordPos].NilToZero()
	masked := new(u256.Uint).And(tickBitmaps[wordPos], mask)

	initialized := !(masked.IsZero())
	if initialized {
		next := (compress + 1 + int32(plp.BitMathLeastSignificantBit(masked)-bitPos)) * tickSpacing
		return next, initialized
	}
	next := (compress + 1 + int32(255-bitPos)) * tickSpacing
	return next, initialized
}

// bitwiseNotForUint256BitmapIndexing performs a bitwise NsOT operation on the uint256 value.
// This function is designed for use in bitmap indexing
func BitwiseNotForUint256BitmapIndexing_Helper(x *u256.Uint) *u256.Uint {
	// REF: https://stackoverflow.com/a/77071037

	// Create a mask with all bits set to 1
	mask := u256.MustFromDecimal(consts.MAX_UINT256)
	// mask = new(u256.Uint).Sub(mask, u256.NewUint(1))

	// XOR with mask to perform bitwise NOT
	// result := x ^ mask

	result := new(u256.Uint).Xor(x, mask)
	return result
}

func InitializeTickBitmaps_Helper() {
	tickBitmaps = make(map[int16]*u256.Uint)
}

func GetTickBitmaps_Helper() map[int16]*u256.Uint {
	return tickBitmaps
}

func IsInitialized_Helper(tick int32, ts int32) (int32, bool) {
	nextTick, init := TickBitmapNextInitializedTickWithInOneWord_Helper(tick, ts, true)
	if nextTick == tick {
		return nextTick, init
	}
	return nextTick, false
}
