package pool

import (
	"std"
	"testing"

	"gno.land/p/demo/uassert"
	i256 "gno.land/p/gnoswap/int256"
	u256 "gno.land/p/gnoswap/uint256"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/foo"

	"gno.land/p/gnoswap/consts"

	"gno.land/r/gnoswap/v1/gns"
	pl "gno.land/r/gnoswap/v1/pool"
)

var (
	test_tickLower                      = int32(9000)
	test_tickUpper                      = int32(11000)
	test_liquidityExpectStr             = "100000000"
	user1Addr               std.Address = "g1ecely4gjy0yl6s9kt409ll330q9hk2lj9ls3ec"
	minTick                             = int32(-887220)
	maxTick                             = int32(887220)
)

func init() {
	std.TestSkipHeights(100)
}

func AfterTest(t *testing.T) {
	poolRealm := std.NewUserRealm(poolAddr)
	std.TestSetRealm(poolRealm)
	barBal := bar.BalanceOf(poolAddr)
	fooBal := foo.BalanceOf(poolAddr)
	bar.Transfer(adminAddr, barBal)
	foo.Transfer(adminAddr, fooBal)
	pools.Remove("gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000")
}

func TestSuccess_case_init_balance(t *testing.T) {
	// ================================ Pool Setup ================================================
	std.TestSetRealm(adminRealm)

	gns.Approve(poolAddr, poolCreationFee)

	token0Path := "gno.land/r/onbloc/foo"

	foo.Approve(poolAddr, consts.UINT64_MAX)
	bar.Approve(poolAddr, consts.UINT64_MAX)
	pl.CreatePool(barPath, token0Path, 3000, "25054144837504793118641380156") // encodePriceSqrt(1, 10)
	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000"

	std.TestSetRealm(posRealm)
	pl.Mint(token0Path, barPath, 3000, "g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d", minTick, maxTick, "3161", adminAddr)

	// ===================== initial balance ========================

	barBalance := bar.BalanceOf(poolAddr)
	fooBalance := foo.BalanceOf(poolAddr)

	uassert.Equal(t, barBalance, uint64(9996))
	uassert.Equal(t, fooBalance, uint64(1000))

	AfterTest(t)
}

func TestSuccess_case_init_tick(t *testing.T) {
	// ================================ Pool Setup ================================================
	std.TestSetRealm(adminRealm)

	gns.Approve(poolAddr, poolCreationFee)

	token0Path := "gno.land/r/onbloc/foo"

	foo.Approve(poolAddr, consts.UINT64_MAX)
	bar.Approve(poolAddr, consts.UINT64_MAX)
	pl.CreatePool(barPath, token0Path, 3000, "25054144837504793118641380156") // encodePriceSqrt(1, 10)
	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000"

	std.TestSetRealm(posRealm)
	pl.Mint(token0Path, barPath, 3000, "g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d", minTick, maxTick, "3161", adminAddr)

	// ===================== initial tick ========================

	slot := pl.PoolGetSlot0Tick(poolPath)

	uassert.Equal(t, slot, int32(-23028))

	AfterTest(t)
}

func TestSuccess_case_transfer_token0_only(t *testing.T) {
	// ================================ Pool Setup ================================================
	std.TestSetRealm(adminRealm)

	gns.Approve(poolAddr, poolCreationFee)

	token0Path := "gno.land/r/onbloc/foo"

	foo.Approve(poolAddr, consts.UINT64_MAX)
	bar.Approve(poolAddr, consts.UINT64_MAX)
	pl.CreatePool(barPath, token0Path, 3000, "25054144837504793118641380156") // encodePriceSqrt(1, 10)
	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000"

	std.TestSetRealm(posRealm)
	pl.Mint(token0Path, barPath, 3000, "g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d", minTick, maxTick, "3161", adminAddr)

	// ===================== transfer token0 only ========================

	std.TestSetRealm(posRealm)
	pl.Mint(token0Path, barPath, 3000, "g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d", -22980, 0, "10000", adminAddr)

	barBalance := bar.BalanceOf(poolAddr)
	fooBalance := foo.BalanceOf(poolAddr)
	uassert.Equal(t, fooBalance, uint64(1000))
	uassert.Equal(t, barBalance, uint64(9996+21549))

	AfterTest(t)
}

func TestSuccess_case_max_tick_with_max_leverage(t *testing.T) {
	// ================================ Pool Setup ================================================
	std.TestSetRealm(adminRealm)

	gns.Approve(poolAddr, poolCreationFee)

	token0Path := "gno.land/r/onbloc/foo"

	foo.Approve(poolAddr, consts.UINT64_MAX)
	bar.Approve(poolAddr, consts.UINT64_MAX)
	pl.CreatePool(barPath, token0Path, 3000, "25054144837504793118641380156") // encodePriceSqrt(1, 10)
	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000"

	std.TestSetRealm(posRealm)
	pl.Mint(token0Path, barPath, 3000, "g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d", minTick, maxTick, "3161", adminAddr)

	// ===================== max tick with max leverage ========================

	pool := GetPool(token0Path, barPath, 3000)
	tickSpacing := pool.tickSpacing

	std.TestSetRealm(posRealm)
	pl.Mint(token0Path, barPath, 3000, "g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d", maxTick-tickSpacing, maxTick, "5070602400912917605986812821504", adminAddr) // 2**102

	barBalance := bar.BalanceOf(poolAddr)
	fooBalance := foo.BalanceOf(poolAddr)
	uassert.Equal(t, fooBalance, uint64(1000))
	uassert.Equal(t, barBalance, uint64(9996+828011525))

	AfterTest(t)
}

func TestSuccess_case_work_for_max_tick(t *testing.T) {
	// ================================ Pool Setup ================================================
	std.TestSetRealm(adminRealm)

	gns.Approve(poolAddr, poolCreationFee)

	token0Path := "gno.land/r/onbloc/foo"

	foo.Approve(poolAddr, consts.UINT64_MAX)
	bar.Approve(poolAddr, consts.UINT64_MAX)
	pl.CreatePool(barPath, token0Path, 3000, "25054144837504793118641380156") // encodePriceSqrt(1, 10)
	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000"

	std.TestSetRealm(posRealm)
	pl.Mint(token0Path, barPath, 3000, "g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d", minTick, maxTick, "3161", adminAddr)

	// ===================== work for max tick ========================

	pool := GetPool(token0Path, barPath, 3000)
	tickSpacing := pool.tickSpacing

	std.TestSetRealm(posRealm)
	pl.Mint(token0Path, barPath, 3000, "g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d", -22980, maxTick, "10000", adminAddr)

	barBalance := bar.BalanceOf(poolAddr)
	fooBalance := foo.BalanceOf(poolAddr)
	uassert.Equal(t, fooBalance, uint64(1000))
	uassert.Equal(t, barBalance, uint64(9996+31549))

	AfterTest(t)
}

func TestSuccess_case_removing_works(t *testing.T) {
	// ================================ Pool Setup ================================================
	std.TestSetRealm(adminRealm)

	gns.Approve(poolAddr, poolCreationFee)

	token0Path := "gno.land/r/onbloc/foo"

	foo.Approve(poolAddr, consts.UINT64_MAX)
	bar.Approve(poolAddr, consts.UINT64_MAX)
	pl.CreatePool(barPath, token0Path, 3000, "25054144837504793118641380156") // encodePriceSqrt(1, 10)
	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000"

	std.TestSetRealm(posRealm)
	pl.Mint(token0Path, barPath, 3000, "g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d", minTick, maxTick, "3161", adminAddr)

	// ===================== removing works ========================

	pool := GetPool(token0Path, barPath, 3000)
	tickSpacing := pool.tickSpacing

	std.TestSetRealm(posRealm)
	pl.Mint(token0Path, barPath, 3000, "g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d", -240, 0, "10000", adminAddr)

	uassert.PanicsWithMessage(
		t,
		`[GNOSWAP-POOL-009] invalid liquidity calculated || Condition failed: (z must be < x) (x: 0, y: -10000, z:115792089237316195423570985008687907853269984665640564039457584007913129629936)`,
		func() {
			pl.Burn(token0Path, barPath, 3000, -240, 0, "10000") // LS panic
		},
	)

	AfterTest(t)
}

func TestSuccess_case_adds_liquidity_to_liquidityGross(t *testing.T) {
	// ================================ Pool Setup ================================================
	std.TestSetRealm(adminRealm)

	gns.Approve(poolAddr, poolCreationFee)

	token0Path := "gno.land/r/onbloc/foo"

	foo.Approve(poolAddr, consts.UINT64_MAX)
	bar.Approve(poolAddr, consts.UINT64_MAX)
	pl.CreatePool(barPath, token0Path, 3000, "25054144837504793118641380156") // encodePriceSqrt(1, 10)
	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000"

	std.TestSetRealm(posRealm)
	pl.Mint(token0Path, barPath, 3000, "g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d", minTick, maxTick, "3161", adminAddr)

	// ===================== adds liquidity to liquiditygross ========================

	pool := GetPool(token0Path, barPath, 3000)
	tickSpacing := pool.tickSpacing

	std.TestSetRealm(posRealm)
	pl.Mint(token0Path, barPath, 3000, "g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d", -240, 0, "100", adminAddr)
	_, _, liquidityGross, _, _, _, _, _ := pool.GetTicks(-240)
	uassert.Equal(t, liquidityGross.ToString(), "100")
	_, _, liquidityGross, _, _, _, _, _ = pool.GetTicks(0)
	uassert.Equal(t, liquidityGross.ToString(), "100")
	_, _, liquidityGross, _, _, _, _, _ = pool.GetTicks(tickSpacing)
	uassert.Equal(t, liquidityGross.ToString(), "0")
	_, _, liquidityGross, _, _, _, _, _ = pool.GetTicks(tickSpacing * 2)
	uassert.Equal(t, liquidityGross.ToString(), "0")

	std.TestSetRealm(posRealm)
	pl.Mint(token0Path, barPath, 3000, "g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d", -240, tickSpacing, "150", adminAddr)
	_, _, liquidityGross, _, _, _, _, _ = pool.GetTicks(-240)
	uassert.Equal(t, liquidityGross.ToString(), "250")
	_, _, liquidityGross, _, _, _, _, _ = pool.GetTicks(0)
	uassert.Equal(t, liquidityGross.ToString(), "100")
	_, _, liquidityGross, _, _, _, _, _ = pool.GetTicks(tickSpacing)
	uassert.Equal(t, liquidityGross.ToString(), "150")
	_, _, liquidityGross, _, _, _, _, _ = pool.GetTicks(tickSpacing * 2)
	uassert.Equal(t, liquidityGross.ToString(), "0")

	std.TestSetRealm(posRealm)
	pl.Mint(token0Path, barPath, 3000, "g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d", 0, tickSpacing*2, "60", adminAddr)
	_, _, liquidityGross, _, _, _, _, _ = pool.GetTicks(-240)
	uassert.Equal(t, liquidityGross.ToString(), "250")
	_, _, liquidityGross, _, _, _, _, _ = pool.GetTicks(0)
	uassert.Equal(t, liquidityGross.ToString(), "160")
	_, _, liquidityGross, _, _, _, _, _ = pool.GetTicks(tickSpacing)
	uassert.Equal(t, liquidityGross.ToString(), "150")
	_, _, liquidityGross, _, _, _, _, _ = pool.GetTicks(tickSpacing * 2)
	uassert.Equal(t, liquidityGross.ToString(), "60")

	AfterTest(t)
}

func TestSuccess_case_removes_liquidity_from_liquidityGross(t *testing.T) {
	// ================================ Pool Setup ================================================
	std.TestSetRealm(adminRealm)

	gns.Approve(poolAddr, poolCreationFee)
	pl.CreatePool(barPath, fooPath, 3000, "25054144837504793118641380156") // encodePriceSqrt(1, 10)
	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000"

	foo.Approve(poolAddr, consts.UINT64_MAX)
	bar.Approve(poolAddr, consts.UINT64_MAX)

	std.TestSetRealm(posRealm)
	mint0, mint1 := pl.Mint(barPath, fooPath, 3000, positionAddr, minTick, maxTick, "3161", adminAddr)

	// ===================== removes liquidity from liquidityGross ========================
	pool := GetPool(barPath, fooPath, 3000)
	tickSpacing := pool.tickSpacing

	std.TestSetRealm(posRealm)
	mint0, mint1 = pl.Mint(barPath, fooPath, 3000, positionAddr, -240, 0, "100", adminAddr)

	std.TestSetRealm(posRealm)
	mint0, mint1 = pl.Mint(barPath, fooPath, 3000, positionAddr, -240, 0, "40", adminAddr)

	pl.Burn(barPath, fooPath, 3000, -240, 0, "90")

	_, _, liquidityGross, _, _, _, _, _ := pool.GetTicks(-240)
	uassert.Equal(t, liquidityGross.ToString(), "50")

	_, _, liquidityGross, _, _, _, _, _ = pool.GetTicks(0)
	uassert.Equal(t, liquidityGross.ToString(), "50")
}

func gnsBalance(addr std.Address) uint64 {
	return gns.BalanceOf(addr)
}

func (pool *Pool) GetTicks(
	tick int32,
) (feeGrowthOutside0X128 *u256.Uint, feeGrowthOutside1X128 *u256.Uint, liquidityGross *u256.Uint, liquidityNet *i256.Int, secondsPerLiquidityOutsideX128 *u256.Uint, tickCumulativeOutside int64, secondsOutside uint32, initialized bool) {
	info := pool.getTick(tick)

	return info.feeGrowthOutside0X128, info.feeGrowthOutside1X128, info.liquidityGross, info.liquidityNet, info.secondsPerLiquidityOutsideX128, info.tickCumulativeOutside, info.secondsOutside, info.initialized
}
