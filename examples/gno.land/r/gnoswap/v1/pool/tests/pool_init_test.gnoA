package pool

import (
	"std"
	"testing"

	"gno.land/p/demo/uassert"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/foo"

	"gno.land/p/gnoswap/consts"
	"gno.land/r/gnoswap/v1/common"

	"gno.land/r/gnoswap/v1/gns"
)

var (
	test_tickLower          = int32(-6000)
	test_tickUpper          = int32(6000)
	test_liquidityExpectStr = "1000"
)

func TestMintPostInit(t *testing.T) {
	std.TestSetRealm(adminRealm)
	gns.Approve(poolAddr, poolCreationFee)
	CreatePool(barPath, fooPath, fee500, common.TickMathGetSqrtRatioAtTick(-1).ToString())

	foo.Approve(poolAddr, consts.UINT64_MAX)
	bar.Approve(poolAddr, consts.UINT64_MAX)

	thisPool := GetPool(barPath, fooPath, fee500)

	t.Run("returns in supply in range", func(t *testing.T) {
		std.TestSetRealm(posRealm)
		Mint(
			barPath,
			fooPath,
			fee500,
			positionAddr,
			-1000,
			1000,
			test_liquidityExpectStr,
			adminAddr,
		)
	})
	currentLiq := thisPool.liquidity.ToString()

	t.Run("excludes supply at tick above current tick", func(t *testing.T) {
		std.TestSetRealm(posRealm)
		Mint(
			barPath,
			fooPath,
			fee500,
			positionAddr,
			-2000,
			-1000,
			test_liquidityExpectStr,
			adminAddr,
		)

		nowLiq := thisPool.liquidity.ToString()
		uassert.Equal(t, currentLiq, nowLiq)
	})

	t.Run("excludes supply at tick below current tick", func(t *testing.T) {
		std.TestSetRealm(posRealm)
		Mint(
			barPath,
			fooPath,
			fee500,
			positionAddr,
			1000,
			2000,
			test_liquidityExpectStr,
			adminAddr,
		)

		nowLiq := thisPool.liquidity.ToString()
		uassert.Equal(t, currentLiq, nowLiq)
	})

	t.Run("updates correctly when exiting range", func(t *testing.T) {
		beforeLiq := thisPool.liquidity.ToString()

		std.TestSetRealm(posRealm)
		Mint(
			barPath,
			fooPath,
			fee500,
			positionAddr,
			0,
			10,
			test_liquidityExpectStr,
			adminAddr,
		)
		nowLiq := thisPool.liquidity.ToString()

		std.TestSetRealm(rouRealm)
		Swap(
			barPath,
			fooPath,
			fee500,
			adminAddr,
			true,
			"1",
			consts.MIN_PRICE,
			adminAddr,
		)

		poolTick := thisPool.slot0.tick
		uassert.Equal(t, poolTick, int32(-1))
	})

	t.Run("updates correctly when entering range", func(t *testing.T) {
		beforeLiq := thisPool.liquidity.ToString()

		std.TestSetRealm(posRealm)
		Mint(
			barPath,
			fooPath,
			fee500,
			positionAddr,
			-10,
			0,
			test_liquidityExpectStr,
			adminAddr,
		)
		nowLiq := thisPool.liquidity.ToString()

		std.TestSetRealm(rouRealm)
		Swap(
			barPath,
			fooPath,
			fee500,
			adminAddr,
			true,
			"1",
			consts.MIN_PRICE,
			adminAddr,
		)

		poolTick := thisPool.slot0.tick
		uassert.Equal(t, poolTick, int32(-1))
	})
}
