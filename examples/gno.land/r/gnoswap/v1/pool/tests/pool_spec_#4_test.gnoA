package pool

import (
	"std"
	"testing"

	"gno.land/p/demo/uassert"
	i256 "gno.land/p/gnoswap/int256"
	u256 "gno.land/p/gnoswap/uint256"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/foo"

	"gno.land/p/gnoswap/consts"
	"gno.land/r/gnoswap/v1/gns"
	pl "gno.land/r/gnoswap/v1/pool"
)

var (
	test_tickLower                      = int32(9000)
	test_tickUpper                      = int32(11000)
	test_liquidityExpectStr             = "100000000"
	user1Addr               std.Address = "g1ecely4gjy0yl6s9kt409ll330q9hk2lj9ls3ec"
	minTick                             = int32(-887220)
	maxTick                             = int32(887220)
)

func init() {
	std.TestSkipHeights(100)
}

func AfterTest(t *testing.T) {
	poolRealm := std.NewUserRealm(consts.POOL_ADDR)
	std.TestSetRealm(poolRealm)
	barBal := bar.BalanceOf(consts.POOL_ADDR)
	fooBal := foo.BalanceOf(consts.POOL_ADDR)
	bar.Transfer(adminAddr, barBal)
	foo.Transfer(adminAddr, fooBal)
	pools.Remove("gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000")
}

func TestSuccess_price_within_range_transfers_current_price_of_both_tokens(t *testing.T) {
	// ================================ Pool Setup ================================================
	std.TestSetRealm(adminRealm)

	gns.Approve(consts.POOL_ADDR, poolCreationFee)

	token0Path := "gno.land/r/onbloc/foo"

	foo.Approve(consts.POOL_ADDR, consts.UINT64_MAX)
	bar.Approve(consts.POOL_ADDR, consts.UINT64_MAX)
	pl.CreatePool(barPath, token0Path, 3000, "25054144837504793118641380156") // encodePriceSqrt(1, 10)
	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000"

	std.TestSetRealm(posRealm)
	pl.Mint(token0Path, barPath, 3000, consts.POSITION_ADDR, minTick, maxTick, "3161", adminAddr)

	// ===================== price within range: transfers current price of both tokens =====================
	pool := GetPool(token0Path, barPath, 3000)
	tickSpacing := pool.tickSpacing

	std.TestSetRealm(posRealm)
	pl.Mint(token0Path, barPath, 3000, consts.POSITION_ADDR, minTick+tickSpacing, maxTick-tickSpacing, "100", adminAddr)

	barBalance := bar.BalanceOf(consts.POOL_ADDR)
	fooBalance := foo.BalanceOf(consts.POOL_ADDR)

	uassert.Equal(t, barBalance, uint64(9996+317))
	uassert.Equal(t, fooBalance, uint64(1000+32))
}

func TestSuccess_initializes_lower_tick(t *testing.T) {
	// ================================ Pool Setup ================================================
	std.TestSetRealm(adminRealm)

	gns.Approve(consts.POOL_ADDR, poolCreationFee)

	token0Path := "gno.land/r/onbloc/foo"

	// ===================== initializes lower tick =====================
	pool := GetPool(token0Path, barPath, 3000)
	tickSpacing := pool.tickSpacing
	feeGrowthOutside0X128, feeGrowthOutside1X128, liquidityGross, _, _, _, _, _ := pool.GetTicks(minTick + tickSpacing)
	uassert.Equal(t, liquidityGross.ToString(), "100")
}

func TestSuccess_initializes_upper_tick(t *testing.T) {
	// ================================ Pool Setup ================================================
	std.TestSetRealm(adminRealm)

	gns.Approve(consts.POOL_ADDR, poolCreationFee)

	token0Path := "gno.land/r/onbloc/foo"

	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000"

	// ===================== initializes upper tick =====================
	pool := GetPool(token0Path, barPath, 3000)
	tickSpacing := pool.tickSpacing

	feeGrowthOutside0X128, feeGrowthOutside1X128, liquidityGross, _, _, _, _, _ := pool.GetTicks(maxTick - tickSpacing)
	uassert.Equal(t, liquidityGross.ToString(), "100")
	AfterTest(t)
}

func TestSuccess_works_for_min_max_tick(t *testing.T) {
	// ================================ Pool Setup ================================================
	std.TestSetRealm(adminRealm)

	gns.Approve(consts.POOL_ADDR, poolCreationFee)

	token0Path := "gno.land/r/onbloc/foo"

	foo.Approve(consts.POOL_ADDR, consts.UINT64_MAX)
	bar.Approve(consts.POOL_ADDR, consts.UINT64_MAX)
	pl.CreatePool(barPath, token0Path, 3000, "25054144837504793118641380156") // encodePriceSqrt(1, 10)
	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000"

	std.TestSetRealm(posRealm)
	pl.Mint(token0Path, barPath, 3000, "g1ecely4gjy0yl6s9kt409ll330q9hk2lj9ls3ec", minTick, maxTick, "3161", adminAddr)

	// ===================== only clears the tick that is not used at all =====================

	pool := GetPool(token0Path, barPath, 3000)
	tickSpacing := pool.tickSpacing

	pl.Mint(token0Path, barPath, 3000, consts.POSITION_ADDR, minTick, maxTick, "10000", adminAddr)

	barBalance := bar.BalanceOf(consts.POOL_ADDR)
	fooBalance := foo.BalanceOf(consts.POOL_ADDR)

	uassert.Equal(t, barBalance, uint64(9996+31623))
	uassert.Equal(t, fooBalance, uint64(1000+3163))
	AfterTest(t)
}

func TestSuccess_removing_works(t *testing.T) {
	// ================================ Pool Setup ================================================
	std.TestSetRealm(adminRealm)

	gns.Approve(consts.POOL_ADDR, poolCreationFee)

	token0Path := "gno.land/r/onbloc/foo"

	foo.Approve(consts.POOL_ADDR, consts.UINT64_MAX)
	bar.Approve(consts.POOL_ADDR, consts.UINT64_MAX)
	pl.CreatePool(barPath, token0Path, 3000, "25054144837504793118641380156") // encodePriceSqrt(1, 10)
	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000"

	std.TestSetRealm(posRealm)
	pl.Mint(token0Path, barPath, 3000, "g1ecely4gjy0yl6s9kt409ll330q9hk2lj9ls3ec", minTick, maxTick, "3161", adminAddr)

	// ===================== only clears the tick that is not used at all =====================

	pool := GetPool(token0Path, barPath, 3000)
	tickSpacing := pool.tickSpacing

	std.TestSetRealm(posRealm)
	pl.Mint(token0Path, barPath, 3000, consts.POSITION_ADDR, minTick+tickSpacing, maxTick-tickSpacing, "10000", adminAddr)
	pl.Burn(token0Path, barPath, 3000, minTick+tickSpacing, maxTick-tickSpacing, "100")

	amount0, amount1 := pl.Collect(token0Path, barPath, 3000, consts.POSITION_ADDR, minTick+tickSpacing, maxTick-tickSpacing, consts.MAX_UINT128, consts.MAX_UINT128)

	uassert.Equal(t, amount0, "316")
	uassert.Equal(t, amount1, "31")
}

func gnsBalance(addr std.Address) uint64 {
	return gns.BalanceOf(addr)
}

func (pool *Pool) GetTicks(
	tick int32,
) (feeGrowthOutside0X128 *u256.Uint, feeGrowthOutside1X128 *u256.Uint, liquidityGross *u256.Uint, liquidityNet *i256.Int, secondsPerLiquidityOutsideX128 *u256.Uint, tickCumulativeOutside int64, secondsOutside uint32, initialized bool) {
	info := pool.getTick(tick)

	return info.feeGrowthOutside0X128, info.feeGrowthOutside1X128, info.liquidityGross, info.liquidityNet, info.secondsPerLiquidityOutsideX128, info.tickCumulativeOutside, info.secondsOutside, info.initialized
}
