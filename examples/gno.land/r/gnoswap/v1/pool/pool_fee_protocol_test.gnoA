package pool

import (
	"std"
	"testing"

	"gno.land/p/demo/uassert"

	"gno.land/r/gnoswap/v1/common"
)

func TestProtocolFee(t *testing.T) {
	t.Run("initial fee is 0", func(t *testing.T) {
		uassert.Equal(t, slot0FeeProtocol, uint8(0))
	})

	t.Run("create first pool", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		SetPoolCreationFeeByAdmin(0)

		t.Run("create pool", func(t *testing.T) {
			CreatePool(barPath, fooPath, 3000, common.TickMathGetSqrtRatioAtTick(0).ToString())
			uassert.Equal(t, slot0FeeProtocol, uint8(0))
		})

		t.Run("get protocol fee", func(t *testing.T) {
			pool := GetPool(barPath, fooPath, 3000)
			uassert.Equal(t, pool.slot0.feeProtocol, uint8(0))
		})
	})

	t.Run("set fee protocol", func(t *testing.T) {
		t.Run("fails if fee is lt 4 or gt 10", func(t *testing.T) {
			uassert.PanicsWithMessage(
				t,
				`[GNOSWAP-POOL-016] invalid protocol fee percentage || expected (feeProtocol0(3) == 0 || (feeProtocol0(3) >= 4 && feeProtocol0(3) <= 10)) && (feeProtocol1(3) == 0 || (feeProtocol1(3) >= 4 && feeProtocol1(3) <= 10))`,
				func() { setFeeProtocol(3, 3) },
			)

			uassert.PanicsWithMessage(
				t,
				`[GNOSWAP-POOL-016] invalid protocol fee percentage || expected (feeProtocol0(6) == 0 || (feeProtocol0(6) >= 4 && feeProtocol0(6) <= 10)) && (feeProtocol1(3) == 0 || (feeProtocol1(3) >= 4 && feeProtocol1(3) <= 10))`,
				func() { setFeeProtocol(6, 3) },
			)

			uassert.PanicsWithMessage(
				t,
				`[GNOSWAP-POOL-016] invalid protocol fee percentage || expected (feeProtocol0(3) == 0 || (feeProtocol0(3) >= 4 && feeProtocol0(3) <= 10)) && (feeProtocol1(6) == 0 || (feeProtocol1(6) >= 4 && feeProtocol1(6) <= 10))`,
				func() { setFeeProtocol(3, 6) },
			)

			uassert.PanicsWithMessage(
				t,
				`[GNOSWAP-POOL-016] invalid protocol fee percentage || expected (feeProtocol0(11) == 0 || (feeProtocol0(11) >= 4 && feeProtocol0(11) <= 10)) && (feeProtocol1(11) == 0 || (feeProtocol1(11) >= 4 && feeProtocol1(11) <= 10))`,
				func() { setFeeProtocol(11, 11) },
			)

			uassert.PanicsWithMessage(
				t,
				`[GNOSWAP-POOL-016] invalid protocol fee percentage || expected (feeProtocol0(6) == 0 || (feeProtocol0(6) >= 4 && feeProtocol0(6) <= 10)) && (feeProtocol1(11) == 0 || (feeProtocol1(11) >= 4 && feeProtocol1(11) <= 10))`,
				func() { setFeeProtocol(6, 11) },
			)

			uassert.PanicsWithMessage(
				t,
				`[GNOSWAP-POOL-016] invalid protocol fee percentage || expected (feeProtocol0(11) == 0 || (feeProtocol0(11) >= 4 && feeProtocol0(11) <= 10)) && (feeProtocol1(6) == 0 || (feeProtocol1(6) >= 4 && feeProtocol1(6) <= 10))`,
				func() { setFeeProtocol(11, 6) },
			)
		})
	})

	t.Run("set fee to 170", func(t *testing.T) {
		setFeeProtocol(10, 10)
		// 10 + (10 << 4) = 170
		uassert.Equal(t, slot0FeeProtocol, uint8(170))
	})

	t.Run("check if previous pool's protocol fee is updated", func(t *testing.T) {
		pool := GetPool(barPath, fooPath, 3000)
		uassert.Equal(t, pool.slot0.feeProtocol, uint8(170))
	})

	t.Run("create second pool", func(t *testing.T) {
		CreatePool(barPath, fooPath, 500, common.TickMathGetSqrtRatioAtTick(0).ToString())
		pool := GetPool(barPath, fooPath, 500)
		uassert.Equal(t, pool.slot0.feeProtocol, uint8(170))
	})
}
