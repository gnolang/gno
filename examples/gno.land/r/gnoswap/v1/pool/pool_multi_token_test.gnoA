package pool

import (
	"std"
	"strconv"
	"testing"

	"gno.land/p/demo/uassert"

	"gno.land/p/gnoswap/consts"
	"gno.land/r/gnoswap/v1/common"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/baz"
	"gno.land/r/onbloc/foo"

	"gno.land/r/gnoswap/v1/gns"

	u256 "gno.land/p/gnoswap/uint256"
)

var (
	test_tickLower          = int32(9000)
	test_tickUpper          = int32(11000)
	test_liquidityExpectStr = "100000000"
	test_liquidityExpect256 = u256.NewUint(100_000_000)
)

// Create Foo:Bar Pool
func TestCreateFooBarPool(t *testing.T) {
	// call gns faucet to get creation fee
	std.TestSetRealm(adminRealm)

	gns.Approve(poolAddr, poolCreationFee)

	CreatePool(barPath, fooPath, fee500, common.TickMathGetSqrtRatioAtTick(-10000).ToString()) // tick -10000
	uassert.Equal(t, pools.Size(), 1)
}

// Create Bar:Baz Pool
func TestCreateBarBazPool(t *testing.T) {
	// call gns faucet to get creation fee
	std.TestSetRealm(adminRealm)

	gns.Approve(poolAddr, poolCreationFee)

	CreatePool(barPath, bazPath, fee500, "130621891405341611593710811006")
	uassert.Equal(t, pools.Size(), 2)
}

// Mint Foo:Bar Liquidity by admin
func TestMintFooBarLiquidity(t *testing.T) {
	std.TestSetRealm(adminRealm)
	foo.Approve(poolAddr, consts.UINT64_MAX)
	bar.Approve(poolAddr, consts.UINT64_MAX)

	std.TestSetRealm(posRealm)
	amount0, amount1 := Mint(
		fooPath,
		barPath,
		fee500,
		positionAddr,
		-test_tickUpper,
		-test_tickLower,
		test_liquidityExpectStr,
		adminAddr,
	)
	uassert.Equal(t, amount0, "8040316")
	uassert.Equal(t, amount1, "2958015")
}

// Mint Bar:Baz Liquidity by admin
func TestMintBarBazLiquidity(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(poolAddr, consts.UINT64_MAX)
	baz.Approve(poolAddr, consts.UINT64_MAX)

	std.TestSetRealm(posRealm)
	amount0, amount1 := Mint(
		barPath,
		bazPath,
		fee500,
		positionAddr,
		test_tickLower,
		test_tickUpper,
		test_liquidityExpectStr,
		adminAddr,
	)
	uassert.Equal(t, amount0, "2958015")
	uassert.Equal(t, amount1, "8040316")
}

// Swap Foo:Bar Foo > Bar by admin
func TestSwapFooBarFooToBar(t *testing.T) {
	oldTest1Bar := barToken.BalanceOf(adminAddr)
	oldTest1Foo := fooToken.BalanceOf(adminAddr)

	oldPoolBar := barToken.BalanceOf(poolAddr)
	oldPoolFoo := fooToken.BalanceOf(poolAddr)

	std.TestSetRealm(adminRealm)
	bar.Approve(poolAddr, 16000)

	std.TestSetRealm(rouRealm)
	poolIn, poolOut := Swap(
		barPath,
		fooPath,
		fee500,
		adminAddr,
		true,
		"16000",
		consts.MIN_PRICE,
		adminAddr,
	)
	uassert.Equal(t, poolIn, "16000")
	uassert.Equal(t, poolOut, "-5882")

	newTest1Bar := barToken.BalanceOf(adminAddr)
	newTest1Foo := fooToken.BalanceOf(adminAddr)

	newPoolBar := barToken.BalanceOf(poolAddr)
	newPoolFoo := fooToken.BalanceOf(poolAddr)

	uassert.Equal(t, oldTest1Bar-newTest1Bar, uint64(16000))
	uassert.Equal(t, newTest1Foo-oldTest1Foo, uint64(5882))

	uassert.Equal(t, newPoolBar-oldPoolBar, uint64(16000))
	uassert.Equal(t, oldPoolFoo-newPoolFoo, uint64(5882))
}

// Swap Bar:Baz Bar > Baz by admin
func TestSwapBarBazBarToBaz(t *testing.T) {
	oldTest1Token0Balance := barToken.BalanceOf(adminAddr)
	oldadminBazBalance := bazToken.BalanceOf(adminAddr)
	oldPoolToken0Balance := barToken.BalanceOf(poolAddr)
	oldPoolBazBalance := bazToken.BalanceOf(poolAddr)

	std.TestSetRealm(adminRealm)
	bar.Approve(poolAddr, 16000)

	std.TestSetRealm(rouRealm)
	poolIn, poolOut := Swap(
		barPath,
		bazPath,
		fee500,
		adminAddr,
		true,
		"16000",
		consts.MIN_PRICE,
		adminAddr,
	)

	uassert.Equal(t, poolIn, "16000")
	uassert.Equal(t, poolOut, "-43457")

	newTest1Token0Balance := barToken.BalanceOf(adminAddr)
	newadminBazBalance := bazToken.BalanceOf(adminAddr)
	newPoolToken0Balance := barToken.BalanceOf(poolAddr)
	newPoolBazBalance := bazToken.BalanceOf(poolAddr)

	uassert.Equal(t, oldTest1Token0Balance-newTest1Token0Balance, uint64(16000))
	uassert.Equal(t, newadminBazBalance-oldadminBazBalance, uint64(43457))
	uassert.Equal(t, newPoolToken0Balance-oldPoolToken0Balance, uint64(16000))
	uassert.Equal(t, oldPoolBazBalance-newPoolBazBalance, uint64(43457))
}

// Collect Foo:Bar Fees by admin
func TestCollectFooBarFees(t *testing.T) {
	std.TestSetRealm(posRealm)

	oldTest1Token1Balance := fooToken.BalanceOf(adminAddr)
	oldTest1Token0Balance := barToken.BalanceOf(adminAddr)
	oldPoolToken1Balance := fooToken.BalanceOf(poolAddr)
	oldPoolToken0Balance := barToken.BalanceOf(poolAddr)

	// burn 0 to collect swap fees
	Burn(fooPath, barPath, fee500, -test_tickUpper, -test_tickLower, "0")

	c0, c1 := Collect(
		fooPath,
		barPath,
		fee500,
		adminAddr,
		-test_tickUpper,
		-test_tickLower,
		"100000",
		"100000",
	)

	uassert.NotEqual(t, c0, "0") // swap was foo > bar, so only foo has fees
	uassert.Equal(t, c1, "0")    // swap was foo > bar, so bar has no fees

	newTest1Token1Balance := fooToken.BalanceOf(adminAddr)
	newTest1Token0Balance := barToken.BalanceOf(adminAddr)
	newPoolToken1Balance := fooToken.BalanceOf(poolAddr)
	newPoolToken0Balance := barToken.BalanceOf(poolAddr)

	uassert.Equal(t, newTest1Token1Balance-oldTest1Token1Balance, strToUint64(c1))
	uassert.Equal(t, newTest1Token0Balance-oldTest1Token0Balance, strToUint64(c0))
	uassert.Equal(t, oldPoolToken1Balance-newPoolToken1Balance, strToUint64(c1))
	uassert.Equal(t, oldPoolToken0Balance-newPoolToken0Balance, strToUint64(c0))
}

// Collect Bar:Baz Fees by admin
func TestCollectBarBazFees(t *testing.T) {
	std.TestSetRealm(posRealm)

	oldTest1Token0Balance := barToken.BalanceOf(adminAddr)
	oldadminBazBalance := bazToken.BalanceOf(adminAddr)
	oldPoolToken0Balance := barToken.BalanceOf(poolAddr)
	oldPoolBazBalance := bazToken.BalanceOf(poolAddr)

	// burn 0 to collect swap fees
	Burn(barPath, bazPath, fee500, test_tickLower, test_tickUpper, "0")

	c0, c1 := Collect(
		barPath,
		bazPath,
		fee500,
		adminAddr,
		test_tickLower,
		test_tickUpper,
		"100000",
		"100000",
	)

	uassert.NotEqual(t, c0, "0") // swap was foo > bar, so only foo has fees
	uassert.Equal(t, c1, "0")    // swap was foo > bar, so bar has no fees

	newTest1Token0Balance := barToken.BalanceOf(adminAddr)
	newadminBazBalance := bazToken.BalanceOf(adminAddr)
	newPoolToken0Balance := barToken.BalanceOf(poolAddr)
	newPoolBazBalance := bazToken.BalanceOf(poolAddr)

	uassert.Equal(t, newTest1Token0Balance-oldTest1Token0Balance, strToUint64(c0))
	uassert.Equal(t, newadminBazBalance-oldadminBazBalance, strToUint64(c1))
	uassert.Equal(t, oldPoolToken0Balance-newPoolToken0Balance, strToUint64(c0))
	uassert.Equal(t, oldPoolBazBalance-newPoolBazBalance, strToUint64(c1))
}

// Burn Foo:Bar Liquidity by admin
func TestBurnFooBarLiquidity(t *testing.T) {
	std.TestSetRealm(posRealm)

	pool := GetPool(fooPath, barPath, fee500)
	poolOldLiquidity := pool.Liquidity()

	b0, b1 := Burn(
		fooPath,
		barPath,
		fee500,
		-test_tickUpper,
		-test_tickLower,
		test_liquidityExpectStr,
	)

	uassert.NotEqual(t, b0, "0")
	uassert.NotEqual(t, b1, "0")

	poolNewLiquidity := pool.Liquidity()

	uassert.Equal(t, true, new(u256.Uint).Sub(poolOldLiquidity, poolNewLiquidity).Eq(test_liquidityExpect256))
}

// Burn Bar:Baz Liquidity by admin
func TestBurnBarBazLiquidity(t *testing.T) {
	std.TestSetRealm(posRealm)

	pool := GetPool(barPath, bazPath, fee500)
	poolOldLiquidity := pool.Liquidity()

	b0, b1 := Burn(
		barPath,
		bazPath,
		fee500,
		test_tickLower,
		test_tickUpper,
		test_liquidityExpectStr,
	)

	uassert.NotEqual(t, b0, "0")
	uassert.NotEqual(t, b1, "0")

	poolNewLiquidity := pool.Liquidity()

	// uassert.Equal(t, poolOldLiquidity-poolNewLiquidity, test_liquidityExpect256)
}

// Collect Foo:Bar burned Liquidity by admin
func TestCollectFooBarLiquidity(t *testing.T) {
	std.TestSetRealm(posRealm)

	oldTest1Token1Balance := fooToken.BalanceOf(adminAddr)
	oldTest1Token0Balance := barToken.BalanceOf(adminAddr)
	oldPoolToken1Balance := fooToken.BalanceOf(poolAddr)
	oldPoolToken0Balance := barToken.BalanceOf(poolAddr)

	c0, c1 := Collect(
		fooPath,
		barPath,
		fee500,
		adminAddr,
		-test_tickUpper,
		-test_tickLower,
		"100000",
		"100000",
	)

	uassert.NotEqual(t, c0, "0")
	uassert.NotEqual(t, c1, "0")

	newTest1Token1Balance := fooToken.BalanceOf(adminAddr)
	newTest1Token0Balance := barToken.BalanceOf(adminAddr)
	newPoolToken1Balance := fooToken.BalanceOf(poolAddr)
	newPoolToken0Balance := barToken.BalanceOf(poolAddr)

	uassert.Equal(t, newTest1Token1Balance-oldTest1Token1Balance, strToUint64(c0))
	uassert.Equal(t, newTest1Token0Balance-oldTest1Token0Balance, strToUint64(c1))
	uassert.Equal(t, oldPoolToken1Balance-newPoolToken1Balance, strToUint64(c0))
	uassert.Equal(t, oldPoolToken0Balance-newPoolToken0Balance, strToUint64(c1))
}

// Collect Bar:Baz burned Liquidity by admin
func TestCollectBarBazLiquidity(t *testing.T) {
	std.TestSetRealm(posRealm)

	oldTest1Token0Balance := barToken.BalanceOf(adminAddr)
	oldadminBazBalance := bazToken.BalanceOf(adminAddr)
	oldPoolToken0Balance := barToken.BalanceOf(poolAddr)
	oldPoolBazBalance := bazToken.BalanceOf(poolAddr)

	c0, c1 := Collect(
		barPath,
		bazPath,
		fee500,
		adminAddr,
		test_tickLower,
		test_tickUpper,
		"100000",
		"100000",
	)

	uassert.NotEqual(t, c0, "0")
	uassert.NotEqual(t, c1, "0")

	newTest1Token0Balance := barToken.BalanceOf(adminAddr)
	newadminBazBalance := bazToken.BalanceOf(adminAddr)
	newPoolToken0Balance := barToken.BalanceOf(poolAddr)
	newPoolBazBalance := bazToken.BalanceOf(poolAddr)

	uassert.Equal(t, newTest1Token0Balance-oldTest1Token0Balance, strToUint64(c0))
	uassert.Equal(t, newadminBazBalance-oldadminBazBalance, strToUint64(c1))
	uassert.Equal(t, oldPoolToken0Balance-newPoolToken0Balance, strToUint64(c0))
	uassert.Equal(t, oldPoolBazBalance-newPoolBazBalance, strToUint64(c1))
}

// UTILs //
func strToUint64(s string) uint64 {
	i, err := strconv.Atoi(s)
	if err != nil {
		panic("strToUint64")
	}
	return uint64(i)
}
