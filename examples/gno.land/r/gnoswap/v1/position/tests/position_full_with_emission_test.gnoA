package position

import (
	"std"
	"testing"

	"gno.land/p/demo/uassert"

	"gno.land/p/gnoswap/consts"
	"gno.land/r/gnoswap/v1/common"

	pl "gno.land/r/gnoswap/v1/pool"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/foo"

	"gno.land/r/gnoswap/v1/gns"
)

func TestPositionFullWithEmissionAmount(t *testing.T) {
	testInit(t)
	testPoolInitCreatePool(t)
	testMintPositionFullInRange(t)
	testIncreaseLiquidity(t)
	testDecreaseLiquidity(t)
	testCollectFee(t)
}

func testInit(t *testing.T) {
	t.Run("init", func(t *testing.T) {
		// set pool create fee to 0 for testing
		std.TestSetRealm(adminRealm)
		pl.SetPoolCreationFeeByAdmin(0)
	})
}

func testPoolInitCreatePool(t *testing.T) {
	t.Run("init pool contract, and create one pool", func(t *testing.T) {
		uassert.Equal(t, gns.TotalSupply(), uint64(100000000000000))
		uassert.Equal(t, gnsBalance(emissionAddr), uint64(0))
		uassert.Equal(t, gnsBalance(stakerAddr), uint64(0))
		uassert.Equal(t, gnsBalance(devOpsAddr), uint64(0))
		std.TestSkipHeights(100)

		std.TestSetRealm(adminRealm)

		gns.Approve(poolAddr, pl.GetPoolCreationFee())
		pl.CreatePool(barPath, fooPath, fee500, common.TickMathGetSqrtRatioAtTick(1).ToString())
		std.TestSkipHeights(1)

		uassert.Equal(t, gns.TotalSupply(), uint64(100001426940600))
		uassert.Equal(t, gnsBalance(emissionAddr), uint64(0))
		uassert.Equal(t, gnsBalance(stakerAddr), uint64(1070205450))
		uassert.Equal(t, gnsBalance(devOpsAddr), uint64(285388120))
	})
}

func testMintPositionFullInRange(t *testing.T) {
	t.Run("mint position full in range", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		bar.Approve(poolAddr, consts.UINT64_MAX)
		foo.Approve(poolAddr, consts.UINT64_MAX)

		positionId, liquidity, amount0, amount1 := Mint(
			barPath,
			fooPath,
			fee500,
			-887270,
			887270,
			"50000",
			"50000",
			"0",
			"0",
			max_timeout,
			adminAddr,
			adminAddr,
			"",
		)
		std.TestSkipHeights(1)

		uassert.Equal(t, gns.TotalSupply(), uint64(100001441210006))
		uassert.Equal(t, gnsBalance(emissionAddr), uint64(1))
		uassert.Equal(t, gnsBalance(stakerAddr), uint64(1080907504))
		uassert.Equal(t, gnsBalance(devOpsAddr), uint64(288242001))
	})
}

func testIncreaseLiquidity(t *testing.T) {
	t.Run("increase liquidity", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		bar.Approve(poolAddr, consts.UINT64_MAX)
		foo.Approve(poolAddr, consts.UINT64_MAX)

		positionId, liquidity, amount0, amount1, poolPath := IncreaseLiquidity(
			uint64(1),
			"50000",
			"50000",
			"0",
			"0",
			max_timeout,
		)
		std.TestSkipHeights(1)

		uassert.Equal(t, gns.TotalSupply(), uint64(100001455479412))
		uassert.Equal(t, gnsBalance(emissionAddr), uint64(1))
		uassert.Equal(t, gnsBalance(stakerAddr), uint64(1091609559))
		uassert.Equal(t, gnsBalance(devOpsAddr), uint64(291095882))
	})
}

func testDecreaseLiquidity(t *testing.T) {
	t.Run("decrease liquidity", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		bar.Approve(poolAddr, consts.UINT64_MAX)
		foo.Approve(poolAddr, consts.UINT64_MAX)

		positionId, liquidity, fee0, fee1, amount0, amount1, poolPath := DecreaseLiquidity(
			uint64(1),
			"50",
			"0",
			"0",
			max_timeout,
			false,
		)
		std.TestSkipHeights(1)

		uassert.Equal(t, gns.TotalSupply(), uint64(100001469748818))
		uassert.Equal(t, gnsBalance(emissionAddr), uint64(1))
		uassert.Equal(t, gnsBalance(stakerAddr), uint64(1102311614))
		uassert.Equal(t, gnsBalance(devOpsAddr), uint64(293949763))
	})
}

func testCollectFee(t *testing.T) {
	t.Run("collect fee", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		bar.Approve(poolAddr, consts.UINT64_MAX)
		foo.Approve(poolAddr, consts.UINT64_MAX)

		positionId, fee0, fee1, poolPath, _, _ := CollectFee(uint64(1), false)
		std.TestSkipHeights(1)

		uassert.Equal(t, gns.TotalSupply(), uint64(100001484018224))
		uassert.Equal(t, gnsBalance(emissionAddr), uint64(1))
		uassert.Equal(t, gnsBalance(stakerAddr), uint64(1113013669))
		uassert.Equal(t, gnsBalance(devOpsAddr), uint64(296803644))
	})
}

func gnsBalance(addr std.Address) uint64 {
	return gns.BalanceOf(addr)
}
