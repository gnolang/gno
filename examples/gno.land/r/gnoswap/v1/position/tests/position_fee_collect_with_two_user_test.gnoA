package position

import (
	"std"
	"testing"
	"time"

	"gno.land/p/demo/testutils"

	"gno.land/p/gnoswap/consts"
	"gno.land/r/gnoswap/v1/common"

	"gno.land/r/gnoswap/v1/gns"
	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/baz"

	pl "gno.land/r/gnoswap/v1/pool"
)

var (
	user1Adderss = testutils.TestAddress("user1")
	user1Realm   = std.NewUserRealm(user1Adderss)
	user2Adderss = testutils.TestAddress("user2")
	user2Realm   = std.NewUserRealm(user2Adderss)
	tickSpacing  = int32(60)
	minTick      = (consts.MIN_TICK / tickSpacing) * tickSpacing
	maxTick      = (consts.MAX_TICK / tickSpacing) * tickSpacing

	poolCreationFee = uint64(100_000_000)
)

/*
This test demonstrates a issue(Gnoswap-19) fee collection mechanism. The key steps are:

· Create a pool and add liquidity from two different users
· Perform swaps to generate fees in the pool
· Burn 0 liquidity to update fees
· Collect fees for both users
· Compare the collected fees between the two users
*/
func TestCollectFeeWithTwoUser(t *testing.T) {
	std.TestSetRealm(adminRealm)
	common.SetLimitCaller(true)
	gns.Approve(poolAddr, poolCreationFee)

	// -23028
	pl.CreatePool(barPath, bazPath, 3000, "25054144837504793118641380156") // encodePriceSqrt(1, 10)
	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:3000"

	// initial balance for user1 & user2
	bar.Transfer(user1Adderss, 100_000_000)
	baz.Transfer(user1Adderss, 100_000_000)
	bar.Transfer(user2Adderss, 100_000_000)
	baz.Transfer(user2Adderss, 100_000_000)

	t.Run("mint and swap fee should be distributed to user's liquidity", func(t *testing.T) {
		std.TestSetRealm(user1Realm)
		bar.Approve(poolAddr, consts.UINT64_MAX)
		baz.Approve(poolAddr, consts.UINT64_MAX)
		bar.Approve(routerAddr, consts.UINT64_MAX)
		baz.Approve(routerAddr, consts.UINT64_MAX)

		positionId_res1, liquidity_res1, amount0_res1, amount1_res1 := Mint(
			barPath,                // token0 string,
			bazPath,                // token1 string,
			3000,                   // fee uint32,
			-43020,                 // tickLower int32,
			0,                      // tickUpper int32,
			"10000000",             // _amount0Desired string, // *u256.Uint // 100e18
			"10000000",             // _amount1Desired string, // *u256.Uint // 100e18
			"0",                    // _amount0Min string, // *u256.Uint
			"0",                    // _amount1Min string, // *u256.Uint
			time.Now().Unix()+1000, // deadline int64,
			user1Adderss,           // mintTo string
			user1Adderss,
			"",
		)

		std.TestSetRealm(user2Realm)
		bar.Approve(poolAddr, consts.UINT64_MAX)
		baz.Approve(poolAddr, consts.UINT64_MAX)
		bar.Approve(routerAddr, consts.UINT64_MAX)
		baz.Approve(routerAddr, consts.UINT64_MAX)

		positionId_res2, liquidity_res2, amount0_res2, amount1_res2 := Mint(
			barPath,                // token0 string,
			bazPath,                // token1 string,
			3000,                   // fee uint32,
			-43020,                 // tickLower int32,
			0,                      // tickUpper int32,
			"10000000",             // _amount0Desired string, // *u256.Uint // 100e18
			"10000000",             // _amount1Desired string, // *u256.Uint // 100e18
			"0",                    // _amount0Min string, // *u256.Uint
			"0",                    // _amount1Min string, // *u256.Uint
			time.Now().Unix()+1000, // deadline int64,
			user2Adderss,           // mintTo string
			user2Adderss,
			"",
		)

		// ====== Swap to accrue fees ======
		// pr.SwapRoute(
		// 	barPath,                     //inputToken string,
		// 	bazPath,                     //outputToken string,
		// 	"10000000",                  //_amountSpecified string, // int256
		// 	"EXACT_IN",                  //swapType string,
		// 	barPath+":"+bazPath+":3000", //strRouteArr string, // []string
		// 	"100",                       //quoteArr string, // []int
		// 	"0",                         //_tokenAmountLimit string, // uint256
		// )

		// pr.SwapRoute(
		// 	bazPath,                     //inputToken string,
		// 	barPath,                     //outputToken string,
		// 	"10000000",                  //_amountSpecified string, // int256
		// 	"EXACT_IN",                  //swapType string,
		// 	bazPath+":"+barPath+":3000", //strRouteArr string, // []string
		// 	"100",                       //quoteArr string, // []int
		// 	"0",                         //_tokenAmountLimit string, // uint256
		// )

		// ====== Collect fees and compare ======
		// user1
		// std.TestSetRealm(user1Realm)
		// bar.Approve(poolAddr, consts.UINT64_MAX)
		// baz.Approve(poolAddr, consts.UINT64_MAX)
		// userBarBalanceBeforeCollect_1 := bar.BalanceOf(user1Adderss)
		// userBazBalanceBeforeCollect_1 := baz.BalanceOf(user1Adderss)
		// tokenId_res3, withoutFee0_res3, withoutFee1_res3, positionPoolKey_res3, _, _ := CollectFee(tokenId_res1, false)
		// userBarBalanceAfterCollect_1 := bar.BalanceOf(user1Adderss)
		// userBazBalanceAfterCollect_1 := baz.BalanceOf(user1Adderss)

		// 	// user2
		// 	std.TestSetRealm(user2Realm)
		// 	bar.Approve(poolAddr, consts.UINT64_MAX)
		// 	baz.Approve(poolAddr, consts.UINT64_MAX)
		// 	userBarBalanceBeforeCollect_2 := bar.BalanceOf(user2Adderss)
		// 	userBazBalanceBeforeCollect_2 := baz.BalanceOf(user2Adderss)
		// 	tokenId_res4, withoutFee0_res4, withoutFee1_res4, positionPoolKey_res4, _, _ := pn.CollectFee(tokenId_res2, false)
		// 	userBarBalanceAfterCollect_2 := bar.BalanceOf(user2Adderss)
		// 	userBazBalanceAfterCollect_2 := baz.BalanceOf(user2Adderss)
		// 	uassert.Equal(t, (userBarBalanceAfterCollect_1-userBarBalanceBeforeCollect_1)-(userBarBalanceAfterCollect_2-userBarBalanceBeforeCollect_2), uint64(0))
		// 	uassert.Equal(t, (userBazBalanceAfterCollect_1-userBazBalanceBeforeCollect_1)-(userBazBalanceAfterCollect_2-userBazBalanceBeforeCollect_2), uint64(0))
	})
}

func TestCollectTwo(t *testing.T) {
	std.TestSetRealm(user1Realm)
	bar.Approve(poolAddr, consts.UINT64_MAX)
	baz.Approve(poolAddr, consts.UINT64_MAX)
	CollectFee(uint64(1), false)

	// std.TestSetRealm(user2Realm)
	// bar.Approve(poolAddr, consts.UINT64_MAX)
	// baz.Approve(poolAddr, consts.UINT64_MAX)
	// CollectFee(uint64(2), false)

	// tokenId_res3, withoutFee0_res3, withoutFee1_res3, positionPoolKey_res3, _, _ := CollectFee(uint64(1), false)
}
