package position

import (
	"std"
	"testing"

	"gno.land/p/demo/uassert"
	i256 "gno.land/p/gnoswap/int256"

	"gno.land/p/gnoswap/consts"
	"gno.land/r/gnoswap/v1/gnft"
	"gno.land/r/gnoswap/v1/gns"
	pl "gno.land/r/gnoswap/v1/pool"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/foo"
)

func TestPoolInitCreatePool(t *testing.T) {
	std.TestSetRealm(adminRealm)

	gns.Approve(poolAddr, pl.GetPoolCreationFee())
	pl.CreatePool(barPath, fooPath, fee500, "130621891405341611593710811006") // tick = 10000
}

func TestMintPosition01InRange(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(poolAddr, 18394892)
	foo.Approve(poolAddr, 50000000)

	positionId, liquidity, amount0, amount1 := Mint(
		barPath,
		fooPath,
		fee500,
		8000,
		12000,
		"50000000",
		"50000000",
		"0",
		"0",
		max_timeout,
		adminAddr,
		adminAddr,
		"",
	)

	uassert.Equal(t, positionId, uint64(1))
	uassert.Equal(t, GetNextId(), uint64(2))
	uassert.Equal(t, amount0, "18394892")
	uassert.Equal(t, amount1, "50000000")
}

func TestMintPosition02LowerRange(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(poolAddr, 0)
	foo.Approve(poolAddr, 50000000)

	positionId, liquidity, amount0, amount1 := Mint(
		barPath,
		fooPath,
		fee500,
		5000,
		8000,
		"50000000",
		"50000000",
		"0",
		"0",
		max_timeout,
		adminAddr,
		adminAddr,
		"",
	)

	uassert.Equal(t, positionId, uint64(2))
	uassert.Equal(t, GetNextId(), uint64(3))
	uassert.Equal(t, amount0, "0")
	uassert.Equal(t, amount1, "50000000")
}

func TestMintPosition03UpperRange(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(poolAddr, 50000000)
	foo.Approve(poolAddr, 0)

	positionId, liquidity, amount0, amount1 := Mint(
		barPath,
		fooPath,
		fee500,
		12000,
		14000,
		"50000000",
		"50000000",
		"0",
		"0",
		max_timeout,
		adminAddr,
		adminAddr,
		"",
	)

	uassert.Equal(t, positionId, uint64(3))
	uassert.Equal(t, GetNextId(), uint64(4))
	uassert.Equal(t, amount0, "50000000")
	uassert.Equal(t, amount1, "0")
}

func TestCollectFeeBeforeSwap(t *testing.T) {
	std.TestSetRealm(adminRealm)
	positionId, fee0, fee1, poolPath, _, _ := CollectFee(1, false)

	uassert.Equal(t, positionId, uint64(1))
	uassert.Equal(t, fee0, "0")
	uassert.Equal(t, fee1, "0")
	uassert.Equal(t, poolPath, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
}

func TestUnclaimedFee0(t *testing.T) {
	amount0, amount1 := unclaimedFee(1)

	uassert.Equal(t, amount0.ToString(), "0")
	uassert.Equal(t, amount1.ToString(), "0")
}

func TestSwap1(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(poolAddr, 1234567)

	std.TestSetRealm(rouRealm)
	amount0, amount1 := pl.Swap(
		barPath,
		fooPath,
		fee500,
		adminAddr,
		true,
		"1234567",
		consts.MIN_PRICE,
		adminAddr,
	)

	uassert.Equal(t, amount0, "1234567")
	uassert.Equal(t, amount1, "-3332779")
}

func TestUnclaimedFee1(t *testing.T) {
	amount0, amount1 := unclaimedFee(1)

	uassert.Equal(t, amount0.ToString(), "617")
	uassert.Equal(t, amount1.ToString(), "0")
}

func TestSwap2(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(poolAddr, consts.UINT64_MAX)

	std.TestSetRealm(rouRealm)
	amount0, amount1 := pl.Swap(
		barPath,
		fooPath,
		fee500,
		adminAddr,
		true,
		"20000000", //
		consts.MIN_PRICE,
		adminAddr,
	)

	uassert.Equal(t, amount0, "20000000")
	uassert.Equal(t, amount1, "-48647018")
}

func TestUnclaimedFee2(t *testing.T) {
	amount0, amount1 := unclaimedFee(1)

	uassert.Equal(t, amount0.ToString(), "10170")
	uassert.Equal(t, amount1.ToString(), "0")
}

func TestSwap3(t *testing.T) {
	std.TestSetRealm(adminRealm)
	foo.Approve(poolAddr, consts.UINT64_MAX)

	std.TestSetRealm(rouRealm)
	amount0, amount1 := pl.Swap(
		fooPath,
		barPath,
		fee500,
		adminAddr,
		false,
		"20000000", //
		consts.MAX_PRICE,
		adminAddr,
	)

	uassert.Equal(t, amount0, "-8692001")
	uassert.Equal(t, amount1, "20000000")
}

func TestUnclaimedFee3(t *testing.T) {
	amount0, amount1 := unclaimedFee(1)

	uassert.Equal(t, amount0.ToString(), "10170")
	uassert.Equal(t, amount1.ToString(), "9009")
}

func TestCollectFeeAfterSwap(t *testing.T) {
	std.TestSetRealm(adminRealm)
	foo.Approve(poolAddr, consts.UINT64_MAX) // COLLECT_FEE
	bar.Approve(poolAddr, consts.UINT64_MAX) // COLLECT_FEE

	positionId, fee0, fee1, poolPath, _, _ := CollectFee(1, false)

	uassert.Equal(t, positionId, uint64(1))
	uassert.Equal(t, fee0, "10069") // this is input token
	uassert.Equal(t, fee1, "8919")  // this it output token
	uassert.Equal(t, poolPath, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
}

func TestDecreaseLiquidityUpperPosition(t *testing.T) {
	std.TestSetRealm(adminRealm)

	ownerOfPosition, _ := gnft.OwnerOf(positionIdFrom(3))
	uassert.Equal(t, ownerOfPosition, adminAddr)

	positionId, liquidity, fee0, fee1, amount0, amount1, poolPath := DecreaseLiquidity(uint64(3), "318704392", "0", "0", max_timeout, false)

	uassert.Equal(t, positionId, uint64(3))
	uassert.Equal(t, amount0, "16644469")
	uassert.Equal(t, amount1, "0")

	ownerOfPosition, _ = gnft.OwnerOf(positionIdFrom(3))
	uassert.Equal(t, ownerOfPosition, adminAddr)
}

func TestSubIn256(t *testing.T) {
	a := i256.Zero()
	b := i256.One()

	c := subIn256(a, b)
	if c.ToString() != "115792089237316195423570985008687907853269984665640564039457584007913129639934" {
		t.Errorf("subIn256 error")
	}
}
