package position

import (
	"std"
	"testing"

	"gno.land/p/demo/uassert"

	"gno.land/p/gnoswap/consts"
	"gno.land/r/gnoswap/v1/gnft"
	"gno.land/r/gnoswap/v1/gns"
	pl "gno.land/r/gnoswap/v1/pool"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/foo"
)

func TestPoolInitCreatePool(t *testing.T) {
	std.TestSetRealm(adminRealm)

	gns.Approve(poolAddr, pl.GetPoolCreationFee())
	pl.CreatePool(barPath, fooPath, fee500, "130621891405341611593710811006") // tick = 10000
}

func TestMintPosition01InRange(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(poolAddr, 18394892)
	foo.Approve(poolAddr, 50000000)

	positionId, liquidity, amount0, amount1 := Mint(
		barPath,
		fooPath,
		fee500,
		8000,
		12000,
		"50000000",
		"50000000",
		"0",
		"0",
		max_timeout,
		adminAddr,
		adminAddr,
		"",
	)

	uassert.Equal(t, positionId, uint64(1))
	uassert.Equal(t, GetNextId(), uint64(2))
	uassert.Equal(t, amount0, "18394892")
	uassert.Equal(t, amount1, "50000000")

	position := MustGetPosition(positionId)
	uassert.Equal(t, position.nonce.ToString(), "0")
	uassert.Equal(t, position.operator, consts.ZERO_ADDRESS)
	uassert.Equal(t, position.poolKey, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
	uassert.Equal(t, position.tickLower, int32(8000))
	uassert.Equal(t, position.tickUpper, int32(12000))
	uassert.Equal(t, position.liquidity.ToString(), "318704392")
	uassert.Equal(t, position.feeGrowthInside0LastX128.ToString(), "0")
	uassert.Equal(t, position.feeGrowthInside1LastX128.ToString(), "0")
	uassert.Equal(t, position.tokensOwed0.ToString(), "0")
	uassert.Equal(t, position.tokensOwed1.ToString(), "0")
	uassert.Equal(t, position.burned, false)
}

func TestSwap1(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(poolAddr, 1234567)

	std.TestSetRealm(rouRealm)
	amount0, amount1 := pl.Swap(
		barPath,
		fooPath,
		fee500,
		adminAddr,
		true,
		"1234567",
		consts.MIN_PRICE,
		adminAddr,
	)

	uassert.Equal(t, amount0, "1234567")
	uassert.Equal(t, amount1, "-3332779")

	position := MustGetPosition(uint64(1))
	uassert.Equal(t, position.nonce.ToString(), "0")
	uassert.Equal(t, position.operator, consts.ZERO_ADDRESS)
	uassert.Equal(t, position.poolKey, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
	uassert.Equal(t, position.tickLower, int32(8000))
	uassert.Equal(t, position.tickUpper, int32(12000))
	uassert.Equal(t, position.liquidity.ToString(), "318704392")
	uassert.Equal(t, position.feeGrowthInside0LastX128.ToString(), "0")
	uassert.Equal(t, position.feeGrowthInside1LastX128.ToString(), "0")
	uassert.Equal(t, position.tokensOwed0.ToString(), "0")
	uassert.Equal(t, position.tokensOwed1.ToString(), "0")
	uassert.Equal(t, position.burned, false)
}

func TestMintPosition02InRange(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(poolAddr, consts.UINT64_MAX)
	foo.Approve(poolAddr, consts.UINT64_MAX)

	positionId, liquidity, amount0, amount1 := Mint(
		barPath,
		fooPath,
		fee500,
		8000,
		12000,
		"50000000",
		"50000000",
		"0",
		"0",
		max_timeout,
		adminAddr,
		adminAddr,
		"",
	)

	uassert.Equal(t, positionId, uint64(2))
	uassert.Equal(t, GetNextId(), uint64(3))
	uassert.Equal(t, amount0, "21030652")
	uassert.Equal(t, amount1, "50000000")

	position := MustGetPosition(positionId)
	uassert.Equal(t, position.nonce.ToString(), "0")
	uassert.Equal(t, position.operator, consts.ZERO_ADDRESS)
	uassert.Equal(t, position.poolKey, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
	uassert.Equal(t, position.tickLower, int32(8000))
	uassert.Equal(t, position.tickUpper, int32(12000))
	uassert.Equal(t, position.liquidity.ToString(), "341464938")
	uassert.Equal(t, position.feeGrowthInside0LastX128.ToString(), "659841872392960215058365142934185")
	uassert.Equal(t, position.feeGrowthInside1LastX128.ToString(), "0")
	uassert.Equal(t, position.tokensOwed0.ToString(), "0")
	uassert.Equal(t, position.tokensOwed1.ToString(), "0")
	uassert.Equal(t, position.burned, false)
}

func TestUnclaimedFee01(t *testing.T) {
	amount0, amount1 := unclaimedFee(1)

	uassert.Equal(t, amount0.ToString(), "617")
	uassert.Equal(t, amount1.ToString(), "0")
}

func TestUnclaimedFee02(t *testing.T) {
	amount0, amount1 := unclaimedFee(2)

	uassert.Equal(t, amount0.ToString(), "0")
	uassert.Equal(t, amount1.ToString(), "0")
}

func TestDecreaseLiquidityInPosition(t *testing.T) {
	std.TestSetRealm(adminRealm)

	positionId := uint64(1)

	ownerOfPosition, _ := gnft.OwnerOf(positionIdFrom(positionId))
	uassert.Equal(t, ownerOfPosition, adminAddr)

	// approve fee0, fee1 positionId to pool
	bar.Approve(poolAddr, consts.UINT64_MAX)
	foo.Approve(poolAddr, consts.UINT64_MAX)

	resultPositionId, liquidity, fee0, fee1, amount0, amount1, poolPath := DecreaseLiquidity(positionId, "318704392", "0", "0", max_timeout, false)

	uassert.Equal(t, resultPositionId, positionId)
	uassert.Equal(t, amount0, "19628840")
	uassert.Equal(t, amount1, "46667220")

	ownerOfPosition, _ = gnft.OwnerOf(positionIdFrom(positionId))
	uassert.Equal(t, ownerOfPosition, adminAddr)

	position := MustGetPosition(positionId)
	uassert.Equal(t, position.nonce.ToString(), "0")
	uassert.Equal(t, position.operator, consts.ZERO_ADDRESS)
	uassert.Equal(t, position.poolKey, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
	uassert.Equal(t, position.tickLower, int32(8000))
	uassert.Equal(t, position.tickUpper, int32(12000))
	uassert.Equal(t, position.liquidity.ToString(), "0")
	uassert.Equal(t, position.feeGrowthInside0LastX128.ToString(), "659841872392960215058365142934185")
	uassert.Equal(t, position.feeGrowthInside1LastX128.ToString(), "0")
	uassert.Equal(t, position.tokensOwed0.ToString(), "0")
	uassert.Equal(t, position.tokensOwed1.ToString(), "0")
	uassert.Equal(t, position.burned, true)
}

func TestMintPosition03InRange(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(poolAddr, consts.UINT64_MAX)
	foo.Approve(poolAddr, consts.UINT64_MAX)

	positionId, liquidity, amount0, amount1 := Mint(
		barPath,
		fooPath,
		fee500,
		8000,
		12000,
		"50000000",
		"50000000",
		"0",
		"0",
		max_timeout,
		adminAddr,
		adminAddr,
		"",
	)

	uassert.Equal(t, positionId, uint64(3))
	uassert.Equal(t, GetNextId(), uint64(4))
	uassert.Equal(t, amount0, "21030652")
	uassert.Equal(t, amount1, "50000000")

	position := MustGetPosition(positionId)
	uassert.Equal(t, position.nonce.ToString(), "0")
	uassert.Equal(t, position.operator, consts.ZERO_ADDRESS)
	uassert.Equal(t, position.poolKey, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
	uassert.Equal(t, position.tickLower, int32(8000))
	uassert.Equal(t, position.tickUpper, int32(12000))
	uassert.Equal(t, position.liquidity.ToString(), "341464938")
	uassert.Equal(t, position.feeGrowthInside0LastX128.ToString(), "659841872392960215058365142934185")
	uassert.Equal(t, position.feeGrowthInside1LastX128.ToString(), "0")
	uassert.Equal(t, position.tokensOwed0.ToString(), "0")
	uassert.Equal(t, position.tokensOwed1.ToString(), "0")
	uassert.Equal(t, position.burned, false)
}

func TestRepositionNotOwner(t *testing.T) {
	std.TestSetRealm(std.NewUserRealm(addr02))
	uassert.PanicsWithMessage(
		t,
		`[GNOSWAP-POSITION-001] caller has no permission || caller(g1v9jxgu3sxf047h6lta047h6lta047h6l8tv5at) is not owner(g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d) for positionId(1)`,
		func() {
			Reposition(uint64(1), -1000, 1000, "500", "500", "0", "0")
		})
}

func TestRepositionOwnerButNowBurned(t *testing.T) {
	std.TestSetRealm(adminRealm)
	uassert.PanicsWithMessage(
		t,
		`[GNOSWAP-POSITION-009] position is not clear || position(2) isn't clear(liquidity:341464938, tokensOwed0:0, tokensOwed1:0)`,
		func() {
			Reposition(uint64(2), -1000, 1000, "500", "500", "0", "0")
		})
}

func TestRepositionSlippageTooLarge(t *testing.T) {
	std.TestSetRealm(adminRealm)
	uassert.PanicsWithMessage(
		t,
		`[GNOSWAP-POSITION-002] slippage failed || Price Slippage Check(amount0(0) >= amount0Min(100000000000), amount1(500) >= amount1Min(100000000000))`,
		func() {
			Reposition(uint64(1), -1000, 1000, "500", "500", "100000000000", "100000000000")
		})
}

func TestReposition(t *testing.T) {
	std.TestSetRealm(adminRealm)

	positionId := uint64(1)

	// check current state
	position := MustGetPosition(positionId)
	uassert.Equal(t, position.nonce.ToString(), "0")
	uassert.Equal(t, position.operator, consts.ZERO_ADDRESS)
	uassert.Equal(t, position.poolKey, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
	uassert.Equal(t, position.tickLower, int32(8000))
	uassert.Equal(t, position.tickUpper, int32(12000))
	uassert.Equal(t, position.liquidity.ToString(), "0")
	uassert.Equal(t, position.feeGrowthInside0LastX128.ToString(), "659841872392960215058365142934185")
	uassert.Equal(t, position.feeGrowthInside1LastX128.ToString(), "0")
	uassert.Equal(t, position.tokensOwed0.ToString(), "0")
	uassert.Equal(t, position.tokensOwed1.ToString(), "0")
	uassert.Equal(t, position.burned, true)

	Reposition(
		positionId, // positionId
		-1000,      // tickLower
		1000,       // tickUpper
		"500",      // amount0Desired
		"500",      // amount1Desired
		"0",        // amount0Min
		"100",      // amount1Min
	)

	position = MustGetPosition(positionId)
	uassert.Equal(t, position.nonce.ToString(), "0")
	uassert.Equal(t, position.operator, consts.ZERO_ADDRESS)
	uassert.Equal(t, position.poolKey, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
	uassert.Equal(t, position.tickLower, int32(-1000))
	uassert.Equal(t, position.tickUpper, int32(1000))
	uassert.Equal(t, position.liquidity.ToString(), "4998")
	uassert.Equal(t, position.feeGrowthInside0LastX128.ToString(), "0")
	uassert.Equal(t, position.feeGrowthInside1LastX128.ToString(), "0")
	uassert.Equal(t, position.tokensOwed0.ToString(), "0")
	uassert.Equal(t, position.tokensOwed1.ToString(), "0")
	uassert.Equal(t, position.burned, false)
}
