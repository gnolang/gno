package staker

import (
	"std"
	"testing"

	"gno.land/p/demo/testutils"
	"gno.land/p/demo/uassert"

	"gno.land/r/gnoswap/v1/gns"
	"gno.land/r/gnoswap/v1/gov/xgns"

	"gno.land/p/gnoswap/consts"
)

const minAmount = uint64(1_000_000)

var (
	dummyAddr  = testutils.TestAddress("dummy")
	dummyRealm = std.NewUserRealm(dummyAddr)
	reDelegate = testutils.TestAddress("reDelegate")
)

func TestEmission(t *testing.T) {
	initial(t)
	delegateAdmin(t)
	redelegateAdmin(t)
}

func initial(t *testing.T) {
	testing.SetRealm(adminRealm)

	uassert.Equal(t, uint64(100000000000000), gns.BalanceOf(admin))
	uassert.Equal(t, uint64(0), xgns.BalanceOf(admin))
}

func delegateAdmin(t *testing.T) {
	// gns before emission
	uassert.Equal(t, uint64(0), gns.BalanceOf(stakerAddr))
	uassert.Equal(t, uint64(0), gns.BalanceOf(devOpsAddr))
	uassert.Equal(t, uint64(0), gns.BalanceOf(communityPoolAddr))
	uassert.Equal(t, uint64(0), gns.BalanceOf(govStakerAddr))

	testing.SkipHeights(1)

	testing.SetRealm(adminRealm)
	gns.Approve(govStakerAddr, uint64(1000000))
	Delegate(dummyAddr, 1000000, "")

	uassert.Equal(t, uint64(10702054), gns.BalanceOf(stakerAddr))
	uassert.Equal(t, uint64(2853881), gns.BalanceOf(devOpsAddr))
	uassert.Equal(t, uint64(713470), gns.BalanceOf(communityPoolAddr))
	uassert.Equal(t, uint64(1000000), gns.BalanceOf(govStakerAddr))
	uassert.Equal(t, uint64(0), gns.BalanceOf(govStakerAddr)-xgns.TotalSupply())
}

func redelegateAdmin(t *testing.T) {
	uassert.Equal(t, GetDelegationAmountFromTo(admin, dummyAddr), uint64(1000000))
	uassert.Equal(t, GetTotalDelegatedTo(dummyAddr), uint64(1000000))
	uassert.Equal(t, gns.BalanceOf(admin), uint64(99999999000000))
	uassert.Equal(t, xgns.BalanceOf(admin), uint64(1000000))

	testing.SetRealm(adminRealm)
	Redelegate(dummyAddr, reDelegate, 1000000)

	uassert.Equal(t, gns.BalanceOf(admin), uint64(99999999000000))
	uassert.Equal(t, xgns.BalanceOf(admin), uint64(1000000))

	uassert.Equal(t, GetDelegationAmountFromTo(admin, dummyAddr), uint64(0))
	uassert.Equal(t, GetTotalDelegatedTo(dummyAddr), uint64(0))

	uassert.Equal(t, GetDelegationAmountFromTo(admin, reDelegate), uint64(1000000))
	uassert.Equal(t, GetTotalDelegatedTo(reDelegate), uint64(1000000))
}
