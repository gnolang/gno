package staker

import (
	"std"
	"testing"

	"gno.land/p/demo/testutils"
	"gno.land/p/demo/uassert"

	"gno.land/r/gnoswap/v1/gns"
	"gno.land/r/gnoswap/v1/gov/xgns"
)

const minAmount = uint64(1_000_000)

var (
	dummyAddr  = testutils.TestAddress("dummy")
	dummyRealm = std.NewUserRealm(dummyAddr)
	reDelegate = testutils.TestAddress("reDelegate")
)

func TestApiFuncs(t *testing.T) {
	initial(t)
	delegateAdmin(t)
	// redelegateUnknownFrom(t)
	// redelegateTooMany(t)
	// redelegateAdmin(t)
	// undelegateUnknownUser(t)
	// undelegateAdmin(t)
	// collectBeforeLockup(t)
	// collectAfterLockup(t)
}

func initial(t *testing.T) {
	t.Run("initial", func(t *testing.T) {
		uassert.Equal(t, GetTotalDelegated(), uint64(0))

		uassert.Equal(t, delegatorAmount.Size(), 0)
		uassert.Equal(t, delegatedFromTo.Size(), 0)
		uassert.Equal(t, delegatedTo.Size(), 0)
	})
}

func delegateAdmin(t *testing.T) {
	t.Run("delegateAdmin", func(t *testing.T) {
		testing.SetRealm(adminRealm)

		gns.Approve(govStaker, uint64(1000000))
		Delegate(dummyAddr, 1000000, "")

		uassert.Equal(t, GetTotalDelegated(), uint64(1000000))
		uassert.Equal(t, xgns.VotingSupply(), uint64(1000000))
		uassert.Equal(t, xgns.TotalSupply(), uint64(1000000))

		uassert.Equal(t, GetTotalDelegatedFrom(admin), uint64(1000000))
		uassert.Equal(t, GetDelegationAmountFromTo(admin, dummyAddr), uint64(1000000))
		uassert.Equal(t, GetTotalDelegatedTo(dummyAddr), uint64(1000000))

		testing.SkipHeights(1)
	})
}

func redelegateUnknownFrom(t *testing.T) {
	t.Run("unknown address redelegate", func(t *testing.T) {
		testing.SetRealm(adminRealm)

		uassert.PanicsWithMessage(t, "caller g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d has no delegated amount to g1wfj5getvv4nkzar9ta047h6lta047h6lycyuqt", func() {
			Redelegate(reDelegate, dummyAddr, 1000001)
		})

		testing.SkipHeights(1)
	})
}

func redelegateTooMany(t *testing.T) {
	t.Run("too many amount", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		uassert.PanicsWithMessage(t, "not enough xGNS staked", func() {
			Redelegate(reDelegate, dummyAddr, 10000010)
		})

		testing.SkipHeights(1)
	})
}

func redelegateAdmin(t *testing.T) {
	t.Run("admin redelegate", func(t *testing.T) {
		testing.SetRealm(adminRealm)

		Redelegate(dummyAddr, reDelegate, 1000001)

		uassert.Equal(t, GetTotalDelegated(), uint64(1000001))

		uassert.Equal(t, GetTotalDelegatedFrom(admin), uint64(1000001))
		uassert.Equal(t, GetDelegationAmountFromTo(admin, dummyAddr), uint64(0))
		uassert.Equal(t, GetTotalDelegatedTo(dummyAddr), uint64(0))
		uassert.Equal(t, GetDelegationAmountFromTo(admin, reDelegate), uint64(1000001))
		uassert.Equal(t, GetTotalDelegatedTo(reDelegate), uint64(1000001))

		uassert.Equal(t, GetLockedInfoByAddress(admin), ``)

		testing.SkipHeights(1)
	})
}

func undelegateUnknownUser(t *testing.T) {
	t.Run("unknown address undelegate", func(t *testing.T) {
		testing.SetRealm(dummyRealm)

		uassert.PanicsWithMessage(t, "not enough xGNS staked", func() {
			Undelegate(dummyAddr, 1000001)
		})

		testing.SkipHeights(1)
	})
}

func undelegateAdmin(t *testing.T) {
	t.Run("admin undelegate", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		uassert.Equal(t, GetLockedInfoByAddress(admin), ``)

		Undelegate(reDelegate, 1000001)

		uassert.Equal(t, GetTotalDelegated(), uint64(0))

		uassert.Equal(t, GetTotalDelegatedFrom(admin), uint64(0))
		uassert.Equal(t, GetDelegationAmountFromTo(admin, dummyAddr), uint64(0))
		uassert.Equal(t, GetTotalDelegatedTo(dummyAddr), uint64(0))
		uassert.Equal(t, GetDelegationAmountFromTo(admin, reDelegate), uint64(0))
		uassert.Equal(t, GetTotalDelegatedTo(reDelegate), uint64(0))

		uassert.Equal(t, GetLockedInfoByAddress(admin), `{"height":"123","now":"1234567890","totalLocked":"1000001","claimableAmount":"0"}`)

		testing.SkipHeights(1)
	})
}

func collectBeforeLockup(t *testing.T) {
	t.Run("collect before lockup", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		amount := CollectUndelegatedGns()
		uassert.Equal(t, amount, uint64(0))

		testing.SkipHeights(1)
	})
}

func collectAfterLockup(t *testing.T) {
	t.Run("collect after lockup", func(t *testing.T) {
		testing.SetRealm(adminRealm)

		amount := CollectUndelegatedGns()
		uassert.Equal(t, amount, uint64(0))

		uassert.Equal(t, GetLockedAmount(), uint64(1000001))
		uassert.Equal(t, GetLockedInfoByAddress(admin), `{"height":"123","now":"1234567890","totalLocked":"1000001","claimableAmount":"0"}`)

		testing.SkipHeights(302400) // 7 days 2 seconds
		uassert.Equal(t, GetLockedInfoByAddress(admin), `{"height":"302523","now":"1235172690","totalLocked":"1000001","claimableAmount":"1000001"}`)

		CollectUndelegatedGns()
		uassert.Equal(t, GetLockedAmount(), uint64(0))
		uassert.Equal(t, GetLockedInfoByAddress(admin), `{"height":"302523","now":"1235172690","totalLocked":"0","claimableAmount":"0"}`)

		testing.SkipHeights(1)
	})
}
