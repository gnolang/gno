package staker

import (
	"std"
	"testing"
	"time"

	"gno.land/p/demo/testutils"
	"gno.land/p/demo/uassert"
	"gno.land/p/demo/ufmt"
	"gno.land/p/gnoswap/consts"

	"gno.land/r/gnoswap/v1/access"
	en "gno.land/r/gnoswap/v1/emission"
	"gno.land/r/gnoswap/v1/gns"
	"gno.land/r/gnoswap/v1/gov/xgns"
	lp "gno.land/r/gnoswap/v1/launchpad"
	pf "gno.land/r/gnoswap/v1/protocol_fee"

	// grc20 tokens
	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/obl"
	"gno.land/r/onbloc/qux"
)

var ()

// Admin -> Alice : 1_000_000
// Bob -> Bob : 5_000_000
// Launchpad xgns : 1_000_000
// Total Staked GNS : 7_000_000
// Protocol Fee
// 1. bar -> 1000 : ( reward/1staked = 1000 / 7 )
// 2. qux -> 2500 : ( reward/1staked = 2500 / 7 )
func TestGovernanceStakerRewardProtocolFee(t *testing.T) {
	aliceAddr := testutils.TestAddress("alice")
	bobAddr := testutils.TestAddress("bob")
	adminAddr := consts.ADMIN

	bobRealm := std.NewUserRealm(bobAddr)
	adminRealm := std.NewUserRealm(adminAddr)

	delegateAmountFromAdminToAlice := uint64(1_000_000)
	delegateAmountFromBobToBot := uint64(5_000_000)

	t.Run("delegate from admin to alice", func(t *testing.T) {
		std.TestSkipHeights(1)
		std.TestSetRealm(adminRealm)
		gns.Approve(govStakerAddr, delegateAmountFromAdminToAlice)
		// Delegate : 1, reward : x
		Delegate(aliceAddr, delegateAmountFromAdminToAlice, "")
		uassert.Equal(t, delegateAmountFromAdminToAlice, GetTotalxGnsSupply())
		uassert.Equal(t, delegateAmountFromAdminToAlice, GetTotalVoteWeight())
		uassert.Equal(t, delegateAmountFromAdminToAlice, GetTotalDelegated())
		uassert.Equal(t, delegateAmountFromAdminToAlice, GetTotalDelegatedFrom(adminAddr))
		uassert.Equal(t, delegateAmountFromAdminToAlice, GetTotalDelegatedTo(aliceAddr))
		uassert.Equal(t, delegateAmountFromAdminToAlice, GetDelegationAmountFromTo(adminAddr, aliceAddr))
		uassert.Equal(t, `{"delegationHistory":[{"to":"g1v9kxjcm9ta047h6lta047h6lta047h6lzd40gh","amount":"1000000","timestamp":"1234567892","height":"124","add":"true"}]}`, GetDelegationHistory(adminAddr))
	})

	t.Run("mock protocol fee test", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		bar.Transfer(protocolFeeAddr, 1000)
		qux.Transfer(protocolFeeAddr, 2500)

		std.TestSkipHeights(1)
		std.TestSetRealm(stakerRealm)
		// bar -> 1000 : ( reward/1staked = 1000 / 6 )
		pf.AddToProtocolFee(barPath, 1000)
		// qux -> 2500 : ( reward/1staked = 2500 / 6 )
		pf.AddToProtocolFee(quxPath, 2500)

		uassert.Equal(t, uint64(1000), bar.BalanceOf(protocolFeeAddr))
		uassert.Equal(t, uint64(2500), qux.BalanceOf(protocolFeeAddr))
		uassert.Equal(t, uint64(1000), pf.GetAmountOfToken(barPath))
		uassert.Equal(t, uint64(2500), pf.GetAmountOfToken(quxPath))
		uassert.Equal(t, `{"height":"125","now":"1234567894","gno.land/r/onbloc/bar":"1000","gno.land/r/onbloc/qux":"2500"}`,
			pf.ApiGetTokenListWithAmountOverZero())
		uassert.Equal(t, uint64(0), pf.GetAccuTransferToGovStakerByTokenPath(barPath))
		uassert.Equal(t, uint64(0), pf.GetAccuTransferToGovStakerByTokenPath(quxPath))
	})

	t.Run("delegate from bob to bob", func(t *testing.T) {
		std.TestSkipHeights(1)
		std.TestSetRealm(adminRealm)
		gns.Transfer(bobAddr, delegateAmountFromBobToBot)

		std.TestSetRealm(bobRealm)
		gns.Approve(govStakerAddr, delegateAmountFromBobToBot)
		// previous compute : protocolFee distribution
		// admin
		// - bar : 1000 / 1 * 1 = 1000
		// - qux : 2500 / 1 * 1 = 2500
		// Delegate : 5, total delegate : 6
		Delegate(bobAddr, delegateAmountFromBobToBot, "")

		uassert.Equal(t, delegateAmountFromAdminToAlice+delegateAmountFromBobToBot, GetTotalxGnsSupply())
		uassert.Equal(t, delegateAmountFromAdminToAlice+delegateAmountFromBobToBot, GetTotalVoteWeight())
		uassert.Equal(t, delegateAmountFromAdminToAlice+delegateAmountFromBobToBot, GetTotalDelegated())
		uassert.Equal(t, delegateAmountFromAdminToAlice, GetTotalDelegatedFrom(adminAddr))
		uassert.Equal(t, delegateAmountFromBobToBot, GetTotalDelegatedFrom(bobAddr))
		uassert.Equal(t, delegateAmountFromAdminToAlice, GetTotalDelegatedTo(aliceAddr))
		uassert.Equal(t, delegateAmountFromBobToBot, GetTotalDelegatedTo(bobAddr))
		uassert.Equal(t, delegateAmountFromAdminToAlice, GetDelegationAmountFromTo(adminAddr, aliceAddr))
		uassert.Equal(t, delegateAmountFromBobToBot, GetDelegationAmountFromTo(bobAddr, bobAddr))
		uassert.Equal(t, uint64(0), GetDelegationAmountFromTo(bobAddr, aliceAddr))
		uassert.Equal(t, `{"delegationHistory":[{"to":"g1vfhkyh6lta047h6lta047h6lta047h6l03vdhu","amount":"5000000","timestamp":"1234567896","height":"126","add":"true"}]}`, GetDelegationHistory(bobAddr))
	})

	t.Run("mock protocol fee test", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		bar.Transfer(protocolFeeAddr, 1000)
		qux.Transfer(protocolFeeAddr, 2500)

		std.TestSkipHeights(1)
		std.TestSetRealm(stakerRealm)
		// bar -> 1000 : ( reward/1staked = 1000 / 6 )
		pf.AddToProtocolFee(barPath, 1000)
		// qux -> 2500 : ( reward/1staked = 2500 / 6 )
		pf.AddToProtocolFee(quxPath, 2500)

		uassert.Equal(t, uint64(1000), bar.BalanceOf(protocolFeeAddr))
		uassert.Equal(t, uint64(2500), qux.BalanceOf(protocolFeeAddr))
		uassert.Equal(t, uint64(1000), pf.GetAmountOfToken(barPath))
		uassert.Equal(t, uint64(2500), pf.GetAmountOfToken(quxPath))
		uassert.Equal(t, `{"height":"127","now":"1234567898","gno.land/r/onbloc/bar":"1000","gno.land/r/onbloc/qux":"2500"}`,
			pf.ApiGetTokenListWithAmountOverZero())
		uassert.Equal(t, uint64(0), pf.GetAccuTransferToGovStakerByTokenPath(barPath))
		uassert.Equal(t, uint64(0), pf.GetAccuTransferToGovStakerByTokenPath(quxPath))
	})

	t.Run("skip dummy block test", func(t *testing.T) {
		std.TestSkipHeights(10)
		en.MintAndDistributeGns()

		uassert.Equal(t, uint64(1000), bar.BalanceOf(protocolFeeAddr))
		uassert.Equal(t, uint64(2500), qux.BalanceOf(protocolFeeAddr))
	})

	t.Run("check bob addr", func(t *testing.T) {
		gcr := GetClaimableRewardByAddress(bobAddr)
		// 1000 / 6 * 5 = 833
		// 2500 / 6 * 5 = 2083
		uassert.Equal(t, `{"height":"137","now":"1234567918","emissionReward":"0","protocolFees":[{"tokenPath":"gno.land/r/onbloc/bar","amount":"833"},{"tokenPath":"gno.land/r/onbloc/qux","amount":"2083"}]}`,
			gcr)
	})

	t.Run("check admin addr", func(t *testing.T) {
		gcr := GetClaimableRewardByAddress(adminAddr)
		// 1000 + (1000 / 6 * 1 = 166)
		// 2500 + (2500 / 6 * 1 = 416)
		uassert.Equal(t, `{"height":"137","now":"1234567918","emissionReward":"0","protocolFees":[{"tokenPath":"gno.land/r/onbloc/bar","amount":"1166"},{"tokenPath":"gno.land/r/onbloc/qux","amount":"2916"}]}`,
			gcr)
	})

	t.Run("collect reward - bob", func(t *testing.T) {
		// protocol fee has bar, qux
		uassert.Equal(t, uint64(0), bar.BalanceOf(bobAddr))
		uassert.Equal(t, uint64(0), qux.BalanceOf(bobAddr))

		std.TestSetRealm(bobRealm)
		CollectReward()

		uassert.Equal(t, uint64(833), bar.BalanceOf(bobAddr))
		uassert.Equal(t, uint64(2083), qux.BalanceOf(bobAddr))
	})

	t.Run("same block - should not duplicated deduct reward", func(t *testing.T) {
		uassert.Equal(t, uint64(833), bar.BalanceOf(bobAddr))
		uassert.Equal(t, uint64(2083), qux.BalanceOf(bobAddr))

		std.TestSetRealm(bobRealm)
		CollectReward()

		uassert.Equal(t, uint64(833), bar.BalanceOf(bobAddr))
		uassert.Equal(t, uint64(2083), qux.BalanceOf(bobAddr))
	})

	t.Run("collect reward - admin", func(t *testing.T) {
		beforeBarBalance := bar.BalanceOf(adminAddr)
		beforeQuxBalance := qux.BalanceOf(adminAddr)

		std.TestSetRealm(adminRealm)
		CollectReward()

		uassert.Equal(t, uint64(1166), bar.BalanceOf(adminAddr)-beforeBarBalance)
		uassert.Equal(t, uint64(2916), qux.BalanceOf(adminAddr)-beforeQuxBalance)
	})
}
