package staker

import (
	"std"
	"testing"

	"gno.land/p/demo/testutils"
	"gno.land/p/demo/uassert"

	"gno.land/r/demo/wugnot"

	"gno.land/r/gnoswap/v1/gns"
	"gno.land/r/gnoswap/v1/gov/xgns"

	en "gno.land/r/gnoswap/v1/emission"

	"gno.land/p/gnoswap/consts"

	// grc20 tokens
	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/qux"

	pf "gno.land/r/gnoswap/v1/protocol_fee"
)

var (
	dummyToAddr = testutils.TestAddress("dummyTo")
	dummyAddr   = testutils.TestAddress("dummy")
	dummyRealm  = std.NewUserRealm(dummyAddr)
)

func TestGovernanceRewardProtocolFee(t *testing.T) {
	initData(t)
	delegateFromAdminToDummy(t)
	delegetFromDummyToDummy(t)
	mockProtocolFee(t)
	skipDummyBlocks(t)
	reward(t)
	mockProtocolFee2(t)
	moreReward(t)
	undelegateAdmin(t)
}

func initData(t *testing.T) {
	// prevent `panic: source address g1pf6dv9fjk3rn0m4jjcne306ga4he3mzmupfjl6 does not exist`
	testing.IssueCoins(consts.WUGNOT_ADDR, std.Coins{{"ugnot", 1}})
}

func delegateFromAdminToDummy(t *testing.T) {
	testing.SetRealm(adminRealm)

	// gns before emission
	uassert.Equal(t, gns.BalanceOf(stakerAddr), uint64(0))
	uassert.Equal(t, gns.BalanceOf(devOpsAddr), uint64(0))
	uassert.Equal(t, gns.BalanceOf(communityPoolAddr), uint64(0))
	uassert.Equal(t, gns.BalanceOf(govStakerAddr), uint64(0))

	testing.SkipHeights(1)
	gns.Approve(govStakerAddr, uint64(1000000))
	Delegate(dummyToAddr, 1000000, "")

	// gns emission after adjustment & delegate
	// 1 block gns 14269406
	// 75% ≈ 10702054.5
	// 20% ≈ 2853881.2
	// 5% ≈ 713470.3

	uassert.Equal(t, gns.BalanceOf(stakerAddr), uint64(10702054))
	uassert.Equal(t, gns.BalanceOf(devOpsAddr), uint64(2853881))
	uassert.Equal(t, gns.BalanceOf(communityPoolAddr), uint64(713470))
	uassert.Equal(t, gns.BalanceOf(govStakerAddr), uint64(1000000))
	uassert.Equal(t, gns.BalanceOf(govStakerAddr)-xgns.TotalSupply(), uint64(0))
}

func delegetFromDummyToDummy(t *testing.T) {
	testing.SetRealm(adminRealm)
	gns.Transfer(dummyAddr, 5000000)

	testing.SkipHeights(1)
	testing.SetRealm(dummyRealm)
	gns.Approve(govStakerAddr, uint64(5000000))
	Delegate(dummyAddr, 5000000, "")

	uassert.Equal(t, gns.BalanceOf(stakerAddr), uint64(21404109))
	uassert.Equal(t, gns.BalanceOf(devOpsAddr), uint64(5707762))
	uassert.Equal(t, gns.BalanceOf(communityPoolAddr), uint64(1426940))
	uassert.Equal(t, gns.BalanceOf(govStakerAddr), uint64(6000000))
	uassert.Equal(t, gns.BalanceOf(govStakerAddr)-xgns.TotalSupply(), uint64(0))
}

func mockProtocolFee(t *testing.T) {
	// admin > protocol_fee
	// send qux, bar for testing
	testing.SetRealm(adminRealm)
	bar.Transfer(protocolFeeAddr, 1000)
	qux.Transfer(protocolFeeAddr, 2500)

	// wugnot
	testing.SetOriginSend(std.Coins{{"ugnot", 10000}})
	testing.IssueCoins(consts.WUGNOT_ADDR, std.Coins{{"ugnot", 10000}})
	cross(wugnot.Deposit)()
	cross(wugnot.Transfer)(protocolFeeAddr, 10000)

	testing.SetRealm(stakerRealm)
	pf.AddToProtocolFee(barPath, 1000)
	pf.AddToProtocolFee(quxPath, 2500)
	pf.AddToProtocolFee(wugnotPath, 10000)

	uassert.Equal(t, bar.BalanceOf(protocolFeeAddr), uint64(1000))
	uassert.Equal(t, bar.BalanceOf(devOpsAddr), uint64(0))
	uassert.Equal(t, bar.BalanceOf(govStakerAddr), uint64(0))

	uassert.Equal(t, qux.BalanceOf(protocolFeeAddr), uint64(2500))
	uassert.Equal(t, qux.BalanceOf(devOpsAddr), uint64(0))
	uassert.Equal(t, qux.BalanceOf(govStakerAddr), uint64(0))

	uassert.Equal(t, cross(wugnot.BalanceOf)(protocolFeeAddr), uint64(10000))
	uassert.Equal(t, cross(wugnot.BalanceOf)(devOpsAddr), uint64(0))
	uassert.Equal(t, cross(wugnot.BalanceOf)(govStakerAddr), uint64(0))
}

func skipDummyBlocks(t *testing.T) {
	testing.SkipHeights(10)
	en.MintAndDistributeGns()
	testing.SkipHeights(1)

	uassert.Equal(t, bar.BalanceOf(protocolFeeAddr), uint64(1000))
	uassert.Equal(t, bar.BalanceOf(devOpsAddr), uint64(0))
	uassert.Equal(t, bar.BalanceOf(govStakerAddr), uint64(0))

	uassert.Equal(t, qux.BalanceOf(protocolFeeAddr), uint64(2500))
	uassert.Equal(t, qux.BalanceOf(devOpsAddr), uint64(0))
	uassert.Equal(t, qux.BalanceOf(govStakerAddr), uint64(0))
}

func reward(t *testing.T) {
	t.Run("check reward", func(t *testing.T) {
		gcr := GetClaimableRewardByAddress(dummyAddr)
		uassert.Equal(t, gcr, `{"height":"136","now":"1234567955","emissionReward":"0","protocolFees":[{"tokenPath":"gno.land/r/demo/wugnot","amount":"8333"},{"tokenPath":"gno.land/r/onbloc/bar","amount":"833"},{"tokenPath":"gno.land/r/onbloc/qux","amount":"2083"}]}`)
	})

	t.Run("collect reward", func(t *testing.T) {
		uassert.Equal(t, bar.BalanceOf(dummyAddr), uint64(0))
		uassert.Equal(t, qux.BalanceOf(dummyAddr), uint64(0))
		uassert.Equal(t, ugnotBalanceOf(t, dummyAddr), uint64(0))

		testing.SetRealm(dummyRealm)
		CollectReward()
		uassert.Equal(t, bar.BalanceOf(dummyAddr), uint64(833))
		uassert.Equal(t, qux.BalanceOf(dummyAddr), uint64(2083))
		uassert.Equal(t, ugnotBalanceOf(t, dummyAddr), uint64(8333))
	})

	t.Run("same block", func(t *testing.T) {
		testing.SetRealm(dummyRealm)
		CollectReward()

		uassert.Equal(t, bar.BalanceOf(dummyAddr), uint64(833))
		uassert.Equal(t, qux.BalanceOf(dummyAddr), uint64(2083))
		uassert.Equal(t, ugnotBalanceOf(t, dummyAddr), uint64(8333))
	})

	t.Run("more block", func(t *testing.T) {
		testing.SkipHeights(1)
		CollectReward() // even more block, protocol_fee didn't increase

		uassert.Equal(t, bar.BalanceOf(dummyAddr), uint64(833))
		uassert.Equal(t, qux.BalanceOf(dummyAddr), uint64(2083))
		uassert.Equal(t, ugnotBalanceOf(t, dummyAddr), uint64(8333))
	})
}

func mockProtocolFee2(t *testing.T) {
	// admin > protocol_fee
	// send qux, bar for testing
	uassert.Equal(t, bar.BalanceOf(protocolFeeAddr), uint64(0))
	uassert.Equal(t, bar.BalanceOf(devOpsAddr), uint64(0))
	uassert.Equal(t, bar.BalanceOf(govStakerAddr), uint64(167))

	uassert.Equal(t, qux.BalanceOf(protocolFeeAddr), uint64(0))
	uassert.Equal(t, qux.BalanceOf(devOpsAddr), uint64(0))
	uassert.Equal(t, qux.BalanceOf(govStakerAddr), uint64(417))

	testing.SetRealm(adminRealm)
	bar.Transfer(protocolFeeAddr, 2500)
	qux.Transfer(protocolFeeAddr, 4000)
	testing.SetRealm(stakerRealm)
	pf.AddToProtocolFee(barPath, 2500)
	pf.AddToProtocolFee(quxPath, 4000)
	testing.SkipHeights(1)

	uassert.Equal(t, bar.BalanceOf(protocolFeeAddr), uint64(2500))
	uassert.Equal(t, bar.BalanceOf(devOpsAddr), uint64(0))
	uassert.Equal(t, bar.BalanceOf(govStakerAddr), uint64(167))

	uassert.Equal(t, qux.BalanceOf(protocolFeeAddr), uint64(4000))
	uassert.Equal(t, qux.BalanceOf(devOpsAddr), uint64(0))
	uassert.Equal(t, qux.BalanceOf(govStakerAddr), uint64(417))
}

func moreReward(t *testing.T) {
	testing.SkipHeights(1)
	testing.SetRealm(dummyRealm)

	uassert.Equal(t, bar.BalanceOf(dummyAddr), uint64(833))
	uassert.Equal(t, qux.BalanceOf(dummyAddr), uint64(2083))

	CollectReward()

	uassert.Equal(t, bar.BalanceOf(dummyAddr), uint64(2916))
	uassert.Equal(t, qux.BalanceOf(dummyAddr), uint64(5416))
}

func undelegateAdmin(t *testing.T) {
	testing.SetRealm(adminRealm)

	uassert.Equal(t, bar.BalanceOf(admin), uint64(99999999996500))
	uassert.Equal(t, qux.BalanceOf(admin), uint64(99999999993500))

	Undelegate(dummyToAddr, 1000000)
}
