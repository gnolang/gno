package governance

import (
	"std"
	"strconv"
	"testing"
	"time"

	"gno.land/p/demo/testutils"
	"gno.land/p/demo/uassert"

	"gno.land/r/gnoswap/v1/gns"

	gs "gno.land/r/gnoswap/v1/gov/staker"
	"gno.land/r/gnoswap/v1/gov/xgns"
)

var (
	dummyAddr  = testutils.TestAddress("dummyAddr")
	dummyRealm = std.NewUserRealm(dummyAddr)
)

func init() {
	// overwrite config for testcase
	config = Config{
		VotingStartDelay:              uint64(10),   // 10s ≈ 5 block
		VotingPeriod:                  uint64(30),   // 30s ≈ 15 block
		VotingWeightSmoothingDuration: uint64(10),   // 10s ≈ 5 block
		Quorum:                        uint64(50),   // 50% of total xGNS supply
		ProposalCreationThreshold:     uint64(100),  //
		ExecutionDelay:                uint64(10),   // 10s ≈ 5 block
		ExecutionWindow:               uint64(1000), // 500 block
	}
	setConfigVersion(1, config)
}

func TestProposeText(t *testing.T) {
	testDelegate01_1000000_toSelf(t)
	testDelegate02_2000000_toDummy(t)
	testUndelegate_1000000_fromDummy(t)
	testProposeText(t)
	testVote(t)
}

func testDelegate01_1000000_toSelf(t *testing.T) {
	t.Run("first delegation", func(t *testing.T) {
		// before delegate
		uassert.Equal(t, xgns.TotalSupply(), uint64(0))
		uassert.Equal(t, xgns.VotingSupply(), uint64(0))

		std.TestSetRealm(adminRealm)
		gns.Approve(govStakerAddr, uint64(1_000_000))

		uassert.Equal(t, int64(123), std.ChainHeight())
		uassert.Equal(t, int64(1234567890), time.Now().Unix())

		gs.Delegate(admin, uint64(1_000_000), "") // self delegate

		// after delegate 01
		uassert.Equal(t, xgns.TotalSupply(), uint64(1_000_000))
		uassert.Equal(t, xgns.VotingSupply(), uint64(1_000_000))

		std.TestSkipHeights(1)
	})
}

func testDelegate02_2000000_toDummy(t *testing.T) {
	t.Run("first delegation", func(t *testing.T) {
		// before delegate 02
		uassert.Equal(t, xgns.TotalSupply(), uint64(1_000_000))
		uassert.Equal(t, xgns.VotingSupply(), uint64(1_000_000))

		std.TestSetRealm(adminRealm)
		gns.Approve(govStakerAddr, uint64(2_000_000))

		uassert.Equal(t, int64(124), std.ChainHeight())
		uassert.Equal(t, int64(1234567892), time.Now().Unix())

		gs.Delegate(dummyAddr, uint64(2_000_000), "") // delegate to dummy

		// after delegate 02
		uassert.Equal(t, xgns.TotalSupply(), uint64(3_000_000))
		uassert.Equal(t, xgns.VotingSupply(), uint64(3_000_000))

		std.TestSkipHeights(1)
	})
}

func testUndelegate_1000000_fromDummy(t *testing.T) {
	t.Run("undelegate from dummyAddr by admin", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		std.TestSkipHeights(1)

		uassert.Equal(t, int64(126), std.ChainHeight())
		uassert.Equal(t, int64(1234567896), time.Now().Unix())

		gs.Undelegate(dummyAddr, uint64(1_000_000)) // 1000000

		// after undelegate 01
		uassert.Equal(t, xgns.TotalSupply(), uint64(2_000_000))  // 2000000
		uassert.Equal(t, xgns.VotingSupply(), uint64(2_000_000)) // 2000000

		std.TestSkipHeights(1)
	})
}

func testProposeText(t *testing.T) {
	t.Run("Successful two text proposals ", func(t *testing.T) {
		t.Run("text proposal 01 // only 4 block passed", func(t *testing.T) {
			// text proposal
			uassert.Equal(t, int64(127), std.ChainHeight())
			uassert.Equal(t, int64(1234567898), time.Now().Unix())

			std.TestSetRealm(adminRealm)
			proposalID := ProposeText("test_title", "test_description")
			uassert.Equal(t, proposalID, uint64(1))

			pp, ok := proposals.Get(strconv.FormatUint(proposalID, 10))
			uassert.True(t, ok)
			proposal := pp.(ProposalInfo)
			uassert.Equal(t, proposal.QuorumAmount, uint64(0))

			maxVotingWeight, _ := gs.GetPossibleVotingAddressWithWeight(proposal.State.CreatedAt - config.VotingWeightSmoothingDuration)
			// config.VotingWeightSmoothingDuration = 10s = 5 block

			uassert.Equal(t, maxVotingWeight, uint64(0))
			// createdAt > 127 // 1234567898
			// (createdAt - VotingWeightSmoothingDuration) > 122 // 1234567888
			// no delegation happend until block 122
		})

		t.Run("text proposal 02 // 6 more block passed(total 10)", func(t *testing.T) {
			std.TestSkipHeights(6)

			// text proposal
			uassert.Equal(t, int64(133), std.ChainHeight())
			uassert.Equal(t, int64(1234567910), time.Now().Unix())

			std.TestSetRealm(adminRealm)
			proposalID := ProposeText("test_title", "test_description")
			uassert.Equal(t, proposalID, uint64(2))

			pp, ok := proposals.Get(strconv.FormatUint(proposalID, 10))
			uassert.True(t, ok)
			proposal := pp.(ProposalInfo)
			uassert.Equal(t, proposal.QuorumAmount, uint64(1_000_000)) // 50% of voting xGNS supply

			maxVotingWeight, _ := gs.GetPossibleVotingAddressWithWeight(proposal.State.CreatedAt - config.VotingWeightSmoothingDuration)
			// config.VotingWeightSmoothingDuration = 10s = 5 block

			uassert.Equal(t, maxVotingWeight, uint64(2_000_000))
			// createdAt > 133 // 1234567910
			// (createdAt - VotingWeightSmoothingDuration) > 128 // 1234567900
			// 2 delegation happend
			// - 123 block = 1_000_000
			// - 124 block = 2_000_000
			// 1 undelegate happend
			// - 126 block = 1_000_000
		})
	})
}

func testVote(t *testing.T) {
	t.Run("vote (undelegated after propose, before vote)", func(t *testing.T) {
		proposalId := uint64(2)
		std.TestSkipHeights(5)

		std.TestSetRealm(dummyRealm)
		Vote(proposalId, true)

		pp, ok := proposals.Get(strconv.FormatUint(proposalId, 10))
		uassert.True(t, ok)
		proposal := pp.(ProposalInfo)
		uassert.Equal(t, "1000000", proposal.Yea.ToString()) // 1000000
		uassert.Equal(t, "0", proposal.Nay.ToString())
	})
}
