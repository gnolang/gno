package governance

import (
	"std"
	"strconv"
	"testing"
	"time"

	"gno.land/p/demo/testutils"
	"gno.land/p/demo/uassert"

	"gno.land/r/gnoswap/v1/gns"

	gs "gno.land/r/gnoswap/v1/gov/staker"
	"gno.land/r/gnoswap/v1/gov/xgns"
)

func init() {
	// overwrite config for testcase
	config = Config{
		VotingStartDelay:              uint64(10),   // 10s ≈ 5 block
		VotingPeriod:                  uint64(30),   // 30s ≈ 15 block
		VotingWeightSmoothingDuration: uint64(10),   // 10s ≈ 5 block
		Quorum:                        uint64(50),   // 50% of total xGNS supply
		ProposalCreationThreshold:     uint64(100),  //
		ExecutionDelay:                uint64(10),   // 10s ≈ 5 block
		ExecutionWindow:               uint64(1000), // 500 block
	}
	setConfigVersion(1, config)
}

func TestProposeText(t *testing.T) {
	proposeText(t)
	vote(t)
}

func proposeText(t *testing.T) {
	t.Run("ProposeText with insufficient delegation", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		uassert.PanicsWithMessage(t,
			"[GNOSWAP-GOVERNANCE-004] not enough balance || proposer(g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d) has not enough xGNS, balance(0), wanted(100)",
			func() {
				ProposeText("title", "text")
			})
	})

	t.Run("Successful text proposal", func(t *testing.T) {
		dummyAddr := testutils.TestAddress("dummyAddr")

		proposalsJson := GetProposals()
		uassert.Equal(t, proposalsJson, ``)

		std.TestSetRealm(adminRealm)

		// before delegate
		uassert.Equal(t, xgns.TotalSupply(), uint64(0))
		uassert.Equal(t, xgns.VotingSupply(), uint64(0))

		gns.Approve(govStakerAddr, uint64(1_000_000))
		gs.Delegate(admin, uint64(1_000_000), "") // self delegate
		uassert.Equal(t, int64(123), std.ChainHeight())
		std.TestSkipHeights(1)

		// after delegate 01
		uassert.Equal(t, xgns.TotalSupply(), uint64(1_000_000))
		uassert.Equal(t, xgns.VotingSupply(), uint64(1_000_000))

		gns.Approve(govStakerAddr, uint64(2_000_000))
		gs.Delegate(dummyAddr, uint64(2_000_000), "") // delegate to dummy
		uassert.Equal(t, int64(124), std.ChainHeight())
		std.TestSkipHeights(1)

		// after delegate 02
		uassert.Equal(t, xgns.TotalSupply(), uint64(3_000_000))
		uassert.Equal(t, xgns.VotingSupply(), uint64(3_000_000))

		t.Run("text proposal -- only 2 block passed", func(t *testing.T) {
			// text proposal
			uassert.Equal(t, int64(125), std.ChainHeight())
			uassert.Equal(t, int64(1234567894), time.Now().Unix())
			proposalID := ProposeText("test_title", "test_description")
			uassert.Equal(t, proposalID, uint64(1))

			votesJsonAdmin := GetVotesByAddress(admin)
			uassert.Equal(t, votesJsonAdmin, `{"height":"125","now":"1234567894","votes":[]}`)

			votesJsonDummy := GetVotesByAddress(dummyAddr)
			uassert.Equal(t, votesJsonDummy, `{"height":"125","now":"1234567894","votes":[]}`)

			// proposal := proposals[proposalID]
			pp, ok := proposals.Get(strconv.FormatUint(proposalID, 10))
			uassert.True(t, ok)
			proposal := pp.(ProposalInfo)

			uassert.Equal(t, proposal.QuorumAmount, uint64(0)) // 50% of voting xGNS supply

			maxVotingWeight, _ := gs.GetPossibleVotingAddressWithWeight(proposal.State.CreatedAt - config.VotingWeightSmoothingDuration)
			// config.VotingWeightSmoothingDuration = 10s = 5 block

			uassert.Equal(t, maxVotingWeight, uint64(0))
			// createdAt > 125 // 1234567894
			// (createdAt - VotingWeightSmoothingDuration) > 120 // 1234567884
			// no delegation happend until block 120
		})

		t.Run("text proposal // 5 more block passed(total 7)", func(t *testing.T) {
			std.TestSkipHeights(5)

			// text proposal
			uassert.Equal(t, int64(130), std.ChainHeight())
			uassert.Equal(t, int64(1234567904), time.Now().Unix())
			proposalID := ProposeText("test_title", "test_description")
			uassert.Equal(t, proposalID, uint64(2))

			proposalsJson = GetProposals()
			uassert.Equal(t, proposalsJson, `{"height":"130","now":"1234567904","proposals":[{"id":"2","configVersion":"1","proposer":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","status":"eyJjcmVhdGVkQXQiOiIxMjM0NTY3OTA0IiwidXBjb21pbmciOiJ0cnVlIiwiYWN0aXZlIjoiZmFsc2UiLCJ2b3RpbmdTdGFydCI6IjEyMzQ1Njc5MTQiLCJ2b3RpbmdFbmQiOiIxMjM0NTY3OTQ0IiwicGFzc2VkIjoiZmFsc2UiLCJwYXNzZWRBdCI6IjAiLCJyZWplY3RlZCI6ImZhbHNlIiwicmVqZWN0ZWRBdCI6IjAiLCJjYW5jZWxlZCI6ImZhbHNlIiwiY2FuY2VsZWRBdCI6IjAiLCJleGVjdXRlZCI6ImZhbHNlIiwiZXhlY3V0ZWRBdCI6IjAiLCJleHBpcmVkIjoiZmFsc2UiLCJleHBpcmVkQXQiOiIwIn0=","type":"TEXT","title":"test_title","description":"test_description","vote":"eyJxdW9ydW0iOiIxNTAwMDAwIiwibWF4IjoiMzAwMDAwMCIsInllcyI6IjAiLCJubyI6IjAifQ==","extra":""},{"id":"2","configVersion":"1","proposer":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","status":"eyJjcmVhdGVkQXQiOiIxMjM0NTY3OTA0IiwidXBjb21pbmciOiJ0cnVlIiwiYWN0aXZlIjoiZmFsc2UiLCJ2b3RpbmdTdGFydCI6IjEyMzQ1Njc5MTQiLCJ2b3RpbmdFbmQiOiIxMjM0NTY3OTQ0IiwicGFzc2VkIjoiZmFsc2UiLCJwYXNzZWRBdCI6IjAiLCJyZWplY3RlZCI6ImZhbHNlIiwicmVqZWN0ZWRBdCI6IjAiLCJjYW5jZWxlZCI6ImZhbHNlIiwiY2FuY2VsZWRBdCI6IjAiLCJleGVjdXRlZCI6ImZhbHNlIiwiZXhlY3V0ZWRBdCI6IjAiLCJleHBpcmVkIjoiZmFsc2UiLCJleHBpcmVkQXQiOiIwIn0=","type":"TEXT","title":"test_title","description":"test_description","vote":"eyJxdW9ydW0iOiIxNTAwMDAwIiwibWF4IjoiMzAwMDAwMCIsInllcyI6IjAiLCJubyI6IjAifQ==","extra":""}]}`)

			votesJsonAdmin := GetVotesByAddress(admin)
			uassert.Equal(t, votesJsonAdmin, `{"height":"130","now":"1234567904","votes":[]}`)

			votesJsonDummy := GetVotesByAddress(dummyAddr)
			uassert.Equal(t, votesJsonDummy, `{"height":"130","now":"1234567904","votes":[]}`)

			// proposal := proposals[proposalID]
			pp, _ := proposals.Get(strconv.FormatUint(proposalID, 10))
			proposal := pp.(ProposalInfo)
			uassert.Equal(t, proposal.QuorumAmount, uint64(1_500_000)) // 50% of voting xGNS supply

			maxVotingWeight, _ := gs.GetPossibleVotingAddressWithWeight(proposal.State.CreatedAt - config.VotingWeightSmoothingDuration)
			// config.VotingWeightSmoothingDuration = 10s = 5 block

			uassert.Equal(t, maxVotingWeight, uint64(3000000))
			// createdAt > 130 // 1234567904
			// (createdAt - VotingWeightSmoothingDuration) > 125 // 1234567899
			// 2 delegation happend
			// - 123 block = 1_000_000
			// - 124 block = 2_000_000
		})
	})
}

func vote(t *testing.T) {
	dummyAddr := testutils.TestAddress("dummyAddr")
	dummyRealm := std.NewUserRealm(dummyAddr)

	t.Run("Vote non existent proposal", func(t *testing.T) {
		std.TestSetRealm(dummyRealm)
		uassert.PanicsWithMessage(t,
			"[GNOSWAP-GOVERNANCE-003] requested data not found || proposalId(123) not found",
			func() {
				Vote(uint64(123), true)
			})
	})

	t.Run("vote with only delegated", func(t *testing.T) {
		proposalId := uint64(2)

		std.TestSkipHeights(11)
		std.TestSetRealm(dummyRealm)
		Vote(proposalId, true)

		pp, _ := proposals.Get(strconv.FormatUint(proposalId, 10))
		proposal := pp.(ProposalInfo)
		uassert.Equal(t, "2000000", proposal.Yea.ToString())
		uassert.Equal(t, "0", proposal.Nay.ToString())

		state := proposal.State
		uassert.Equal(t, false, state.Upcoming)
		uassert.Equal(t, true, state.Active)

		proposalsJson := GetProposals()
		uassert.Equal(t, proposalsJson, `{"height":"141","now":"1234567926","proposals":[{"id":"2","configVersion":"1","proposer":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","status":"eyJjcmVhdGVkQXQiOiIxMjM0NTY3OTA0IiwidXBjb21pbmciOiJmYWxzZSIsImFjdGl2ZSI6InRydWUiLCJ2b3RpbmdTdGFydCI6IjEyMzQ1Njc5MTQiLCJ2b3RpbmdFbmQiOiIxMjM0NTY3OTQ0IiwicGFzc2VkIjoiZmFsc2UiLCJwYXNzZWRBdCI6IjAiLCJyZWplY3RlZCI6ImZhbHNlIiwicmVqZWN0ZWRBdCI6IjAiLCJjYW5jZWxlZCI6ImZhbHNlIiwiY2FuY2VsZWRBdCI6IjAiLCJleGVjdXRlZCI6ImZhbHNlIiwiZXhlY3V0ZWRBdCI6IjAiLCJleHBpcmVkIjoiZmFsc2UiLCJleHBpcmVkQXQiOiIwIn0=","type":"TEXT","title":"test_title","description":"test_description","vote":"eyJxdW9ydW0iOiIxNTAwMDAwIiwibWF4IjoiMzAwMDAwMCIsInllcyI6IjIwMDAwMDAiLCJubyI6IjAifQ==","extra":""},{"id":"2","configVersion":"1","proposer":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","status":"eyJjcmVhdGVkQXQiOiIxMjM0NTY3OTA0IiwidXBjb21pbmciOiJmYWxzZSIsImFjdGl2ZSI6InRydWUiLCJ2b3RpbmdTdGFydCI6IjEyMzQ1Njc5MTQiLCJ2b3RpbmdFbmQiOiIxMjM0NTY3OTQ0IiwicGFzc2VkIjoiZmFsc2UiLCJwYXNzZWRBdCI6IjAiLCJyZWplY3RlZCI6ImZhbHNlIiwicmVqZWN0ZWRBdCI6IjAiLCJjYW5jZWxlZCI6ImZhbHNlIiwiY2FuY2VsZWRBdCI6IjAiLCJleGVjdXRlZCI6ImZhbHNlIiwiZXhlY3V0ZWRBdCI6IjAiLCJleHBpcmVkIjoiZmFsc2UiLCJleHBpcmVkQXQiOiIwIn0=","type":"TEXT","title":"test_title","description":"test_description","vote":"eyJxdW9ydW0iOiIxNTAwMDAwIiwibWF4IjoiMzAwMDAwMCIsInllcyI6IjIwMDAwMDAiLCJubyI6IjAifQ==","extra":""}]}`)
	})
}
