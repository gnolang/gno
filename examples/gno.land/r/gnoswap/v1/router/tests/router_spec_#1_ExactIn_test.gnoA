package router

import (
	"std"
	"testing"
	"time"

	"gno.land/p/demo/uassert"

	"gno.land/p/gnoswap/consts"

	pl "gno.land/r/gnoswap/v1/pool"
	pn "gno.land/r/gnoswap/v1/position"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/baz"

	"gno.land/r/gnoswap/v1/gns"
)

func TestcreatePool(t *testing.T) {
	std.TestSetRealm(adminRealm)

	gns.Approve(consts.POOL_ADDR, pl.GetPoolCreationFee())
	pl.CreatePool(barPath, bazPath, FEE_MEDIUM, "79228162514264337593543950336")

	bar.Transfer(user1Addr, 10000)
}

func TestPositionMint(t *testing.T) {
	// bar_baz_3000 by admin
	std.TestSetRealm(adminRealm)
	bar.Approve(consts.POOL_ADDR, 100000000)
	baz.Approve(consts.POOL_ADDR, 100000000)

	// Mint
	tokenId, liquidity, amount0, amount1 := pn.Mint(barPath, bazPath, FEE_MEDIUM, int32(-887220), int32(887220), "100000000", "100000000", "0", "0", max_timeout, adminAddr, adminAddr)

	uassert.Equal(t, tokenId, uint64(1))
	uassert.Equal(t, amount0, "100000000")
	uassert.Equal(t, amount1, "100000000")

	pool := pl.GetPool(barPath, bazPath, FEE_MEDIUM)
	poolLiq := pool.Liquidity()
	uassert.Equal(t, poolLiq.ToString(), "100000000")

	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:3000"
	poolTick := pl.PoolGetSlot0Tick(poolPath)
	// uassert.Equal(t, poolTick, int32(0)) // got -1, expected 0
}

func TestExactInputSinglePool(t *testing.T) {
	// 0 -> 1
	pool := pl.GetPool(barPath, bazPath, FEE_MEDIUM)
	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:3000"

	user1Realm := std.NewUserRealm(user1Addr)
	std.TestSetRealm(user1Realm)

	bar.Approve(consts.POOL_ADDR, consts.UINT64_MAX)
	baz.Approve(consts.ROUTER_ADDR, consts.UINT64_MAX)

	poolToken0Before := bar.BalanceOf(consts.POOL_ADDR)
	poolToken1Before := baz.BalanceOf(consts.POOL_ADDR)

	user1Token0Before := bar.BalanceOf(user1Addr)
	user1Token1Before := baz.BalanceOf(user1Addr)

	// set router protocol fee to 0%
	swapFee = uint64(0)

	amountIn, amountOut := ExactInSwapRoute(
		barPath,  // inputToken
		bazPath,  // outputToken
		"3",      // amountSpecified
		poolPath, // strRouteArr
		"100",    // quoteArr
		"1",      // tokenAmountLimit
		time.Now().Add(time.Hour).Unix(),
	)

	uassert.Equal(t, amountIn, "3")
	uassert.Equal(t, amountOut, "-1")

	poolToken0After := bar.BalanceOf(consts.POOL_ADDR)
	poolToken1After := baz.BalanceOf(consts.POOL_ADDR)

	user1Token0After := bar.BalanceOf(user1Addr)
	user1Token1After := baz.BalanceOf(user1Addr)

	uassert.Equal(t, user1Token0After, user1Token0Before-3)
	uassert.Equal(t, user1Token1After, user1Token1Before+1)
	uassert.Equal(t, poolToken0After, poolToken0Before+3)
	uassert.Equal(t, poolToken1After, poolToken1Before-1)
}
