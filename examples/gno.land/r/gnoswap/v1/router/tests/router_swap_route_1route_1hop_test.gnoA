package router

import (
	"std"
	"testing"
	"time"

	"gno.land/p/demo/uassert"

	"gno.land/p/gnoswap/consts"

	pl "gno.land/r/gnoswap/v1/pool"
	pn "gno.land/r/gnoswap/v1/position"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/baz"

	"gno.land/r/gnoswap/v1/gns"
)

func TestCreatePool(t *testing.T) {
	std.TestSetRealm(adminRealm)

	gns.Approve(consts.POOL_ADDR, pl.GetPoolCreationFee())
	pl.CreatePool(barPath, bazPath, fee500, "130621891405341611593710811006") // tick =  10_000, ratio = 2.71814592682522526700950038502924144268035888671875

	// jsonOutput := pl.ApiGetPools()
	// jsonStr := gjson.Parse(jsonOutput)
	// uassert.Equal(t, len(jsonStr.Get("response").Array()), 1)
}

func TestPositionMint(t *testing.T) {
	// bar_baz_500 by admin
	std.TestSetRealm(adminRealm)
	bar.Approve(consts.POOL_ADDR, 36790)
	baz.Approve(consts.POOL_ADDR, 100000)

	// Mint
	tokenId, liquidity, amount0, amount1 := pn.Mint(barPath, bazPath, fee500, int32(9000), int32(11000), "100000", "100000", "0", "0", max_timeout, adminAddr, adminAddr)

	uassert.Equal(t, tokenId, uint64(1))
	uassert.Equal(t, amount0, "36790")
	uassert.Equal(t, amount1, "100000")
}

func TestDrySwapRouteBarBazExactIn(t *testing.T) {
	std.TestSetRealm(adminRealm)

	dryResult := DrySwapRoute(
		barPath,    // inputToken
		bazPath,    // outputToken
		"1000",     // amountSpecified
		"EXACT_IN", // swapType
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500", // strRouteArr
		"100", // quoteArr
		"1",
	)

	uassert.Equal(t, dryResult, "2711")
}

func TestSwapRouteBarBazExactIn(t *testing.T) {
	std.TestSetRealm(adminRealm)

	bar.Approve(consts.POOL_ADDR, uint64(1000))
	baz.Approve(consts.ROUTER_ADDR, consts.UINT64_MAX) // ITS FOR 0.15% fee

	amountIn, amountOut := ExactInSwapRoute(
		barPath, // inputToken
		bazPath, // outputToken
		"1000",  // amountSpecified
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500", // strRouteArr
		"100",  // quoteArr
		"2700", // tokenAmountLimit
		time.Now().Add(time.Hour).Unix(),
	)

	uassert.Equal(t, amountIn, "1000")
	uassert.Equal(t, amountOut, "-2707")
}

func TestSwapRouteBarBazExactOut(t *testing.T) {
	std.TestSetRealm(adminRealm)

	bar.Approve(consts.POOL_ADDR, uint64(1000))
	baz.Approve(consts.ROUTER_ADDR, consts.UINT64_MAX) // ITS FOR 0.15% fee

	amountIn, amountOut := ExactOutSwapRoute(
		barPath, // inputToken
		bazPath, // outputToken
		"1000",  // amountSpecified
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500", // strRouteArr
		"100", // quoteArr
		"371", // tokenAmountLimit
		time.Now().Add(time.Hour).Unix(),
	)

	uassert.Equal(t, amountIn, "371")
	uassert.Equal(t, amountOut, "-999")
}

func TestSwapRouteBazBarExactIn(t *testing.T) {
	std.TestSetRealm(adminRealm)

	baz.Approve(consts.POOL_ADDR, consts.UINT64_MAX)
	bar.Approve(consts.ROUTER_ADDR, consts.UINT64_MAX) // ITS FOR 0.15% fee

	amountIn, amountOut := ExactInSwapRoute(
		bazPath, // inputToken
		barPath, // outputToken
		"1000",  // amountSpecified
		"gno.land/r/onbloc/baz:gno.land/r/onbloc/bar:500", // strRouteArr
		"100", // quoteArr
		"360", // tokenAmountLimit
		time.Now().Add(time.Hour).Unix(),
	)

	uassert.Equal(t, amountIn, "1000")
	uassert.Equal(t, amountOut, "-368")
}

func TestSwapRouteBazBarExactOut(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(consts.ROUTER_ADDR, consts.UINT64_MAX)

	amountIn, amountOut := ExactOutSwapRoute(
		bazPath, // inputToken
		barPath, // outputToken
		"3000",  // amountSpecified
		"gno.land/r/onbloc/baz:gno.land/r/onbloc/bar:500", // strRouteArr
		"100",  // quoteArr
		"8200", // tokenAmountLimit
		time.Now().Add(time.Hour).Unix(),
	)

	uassert.Equal(t, amountIn, "8171")
	uassert.Equal(t, amountOut, "-2996")
}
