package router

import (
	"std"
	"testing"
	"time"

	"gno.land/p/demo/uassert"

	"gno.land/p/gnoswap/consts"

	pl "gno.land/r/gnoswap/v1/pool"
	pn "gno.land/r/gnoswap/v1/position"

	"gno.land/r/gnoswap/v1/gns"
	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/baz"
	"gno.land/r/onbloc/qux"
)

func TestCreatePool(t *testing.T) {
	std.TestSetRealm(adminRealm)

	gns.Approve(poolAddr, pl.GetPoolCreationFee()*2)

	pl.CreatePool(barPath, bazPath, uint32(500), "130621891405341611593710811006") // tick =  10_000, ratio = 2.71814592682522526700950038502924144268035888671875
	pl.CreatePool(bazPath, quxPath, uint32(500), "130621891405341611593710811006") // tick =  10_000, ratio = 2.71814592682522526700950038502924144268035888671875
}

func TestPositionMint(t *testing.T) {
	// bar_baz_500 by admin
	std.TestSetRealm(adminRealm)

	bar.Approve(poolAddr, consts.UINT64_MAX)
	baz.Approve(poolAddr, consts.UINT64_MAX)
	qux.Approve(poolAddr, consts.UINT64_MAX)

	// Mint
	positionId, liquidity, amount0, amount1 := pn.Mint(barPath, bazPath, uint32(500), int32(9000), int32(11000), "100000", "100000", "0", "0", max_timeout, adminAddr, adminAddr, "")
	positionId, liquidity, amount0, amount1 = pn.Mint(bazPath, quxPath, uint32(500), int32(9000), int32(11000), "100000", "100000", "0", "0", max_timeout, adminAddr, adminAddr, "")
}

func TestDrySwapRouteBarQuxExactIn(t *testing.T) {
	std.TestSetRealm(adminRealm)

	dryResult := DrySwapRoute(
		barPath,    // inputToken
		quxPath,    // outputToken
		"1000",     // amountSpecified
		"EXACT_IN", // swapType
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:500", // strRouteArr
		"100", // quoteArr
		"100",
	)

	uassert.Equal(t, dryResult, "7337")
}

func TestSwapRouteBarQuxExactIn(t *testing.T) {
	std.TestSetRealm(adminRealm)

	bar.Approve(poolAddr, 10000)
	qux.Approve(routerAddr, 10000)

	amountIn, amountOut := ExactInSwapRoute(
		barPath, // inputToken
		quxPath, // outputToken
		"1000",  // amountSpecified
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:500,gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:500", // strRouteArr
		"50,50", // quoteArr
		"1",     // tokenAmountLimit
		time.Now().Add(time.Hour).Unix(),
		"", // referrer
	)

	uassert.Equal(t, amountIn, "1000")
	uassert.Equal(t, amountOut, "-7318")
}

func TestDrySwapRouteBarQuxExactOut(t *testing.T) {
	std.TestSetRealm(adminRealm)

	dryResult := DrySwapRoute(
		barPath,     // inputToken
		quxPath,     // outputToken
		"1000",      // amountSpecified
		"EXACT_OUT", // swapType
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:500,gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:500", // strRouteArr
		"50,50", // quoteArr
		"10000",
	)

	uassert.Equal(t, dryResult, "140")
}

func TestSwapRouteBarQuxExactOut(t *testing.T) {
	std.TestSetRealm(adminRealm)

	amountIn, amountOut := ExactOutSwapRoute(
		barPath, // inputToken
		quxPath, // outputToken
		"1000",  // amountSpecified
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:500,gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:500", // strRouteArr
		"60,40", // quoteArr
		"99999", // tokenAmountLimit
		time.Now().Add(time.Hour).Unix(),
		"", // referrer
	)

	uassert.Equal(t, amountIn, "141")
	uassert.Equal(t, amountOut, "-1001")
}

func TestDrySwapRouteQuxBarExactIn(t *testing.T) {
	std.TestSetRealm(adminRealm)

	dryResult := DrySwapRoute(
		quxPath,    // inputToken
		barPath,    // outputToken
		"1000",     // amountSpecified
		"EXACT_IN", // swapType
		"gno.land/r/onbloc/qux:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/bar:500,gno.land/r/onbloc/qux:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/bar:500", // strRouteArr
		"30,70", // quoteArr
		"1",
	)

	uassert.Equal(t, dryResult, "135")
}

func TestSwapRouteQuxBarExactIn(t *testing.T) {
	std.TestSetRealm(adminRealm)

	amountIn, amountOut := ExactInSwapRoute(
		quxPath, // inputToken
		barPath, // outputToken
		"1000",  // amountSpecified
		"gno.land/r/onbloc/qux:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/bar:500,gno.land/r/onbloc/qux:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/bar:500", // strRouteArr
		"30,70", // quoteArr
		"1",     // tokenAmountLimit
		time.Now().Add(time.Hour).Unix(),
		"", // referrer
	)

	uassert.Equal(t, amountIn, "1000")
	uassert.Equal(t, amountOut, "-135")
}

func TestDrySwapRouteQuxBarExactOut(t *testing.T) {
	std.TestSetRealm(adminRealm)

	dryResult := DrySwapRoute(
		quxPath,     // inputToken
		barPath,     // outputToken
		"1000",      // amountSpecified
		"EXACT_OUT", // swapType
		"gno.land/r/onbloc/qux:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/bar:500,gno.land/r/onbloc/qux:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/bar:500", // strRouteArr
		"30,70", // quoteArr
		"100000",
	)

	uassert.Equal(t, dryResult, "7351")
}

func TestSwapRouteQuxBarExactOut(t *testing.T) {
	std.TestSetRealm(adminRealm)

	qux.Approve(poolAddr, 10000)
	bar.Approve(routerAddr, 10000)

	amountIn, amountOut := ExactOutSwapRoute(
		quxPath, // inputToken
		barPath, // outputToken
		"1000",  // amountSpecified
		"gno.land/r/onbloc/qux:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/bar:500,gno.land/r/onbloc/qux:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/bar:500", // strRouteArr
		"30,70", // quoteArr
		"99999", // tokenAmountLimit
		time.Now().Add(time.Hour).Unix(),
		"", // referrer
	)

	uassert.Equal(t, amountIn, "7365")
	uassert.Equal(t, amountOut, "-999")
}
