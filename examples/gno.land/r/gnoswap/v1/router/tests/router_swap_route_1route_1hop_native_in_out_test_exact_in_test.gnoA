package router

import (
	"std"
	"testing"

	"gno.land/p/demo/json"
	"gno.land/p/demo/uassert"

	"gno.land/p/gnoswap/consts"
	"gno.land/r/gnoswap/v1/common"

	pl "gno.land/r/gnoswap/v1/pool"
	pn "gno.land/r/gnoswap/v1/position"

	"gno.land/r/demo/wugnot"
	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/baz"
	"gno.land/r/onbloc/qux"

	"gno.land/r/gnoswap/v1/gns"
)

func TestSwapRouteSingleRouteSinlgeHopWithNativeInAndOut(t *testing.T) {
	testCreatePool(t)
	testPositionMint(t)
	// testBuyNative(t)
	// testSellNative(t)
}

func testCreatePool(t *testing.T) {
	t.Run("create pool", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		gns.Approve(poolAddr, pl.GetPoolCreationFee()*3)

		pl.CreatePool(barPath, bazPath, fee500, "130621891405341611593710811006")                         // tick =  10_000, ratio = 2.71814592682522526700950038502924144268035888671875
		pl.CreatePool(bazPath, quxPath, fee500, "130621891405341611593710811006")                         // tick =  10_000, ratio = 2.71814592682522526700950038502924144268035888671875
		pl.CreatePool(consts.GNOT, quxPath, fee500, common.TickMathGetSqrtRatioAtTick(-10000).ToString()) // tick -10000
		// 1 bar ≈ 19.683 gnot

		jsonStr := pl.ApiGetPools()
		root, err := json.Unmarshal([]byte(jsonStr))
		if err != nil {
			panic(err.Error())
		}

		response, err := root.GetKey("response")
		if err != nil {
			panic(err.Error())
		}

		uassert.Equal(t, response.Size(), 3)
	})
}

func testPositionMint(t *testing.T) {
	t.Run("position mint", func(t *testing.T) {
		t.Run("bar:baz:500", func(t *testing.T) {
			std.TestSetRealm(adminRealm)
			bar.Approve(poolAddr, consts.UINT64_MAX)
			baz.Approve(poolAddr, consts.UINT64_MAX)
			positionId, liquidity, amount0, amount1 := pn.Mint(barPath, bazPath, fee500, int32(9000), int32(11000), "100000", "100000", "0", "0", max_timeout, adminAddr, adminAddr, "")

			uassert.Equal(t, positionId, uint64(1))
			uassert.Equal(t, amount0, "36790")  // bar
			uassert.Equal(t, amount1, "100000") // baz
		})
	})

	t.Run("baz:qux:500", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		baz.Approve(poolAddr, consts.UINT64_MAX)
		qux.Approve(poolAddr, consts.UINT64_MAX)
		positionId, liquidity, amount0, amount1 := pn.Mint(bazPath, quxPath, fee500, int32(9000), int32(11000), "100000", "100000", "0", "0", max_timeout, adminAddr, adminAddr, "")

		uassert.Equal(t, positionId, uint64(2))
		uassert.Equal(t, amount0, "36790")
		uassert.Equal(t, amount1, "100000")
	})

	t.Run("qux:gnot:500", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		qux.Approve(poolAddr, consts.UINT64_MAX)
		wugnot.Approve(poolAddr, consts.UINT64_MAX)

		wugnot.Approve(positionAddr, consts.UINT64_MAX) // wrap / unwrap

		// send coin
		std.TestIssueCoins(positionAddr, std.Coins{{"ugnot", 1000009}}) // without issuing, it will fail `source address g1q646ctzhvn60v492x8ucvyqnrj2w30cwh6efk5 does not exist`
		std.TestSetOriginSend(std.Coins{{"ugnot", 1000009}}, nil)

		positionId, liquidity, amount0, amount1 := pn.Mint(quxPath, consts.GNOT, fee500, int32(9000), int32(11000), "100000", "100000", "0", "0", max_timeout, adminAddr, adminAddr, "")

		uassert.Equal(t, positionId, uint64(3))
		uassert.Equal(t, amount0, "100000")
		uassert.Equal(t, amount1, "36790")

		std.TestSetOriginSend(std.Coins{{}}, nil) // reset context
	})
}

//! func wugnotBalanceOf is not defined

// func testBuyNative(t *testing.T) {
// 	t.Run("swap, buy native, bar > gnot", func(t *testing.T) {
// 		std.TestSetRealm(adminRealm)

// 		bar.Approve(poolAddr, consts.UINT64_MAX)      // input
// 		wugnot.Approve(routerAddr, consts.UINT64_MAX) // output fee ≈ 0.15%
// 		wugnot.Approve(routerAddr, consts.UINT64_MAX) // output unwrap

// 		// check protocol fee before swap
// 		feeColUgnot := ugnotBalanceOf(t, protocolFeeAddr)
// 		feeColWugnot := wugnotBalanceOf(t, protocolFeeAddr)
// 		oldAdminWugnot := wugnotBalanceOf(t, adminAddr)
// 		uassert.Equal(t, feeColUgnot, uint64(0))
// 		uassert.Equal(t, feeColWugnot, uint64(0))

// 		amountIn, amountOut := ExactInSwapRoute(
// 			barPath,     // inputToken
// 			consts.GNOT, // outputToken
// 			"1000",      // amountSpecified
// 			"gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:500*POOL*gno.land/r/onbloc/qux:gno.land/r/demo/wugnot:500", // strRouteArr
// 			"100", // quoteArr
// 			"0",   // tokenAmountLimit
// 			"",    // referrer
// 		)

// 		uassert.Equal(t, amountIn, "1000")
// 		uassert.Equal(t, amountOut, "-19711")

// 		newAdminWugnot := wugnotBalanceOf(t, adminAddr)
// 		uassert.Equal(t, newAdminWugnot, oldAdminWugnot) // amount of wugnot should stay same, swap used ugnot, not (w)ugnot

// 		newUgnot := ugnotBalanceOf(t, adminAddr)
// 		uassert.Equal(t, newUgnot, uint64(919720)) // 900009 + 19711

// 		// check protocol fee after swap
// 		feeColUgnot = ugnotBalanceOf(t, protocolFeeAddr)
// 		feeColWugnot = wugnotBalanceOf(t, protocolFeeAddr)
// 		uassert.Equal(t, feeColUgnot, uint64(29)) // UNWRAP RESULT
// 		uassert.Equal(t, feeColWugnot, uint64(0))
// 	})
// }

// func testSellNative(t *testing.T) {
// 	t.Run("swap, sell native, gnot > bar", func(t *testing.T) {
// 		std.TestSetRealm(adminRealm)

// 		wugnot.Approve(poolAddr, consts.UINT64_MAX) // input
// 		bar.Approve(routerAddr, consts.UINT64_MAX)  // output fee ≈ 0.15%

// 		// check user balance
// 		uassert.Equal(t, wugnotBalanceOf(admin), uint64(0))
// 		uassert.Equal(t, ugnotBalanceOf(admin), uint64(919720))

// 		// check protocol fee balance
// 		uassert.Equal(t, wugnotBalanceOf(protocolFeeAddr), uint64(0))
// 		uassert.Equal(t, ugnotBalanceOf(protocolFeeAddr), uint64(29))

// 		std.TestSetOrigSend(std.Coins{{"ugnot", 5000}}, nil)
// 		std.TestIssueCoins(adminAddr, std.Coins{{"ugnot", -5000}})
// 		amountIn, amountOut := ExactInSwapRoute(
// 			consts.GNOT, // intputToken
// 			barPath,     // outputToken
// 			"5000",      // amountSpecified
// 			"gno.land/r/demo/wugnot:gno.land/r/onbloc/qux:500*POOL*gno.land/r/onbloc/qux:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/bar:500", // strRouteArr
// 			"100", // quoteArr
// 			"0",   // tokenAmountLimit
// 			"",    // referrer
// 		)
// 		std.TestSetOrigSend(std.Coins{{}}, nil)

// 		uassert.Equal(t, amountIn, "5000")
// 		uassert.Equal(t, amountOut, "-254")

// 		// check user balance
// 		uassert.Equal(t, wugnotBalanceOf(admin), uint64(0))
// 		uassert.Equal(t, ugnotBalanceOf(admin), uint64(914720))

// 		// check protocol fee balance
// 		uassert.Equal(t, wugnotBalanceOf(protocolFeeAddr), uint64(0))
// 		uassert.Equal(t, ugnotBalanceOf(protocolFeeAddr), uint64(29))
// 	})
// }
