package router

import (
	"std"
	"testing"

	"gno.land/p/demo/uassert"

	"gno.land/p/gnoswap/consts"
	"gno.land/r/gnoswap/v1/common"

	pl "gno.land/r/gnoswap/v1/pool"
	pn "gno.land/r/gnoswap/v1/position"

	"gno.land/r/demo/wugnot"
	"gno.land/r/gnoswap/v1/gns"
	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/baz"
	"gno.land/r/onbloc/qux"
)

func TestCreatePool(t *testing.T) {
	std.TestSetRealm(adminRealm)

	gns.Approve(poolAddr, pl.GetPoolCreationFee()*3)

	pl.CreatePool(barPath, bazPath, fee500, "130621891405341611593710811006") // tick =  10_000, ratio = 2.71814592682522526700950038502924144268035888671875

	pl.CreatePool(bazPath, quxPath, fee500, "130621891405341611593710811006") // tick =  10_000, ratio = 2.71814592682522526700950038502924144268035888671875

	pl.CreatePool(consts.WRAPPED_WUGNOT, quxPath, fee500, common.TickMathGetSqrtRatioAtTick(-10000).ToString()) // tick -10000

	// 1 bar â‰ˆ 19.683 gnot

	// jsonOutput := pl.ApiGetPools()
	// jsonStr := gjson.Parse(jsonOutput)
	// uassert.Equal(t, len(jsonStr.Get("response").Array()), 3)
}

func TestPositionMintBarBaz(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(poolAddr, consts.UINT64_MAX)
	baz.Approve(poolAddr, consts.UINT64_MAX)
	positionId, liquidity, amount0, amount1 := pn.Mint(barPath, bazPath, fee500, int32(9000), int32(11000), "100000", "100000", "0", "0", max_timeout, adminAddr, adminAddr, "")

	uassert.Equal(t, positionId, uint64(1))
	uassert.Equal(t, amount0, "36790")  // bar
	uassert.Equal(t, amount1, "100000") // baz
}

func TestPositionMintBazQux(t *testing.T) {
	std.TestSetRealm(adminRealm)
	baz.Approve(poolAddr, consts.UINT64_MAX)
	qux.Approve(poolAddr, consts.UINT64_MAX)

	positionId, liquidity, amount0, amount1 := pn.Mint(bazPath, quxPath, fee500, int32(9000), int32(11000), "100000", "100000", "0", "0", max_timeout, adminAddr, adminAddr, "")

	uassert.Equal(t, positionId, uint64(2))
	uassert.Equal(t, amount0, "36790")
	uassert.Equal(t, amount1, "100000")
}

func TestPositionMintQuxGnot(t *testing.T) {
	std.TestSetRealm(adminRealm)

	// send
	std.TestIssueCoins(adminAddr, std.Coins{{"ugnot", 1000009}})
	std.TestSetOriginSend(std.Coins{{"ugnot", 1000009}}, nil)

	// Deposit(wrap)
	std.TestSetRealm(adminRealm)
	wugnot.Deposit()

	qux.Approve(poolAddr, consts.UINT64_MAX)
	wugnot.Approve(poolAddr, consts.UINT64_MAX)

	positionId, liquidity, amount0, amount1 := pn.Mint(quxPath, consts.WRAPPED_WUGNOT, fee500, int32(9000), int32(11000), "100000", "100000", "0", "0", max_timeout, adminAddr, adminAddr, "")

	uassert.Equal(t, positionId, uint64(3))
	uassert.Equal(t, amount0, "100000")
	uassert.Equal(t, amount1, "36790")
}

func TestDrySwapRouteBarGnotExactIn(t *testing.T) {
	std.TestSetRealm(adminRealm)

	dryResult := DrySwapRoute(
		barPath,               // inputToken
		consts.WRAPPED_WUGNOT, // outputToken
		"1000",                // amountSpecified
		"EXACT_IN",            // swapType
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:500*POOL*gno.land/r/onbloc/qux:gno.land/r/demo/wugnot:500", // strRouteArr
		"100", // quoteArr
		"1",
	)
	uassert.Equal(t, dryResult, "19740")
}

func TestDrySwapRouteBarGnotExactOut(t *testing.T) {
	std.TestSetRealm(adminRealm)

	dryResult := DrySwapRoute(
		barPath,               // inputToken
		consts.WRAPPED_WUGNOT, // outputToken
		"20000",               // amountSpecified
		"EXACT_OUT",           // swapType
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:500*POOL*gno.land/r/onbloc/qux:gno.land/r/demo/wugnot:500", // strRouteArr
		"100", // quoteArr
		"2000000",
	)
	uassert.Equal(t, dryResult, "1014")
}

func TestDrySwapRouteGnotBarExactIn(t *testing.T) {
	std.TestSetRealm(adminRealm)

	dryResult := DrySwapRoute(
		consts.WRAPPED_WUGNOT, // intputToken
		barPath,               // outputToken
		"5000",                // amountSpecified
		"EXACT_IN",            // swapType
		"gno.land/r/demo/wugnot:gno.land/r/onbloc/qux:500*POOL*gno.land/r/onbloc/qux:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/bar:500", // strRouteArr
		"100", // quoteArr
		"1",
	)
	uassert.Equal(t, dryResult, "247")
}

func TestDrySwapRouteGnotBarExactOut(t *testing.T) {
	std.TestSetRealm(adminRealm)

	dryResult := DrySwapRoute(
		consts.WRAPPED_WUGNOT, // intputToken
		barPath,               // outputToken
		"100",                 // amountSpecified
		"EXACT_OUT",           // swapType
		"gno.land/r/demo/wugnot:gno.land/r/onbloc/qux:500*POOL*gno.land/r/onbloc/qux:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/bar:500", // strRouteArr
		"100", // quoteArr
		"100000",
	)
	uassert.Equal(t, dryResult, "2027")
}
