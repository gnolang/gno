package staker

import (
	"std"
	"testing"

	"gno.land/p/demo/uassert"

	pl "gno.land/r/gnoswap/v1/pool"

	"gno.land/r/demo/wugnot"
	"gno.land/r/gnoswap/v1/gns"
	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/qux"

	"gno.land/p/gnoswap/consts"
)

func TestMintAndStake(t *testing.T) {
	testInit(t)
	testCreatePool(t)
	testMintAndStakeNative(t)
	testMintAndStakeGRC20Pair(t)
}

func testInit(t *testing.T) {
	t.Run("initial", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		// set pool create fee to 0 for testing
		pl.SetPoolCreationFeeByAdmin(0)
	})
}

func testCreatePool(t *testing.T) {
	t.Run("create pool", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gns.Approve(poolAddr, pl.GetPoolCreationFee())
		std.TestSkipHeights(1)

		pl.CreatePool(consts.GNOT, consts.GNS_PATH, 3000, "79228162514264337593543950337") //x1

		pl.CreatePool(barPath, quxPath, 3000, "130621891405341611593710811006") // tick 10_000 â‰ˆ x2.7
		SetPoolTierByAdmin(`gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:3000`, 1)

		std.TestSkipHeights(1)
	})
}

func testMintAndStakeNative(t *testing.T) {
	t.Run("mint and stake native", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gns.Approve(poolAddr, consts.UINT64_MAX)    // MINT
		wugnot.Approve(poolAddr, consts.UINT64_MAX) // MINT

		wugnot.Approve(positionAddr, consts.UINT64_MAX) // WRAP

		std.TestSkipHeights(2)

		// prepare 100005ugnot (5 for refund test)
		std.TestIssueCoins(adminAddr, std.Coins{{"ugnot", 100005}})
		uassert.Equal(t, ugnotBalanceOf(t, positionAddr), uint64(0))

		// send & set orig send
		banker := std.NewBanker(std.BankerTypeRealmIssue)
		banker.SendCoins(adminAddr, stakerAddr, std.Coins{{"ugnot", 100005}})
		std.TestSetOriginSend(std.Coins{{"ugnot", 100005}}, nil)

		uassert.Equal(t, ugnotBalanceOf(t, adminAddr), uint64(0))

		adminOldWugnotBalance := wugnot.BalanceOf(admin)
		uassert.Equal(t, adminOldWugnotBalance, uint64(0))

		std.TestSetRealm(adminRealm)
		lpTokenId, liquidity, amount0, amount1, poolPath := MintAndStake(
			consts.GNOT,     // token0
			consts.GNS_PATH, // token1
			fee3000,         // fee
			int32(-5040),    // tickLower
			int32(5040),     // tickUpper
			"100000",        // amount0Desired
			"100000",        // amount1Desired
			"1",             // amount0Min
			"1",             // amount1Min
			max_timeout,
		)

		uassert.Equal(t, lpTokenId, uint64(1))
		std.TestSkipHeights(1)

		// SPEND ALL WUGNOT
		uassert.Equal(t, wugnot.BalanceOf(admin), uint64(0))

		uassert.Equal(t, ugnotBalanceOf(t, adminAddr), uint64(5))
	})
}

func testMintAndStakeGRC20Pair(t *testing.T) {
	t.Run("mint and stake grc20 pair", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		bar.Approve(poolAddr, consts.UINT64_MAX)
		qux.Approve(poolAddr, consts.UINT64_MAX)
		std.TestSkipHeights(2)

		lpTokenId, liquidity, amount0, amount1, poolPath := MintAndStake(
			barPath,      // token0
			quxPath,      // token1
			fee3000,      // fee
			int32(9000),  // tickLower
			int32(12000), // tickUpper
			"1000",       // amount0Desired
			"1000",       // amount1Desired
			"1",          // amount0Min
			"1",          // amount1Min
			max_timeout,
		)
		uassert.Equal(t, lpTokenId, uint64(2))

		std.TestSkipHeights(1)
	})
}
