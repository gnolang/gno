// User 'A' mints NFT
// User 'A' transfers NFT to 'B'
// User 'B' stakes NFT
// User 'A' can not collect reward
// User 'B' can collect reward

package staker

import (
	"std"
	"testing"

	"gno.land/p/demo/uassert"

	"gno.land/p/gnoswap/consts"

	pl "gno.land/r/gnoswap/v1/pool"
	pn "gno.land/r/gnoswap/v1/position"

	"gno.land/r/gnoswap/v1/gnft"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/qux"
)

func TestNftTransfer01(t *testing.T) {
	testInit(t)
	testPoolCreatePool(t)
	testPositionMint01(t)
	testTransferNft(t)
	testStakeToken01(t)
	testCollectReward01(t)
}

func testInit(t *testing.T) {
	t.Run("initial", func(t *testing.T) {
		// set pool create fee to 0 for testing
		std.TestSetRealm(adminRealm)
		pl.SetPoolCreationFeeByAdmin(0)
	})
}

func testPoolCreatePool(t *testing.T) {
	t.Run("create pool", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		pl.CreatePool(barPath, quxPath, 500, "130621891405341611593710811006") // tick 10_000 â‰ˆ x2.7
		// tier 1
		SetPoolTierByAdmin(`gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:500`, 1)
		std.TestSkipHeights(1)
	})
}

func testPositionMint01(t *testing.T) {
	t.Run("mint position 01, bar:qux:500", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		bar.Approve(poolAddr, consts.UINT64_MAX)
		qux.Approve(poolAddr, consts.UINT64_MAX)
		std.TestSkipHeights(2)

		lpTokenId, liquidity, amount0, amount1 := pn.Mint(
			barPath,      // token0
			quxPath,      // token1
			uint32(500),  // fee
			int32(9000),  // tickLower
			int32(11000), // tickUpper
			"1000",       // amount0Desired
			"1000",       // amount1Desired
			"1",          // amount0Min
			"1",          // amount1Min
			max_timeout,  // deadline
			admin,
			admin,
			"",
		)

		std.TestSkipHeights(1)

		uassert.Equal(t, lpTokenId, uint64(1))
		owner, _ := gnft.OwnerOf(positionIdFrom(lpTokenId))
		uassert.Equal(t, owner, admin)
		uassert.Equal(t, amount0, "368")
		uassert.Equal(t, amount1, "1000")
	})
}

func testTransferNft(t *testing.T) {
	t.Run("transfer nft", func(t *testing.T) {
		t.Run("transfer nft to another address", func(t *testing.T) {
			uassert.NotPanics(
				t,
				func() {
					std.TestSetRealm(adminRealm)
					gnft.TransferFrom(admin, dummyAddr, positionIdFrom(uint64(1)))
				},
				`should not panic`,
			)

			owner, _ := gnft.OwnerOf(positionIdFrom(uint64(1)))
			uassert.Equal(t, owner.String(), dummyAddr.String())
		})
	})
}

func testStakeToken01(t *testing.T) {
	t.Run("admin can not stake(not a owner)", func(t *testing.T) {
		uassert.PanicsWithMessage(
			t,
			`[GNOSWAP-STAKER-001] caller has no permission`,
			func() {
				std.TestSetRealm(adminRealm)
				StakeToken(1, "")
			})
	})

	t.Run("dummyAddr(new owner) can stake", func(t *testing.T) {
		std.TestSetRealm(dummyRealm)
		gnft.Approve(stakerAddr, positionIdFrom(uint64(1)))

		uassert.NotPanics(
			t,
			func() {
				StakeToken(1, "")
			},
			`should not panic`,
		)
	})
}

func testCollectReward01(t *testing.T) {
	t.Run("admin can not collect reward(not a owner)", func(t *testing.T) {
		uassert.PanicsWithMessage(
			t,
			`[GNOSWAP-STAKER-001] caller has no permission || caller is not owner of positionId(1)`,
			func() {
				std.TestSetRealm(adminRealm)
				CollectReward(1, false)
			})
	})

	t.Run("dummyAddr(new owner) can collect reward", func(t *testing.T) {
		uassert.NotPanics(
			t,
			func() {
				std.TestSetRealm(dummyRealm)
				CollectReward(1, false)
			},
			`should not panic`,
		)
	})
}
