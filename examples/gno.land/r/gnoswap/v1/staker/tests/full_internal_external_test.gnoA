package staker

import (
	"std"
	"testing"

	"gno.land/p/demo/testutils"
	"gno.land/p/demo/uassert"

	"gno.land/p/gnoswap/consts"
	"gno.land/r/gnoswap/v1/common"

	en "gno.land/r/gnoswap/v1/emission"
	pl "gno.land/r/gnoswap/v1/pool"
	pn "gno.land/r/gnoswap/v1/position"
	rr "gno.land/r/gnoswap/v1/router"

	"gno.land/r/gnoswap/v1/gnft"
	"gno.land/r/gnoswap/v1/gns"

	"gno.land/r/demo/wugnot"
	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/baz"
	"gno.land/r/onbloc/foo"
	"gno.land/r/onbloc/qux"
)

const (
	genesisBlockHeight = int64(123)
)

var (
	wugnotAddr      = consts.WUGNOT_ADDR
	externalCreator = testutils.TestAddress("externalCreator")
)

func TestFullInternalExternal(t *testing.T) {
	testInit(t)
	testCreatePoolWugnotGns3000Tier01(t) // currentTick 0, internal tier #1
	testCreateExternalIncentiveGns(t)    // create external reward with gns token (gnot:gns:0.3% pool will have both internal GNS and external GNS )
	testMintPos01InRange(t)

	testCreateBarBaz500Tier02(t) // currentTIck 0, internal tier #2
	testMintPos02InRange(t)      // bar:baz:0.05%
	testMintPos03OutRange(t)     // gnot:gns:0.3%
	testMintPos04OutRange(t)     // bar:baz:0.05%
	testMintPos05OutRange(t)     // gnot:gns:0.3%
	testMintPos06OutRange(t)     // bar:baz:0.05%

	testStakeToken01(t) // there are no staked positions for gnot:gns:0.3% pool until very first stkaing => unclaimable rewards
	testStakeToken02(t)
	testStakeToken03(t)
	testStakeToken04(t)
	testStakeToken05(t)
	testStakeToken06(t)

	testCollectRewardAllForWarmUp30(t)  // collect reward while all positions are in warmUp period 30%
	testCollectRewardAllForWarmUp50(t)  // collect reward while all positions are in warmUp period 50%
	testCollectRewardAllForWarmUp70(t)  // collect reward while all positions are in warmUp period 70%
	testCollectRewardAllForWarmUp100(t) // collect reward while all positions are in warmUp period 1000%

	testSwapExactIn(t)
	testSwapExactOut(t)

	testCreatePoolBarFoo100Tier03(t)    // currentTick 600000, internal tier #3
	testOneClickStakingPos07OutRange(t) // staked with out-range, therefore reward this this position should be unclaimble, which community_pool receives

	testUnstakeToken01(t) // change total staked liquidity

	// EXTERNAL ONLY
	testCreatePoolBazQux3000ExternalOnly(t) // pool with ONLY EXTERNAL INCETNIVE
	testCreateExternalIncentiveBaz(t)       // create baz external
	testMintPos08InRange(t)
	testStakeToken08(t)
	testCollectReward08(t)        // external did not started yet, no reward
	testStartExternalIncentive(t) // start external
	testCollectReward08AfterStart(t)
	testEndExternalIncentiveBaz(t) // ends external (external creator recieves penalty amount (caused by warm up))

	testReStakeTokenPos01(t) // position-01 was warm up 100%, but unstaked and staked again ( warm up should be reset to 30% )

	testChangeAvgBlockTimeTo4000(t)     // change avg block time to 4s (orig: 2s)
	testChangeDistributionPctByAdmin(t) // change staker's emission distribution percentage to 50% (orig: 75%)
}

func testInit(t *testing.T) {
	t.Run("initialize", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		SetUnStakingFeeByAdmin(0)

		en.ChangeDistributionPctByAdmin(
			1, 7500, // staker
			2, 2500, // devOps
			3, 0, // community pool
			4, 0, // xGNS
		)

		std.TestIssueCoins(adminAddr, std.Coins{{"ugnot", 100_000_000_000_000}})
		banker := std.NewBanker(std.BankerTypeRealmSend)
		banker.SendCoins(adminAddr, wugnotAddr, std.Coins{{"ugnot", 50_000_000_000_000}})
		std.TestSetOriginSend(std.Coins{{"ugnot", 50_000_000_000_000}}, nil)
		wugnot.Deposit()
		std.TestSetOriginSend(nil, nil)
		uassert.Equal(t, uint64(50_000_000_000_000), wugnot.BalanceOf(adminAddr))
		uassert.Equal(t, "50000000000000ugnot", (banker.GetCoins(adminAddr).String()))
	})
}

func testCreatePoolWugnotGns3000Tier01(t *testing.T) {
	t.Run("create pool gnot:gns:0.3%", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gns.Approve(poolAddr, consts.UINT64_MAX)
		pl.CreatePool(wugnotPath, gnsPath, 3000, common.TickMathGetSqrtRatioAtTick(0).ToString()) // current tick 0

		uassert.Equal(t, uint64(100000000000000), gns.TotalSupply())
		uassert.Equal(t, uint64(0), gnsBalance(emissionAddr))
		uassert.Equal(t, uint64(0), gnsBalance(stakerAddr))
		uassert.Equal(t, uint64(0), gnsBalance(devOpsAddr))
		std.TestSkipHeights(3)
	})
}

func testCreateExternalIncentiveGns(t *testing.T) {
	t.Run("create external incentive gns for gnot:gns:0.3% pool", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gns.Approve(stakerAddr, consts.UINT64_MAX) // this includes depositGnsAmount
		CreateExternalIncentive(
			"gno.land/r/demo/wugnot:gno.land/r/gnoswap/v1/gns:3000",
			consts.GNS_PATH,
			20000000,
			1234569600,
			1234569600+TIMESTAMP_90DAYS,
		)

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})
}

func testMintPos01InRange(t *testing.T) {
	t.Run("mint position 01 in range", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		wugnot.Approve(poolAddr, consts.UINT64_MAX)
		gns.Approve(poolAddr, consts.UINT64_MAX)
		pn.Mint(
			wugnotPath,
			gnsPath,
			fee3000,
			int32(-60),
			int32(60),
			"1000",
			"1000",
			"0",
			"0",
			max_timeout,
			adminAddr,
			adminAddr,
			"",
		)
		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})
}

func testCreateBarBaz500Tier02(t *testing.T) {
	t.Run("create bar:baz:500 pool, and set internal emission tier #2", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gns.Approve(poolAddr, consts.UINT64_MAX)
		pl.CreatePool(barPath, bazPath, 500, common.TickMathGetSqrtRatioAtTick(0).ToString())

		SetPoolTierByAdmin("gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500", 2)

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})
}

func testMintPos02InRange(t *testing.T) {
	t.Run("mint position 02 in range", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		bar.Approve(poolAddr, consts.UINT64_MAX)
		baz.Approve(poolAddr, consts.UINT64_MAX)
		pn.Mint(
			barPath,
			bazPath,
			fee500,
			int32(-60),
			int32(60),
			"1000",
			"1000",
			"0",
			"0",
			max_timeout,
			adminAddr,
			adminAddr,
			"",
		)
		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})
}

func testMintPos03OutRange(t *testing.T) {
	t.Run("mint position 03 out range", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		wugnot.Approve(poolAddr, consts.UINT64_MAX)
		gns.Approve(poolAddr, consts.UINT64_MAX)
		pn.Mint(
			wugnotPath,
			gnsPath,
			fee3000,
			int32(60),
			int32(120),
			"1000",
			"1000",
			"0",
			"0",
			max_timeout,
			adminAddr,
			adminAddr,
			"",
		)
		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})
}

func testMintPos04OutRange(t *testing.T) {
	t.Run("mint position 04 out range", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		wugnot.Approve(poolAddr, consts.UINT64_MAX)
		gns.Approve(poolAddr, consts.UINT64_MAX)
		pn.Mint(
			barPath,
			bazPath,
			fee500,
			int32(60),
			int32(120),
			"1000",
			"1000",
			"0",
			"0",
			max_timeout,
			adminAddr,
			adminAddr,
			"",
		)
		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})
}

func testMintPos05OutRange(t *testing.T) {
	t.Run("mint position 05 out range", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		wugnot.Approve(poolAddr, consts.UINT64_MAX)
		gns.Approve(poolAddr, consts.UINT64_MAX)
		pn.Mint(
			wugnotPath,
			gnsPath,
			fee3000,
			int32(-120),
			int32(-60),
			"1000",
			"1000",
			"0",
			"0",
			max_timeout,
			adminAddr,
			adminAddr,
			"",
		)
		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})
}

func testMintPos06OutRange(t *testing.T) {
	t.Run("mint position 06 out range", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		wugnot.Approve(poolAddr, consts.UINT64_MAX)
		gns.Approve(poolAddr, consts.UINT64_MAX)
		pn.Mint(
			barPath,
			bazPath,
			fee500,
			int32(-120),
			int32(-60),
			"1000",
			"1000",
			"0",
			"0",
			max_timeout,
			adminAddr,
			adminAddr,
			"",
		)
		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})
}

func testStakeToken01(t *testing.T) {
	t.Run("stake token 01", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gnft.Approve(stakerAddr, common.PositionIdFrom(1))
		StakeToken(1, "")

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})
}

func testStakeToken02(t *testing.T) {
	t.Run("stake token 02", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gnft.Approve(stakerAddr, common.PositionIdFrom(2))
		StakeToken(2, "")

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})
}

func testStakeToken03(t *testing.T) {
	t.Run("stake token 03", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gnft.Approve(stakerAddr, common.PositionIdFrom(3))
		StakeToken(3, "")

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})
}

func testStakeToken04(t *testing.T) {
	t.Run("stake token 04", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gnft.Approve(stakerAddr, common.PositionIdFrom(4))
		StakeToken(4, "")

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})
}

func testStakeToken05(t *testing.T) {
	t.Run("stake token 05", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gnft.Approve(stakerAddr, common.PositionIdFrom(5))
		StakeToken(5, "")

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})
}

func testStakeToken06(t *testing.T) {
	t.Run("stake token 06", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gnft.Approve(stakerAddr, common.PositionIdFrom(6))
		StakeToken(6, "")

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})
}

func testCollectRewardAllForWarmUp30(t *testing.T) {
	t.Run("collect reward for all position, while warm up is in 30", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		CollectReward(1, false)
		CollectReward(2, false)
		CollectReward(3, false)
		CollectReward(4, false)
		CollectReward(5, false)
		CollectReward(6, false)

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})
}

func testCollectRewardAllForWarmUp50(t *testing.T) {
	msInDay := int64(86400000)
	blocksInDay := msInDay / int64(gns.GetAvgBlockTimeInMs())
	blocksIn5Days := int64(5 * blocksInDay)
	blocksIn10Days := int64(10 * blocksInDay)
	blocksIn30Days := int64(30 * blocksInDay)

	t.Run("make warm up to 50% (currently reward for 30% and 50% are mixed)", func(t *testing.T) {
		std.TestSkipHeights(blocksIn5Days)
		std.TestSetRealm(adminRealm)

		CollectReward(1, false)
		CollectReward(2, false)
		CollectReward(3, false)
		CollectReward(4, false)
		CollectReward(5, false)
		CollectReward(6, false)

		std.TestSkipHeights(1)
	})

	t.Run("only single block for 50% warm up", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		CollectReward(1, false)
		CollectReward(2, false)
		CollectReward(3, false)
		CollectReward(4, false)
		CollectReward(5, false)
		CollectReward(6, false)

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})
}

func testCollectRewardAllForWarmUp70(t *testing.T) {
	msInDay := int64(86400000)
	blocksInDay := msInDay / int64(gns.GetAvgBlockTimeInMs())
	blocksIn5Days := int64(5 * blocksInDay)
	blocksIn10Days := int64(10 * blocksInDay)
	blocksIn30Days := int64(30 * blocksInDay)

	t.Run("make warm up to 70% (currently reward for 50% and 70% are mixed)", func(t *testing.T) {
		std.TestSkipHeights(blocksIn10Days)
		std.TestSetRealm(adminRealm)

		CollectReward(1, false)
		CollectReward(2, false)
		CollectReward(3, false)
		CollectReward(4, false)
		CollectReward(5, false)
		CollectReward(6, false)

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})

	t.Run("only single block for 70% warm up", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		CollectReward(1, false)
		CollectReward(2, false)
		CollectReward(3, false)
		CollectReward(4, false)
		CollectReward(5, false)
		CollectReward(6, false)

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})
}

func testCollectRewardAllForWarmUp100(t *testing.T) {
	msInDay := int64(86400000)
	blocksInDay := msInDay / int64(gns.GetAvgBlockTimeInMs())
	blocksIn5Days := int64(5 * blocksInDay)
	blocksIn10Days := int64(10 * blocksInDay)
	blocksIn30Days := int64(30 * blocksInDay)

	t.Run("make warm up to 100% (currently reward for 70% and 100% are mixed)", func(t *testing.T) {
		std.TestSkipHeights(blocksIn30Days)
		std.TestSetRealm(adminRealm)

		CollectReward(1, false)
		CollectReward(2, false)
		CollectReward(3, false)
		CollectReward(4, false)
		CollectReward(5, false)
		CollectReward(6, false)

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})

	t.Run("only single block for 100% warm up", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		CollectReward(1, false)
		CollectReward(2, false)
		CollectReward(3, false)
		CollectReward(4, false)
		CollectReward(5, false)
		CollectReward(6, false)

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})
}

func testSwapExactIn(t *testing.T) {
	t.Run("swap token0 to token1 500 // swap #1", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		wugnot.Approve(poolAddr, consts.UINT64_MAX)
		gns.Approve(poolAddr, consts.UINT64_MAX)

		wugnot.Approve(routerAddr, consts.UINT64_MAX)
		gns.Approve(routerAddr, consts.UINT64_MAX)

		tokenIn, tokenOut := rr.ExactInSwapRoute(
			wugnotPath, // inputToken
			gnsPath,    // outputToken
			"500",      // finalAmountIn
			"gno.land/r/demo/wugnot:gno.land/r/gnoswap/v1/gns:3000", // RouteArr
			"100",       // quoteArr
			"0",         // amountOutMin
			max_timeout, // deadline
			"",          // referrer
		)
		// tick changed
		// > from 0 to -30

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})

	t.Run("check reward for position 01 // #1", func(t *testing.T) {
		// position-01 range
		// > from -60 ~ 60
		// stil in range
		// - there are some rewards

		std.TestSetRealm(adminRealm)
		CollectReward(1, false)

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})

	t.Run("swap token0 to token1 500 // swap #2", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		wugnot.Approve(poolAddr, consts.UINT64_MAX)
		gns.Approve(poolAddr, consts.UINT64_MAX)

		wugnot.Approve(routerAddr, consts.UINT64_MAX)
		gns.Approve(routerAddr, consts.UINT64_MAX)

		tokenIn, tokenOut := rr.ExactInSwapRoute(
			wugnotPath, // inputToken
			gnsPath,    // outputToken
			"500",      // finalAmountIn
			"gno.land/r/demo/wugnot:gno.land/r/gnoswap/v1/gns:3000", // RouteArr
			"100",       // quoteArr
			"0",         // amountOutMin
			max_timeout, // deadline
			"",          // referrer
		)
		// tick changed
		// > from 0 to -30

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})

	t.Run("check reward for position 01 // #2", func(t *testing.T) {
		// position-01 range
		// > from -60 ~ 60
		// stil in range
		// - there are some rewards

		std.TestSetRealm(adminRealm)
		CollectReward(1, false)

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})

	t.Run("swap token0 to token1 500 // swap #3", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		wugnot.Approve(poolAddr, consts.UINT64_MAX)
		gns.Approve(poolAddr, consts.UINT64_MAX)

		wugnot.Approve(routerAddr, consts.UINT64_MAX)
		gns.Approve(routerAddr, consts.UINT64_MAX)

		tokenIn, tokenOut := rr.ExactInSwapRoute(
			wugnotPath, // inputToken
			gnsPath,    // outputToken
			"500",      // finalAmountIn
			"gno.land/r/demo/wugnot:gno.land/r/gnoswap/v1/gns:3000", // RouteArr
			"100",       // quoteArr
			"0",         // amountOutMin
			max_timeout, // deadline
			"",          // referrer
		)

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})
	// tick changed
	// > from -60 to -90

	t.Run("check reward for position 01 // #3-1", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		CollectReward(1, false) // should have reward for block that exeucted swap

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})
	t.Run("check reward for position 01 // #3-2", func(t *testing.T) {
		// position-01 range
		// > from -60 ~ 60
		// out range

		std.TestSetRealm(adminRealm)
		CollectReward(1, false) // should have no reward since position is out of range

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})

	t.Run("swap token0 to token1 500 // swap #4", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		wugnot.Approve(poolAddr, consts.UINT64_MAX)
		gns.Approve(poolAddr, consts.UINT64_MAX)

		wugnot.Approve(routerAddr, consts.UINT64_MAX)
		gns.Approve(routerAddr, consts.UINT64_MAX)

		tokenIn, tokenOut := rr.ExactInSwapRoute(
			wugnotPath, // inputToken
			gnsPath,    // outputToken
			"500",      // finalAmountIn
			"gno.land/r/demo/wugnot:gno.land/r/gnoswap/v1/gns:3000", // RouteArr
			"100",       // quoteArr
			"0",         // amountOutMin
			max_timeout, // deadline
			"",          // referrer
		)

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})
	// tick changed
	// > from -90 to -119
	// position-01 range
	// > from -60 ~ 60
	// out range
	t.Run("check reward for position 01 // #4", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		CollectReward(1, false) // should have reward for block that exeucted swap
		std.TestSkipHeights(1)
	})
}

func testSwapExactOut(t *testing.T) {
	t.Run("swap token1 to token1 0 // swap #1", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		wugnot.Approve(poolAddr, consts.UINT64_MAX)
		gns.Approve(poolAddr, consts.UINT64_MAX)

		wugnot.Approve(routerAddr, consts.UINT64_MAX)
		gns.Approve(routerAddr, consts.UINT64_MAX)

		tokenIn, tokenOut := rr.ExactOutSwapRoute(
			gnsPath,    // inputToken
			wugnotPath, // outputToken
			"500",      // amountOut
			"gno.land/r/gnoswap/v1/gns:gno.land/r/demo/wugnot:3000", // RouteArr
			"100",       // quoteArr
			"1000",      // amountInMax
			max_timeout, // deadline
			"",          // referrer
		)
		// tick changed
		// > from -119 ~ -89

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})

	t.Run("check reward for position 03 // #1", func(t *testing.T) {
		// position-05 range
		// > from 60 ~ 120
		// out range

		std.TestSetRealm(adminRealm)
		CollectReward(3, false)

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})

	t.Run("swap token1 to token1 0 // swap #2", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		wugnot.Approve(poolAddr, consts.UINT64_MAX)
		gns.Approve(poolAddr, consts.UINT64_MAX)

		wugnot.Approve(routerAddr, consts.UINT64_MAX)
		gns.Approve(routerAddr, consts.UINT64_MAX)

		tokenIn, tokenOut := rr.ExactOutSwapRoute(
			gnsPath,    // inputToken
			wugnotPath, // outputToken
			"500",      // amountOut
			"gno.land/r/gnoswap/v1/gns:gno.land/r/demo/wugnot:3000", // RouteArr
			"100",       // quoteArr
			"1000",      // amountInMax
			max_timeout, // deadline
			"",          // referrer
		)
		// tick changed
		// > from -89 ~ -60

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})

	t.Run("check reward for position 03 // #2", func(t *testing.T) {
		// position-05 range
		// > from 60 ~ 120
		// out range

		std.TestSetRealm(adminRealm)
		CollectReward(3, false)

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})

	t.Run("swap token1 to token1 0 // swap #3", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		wugnot.Approve(poolAddr, consts.UINT64_MAX)
		gns.Approve(poolAddr, consts.UINT64_MAX)

		wugnot.Approve(routerAddr, consts.UINT64_MAX)
		gns.Approve(routerAddr, consts.UINT64_MAX)

		tokenIn, tokenOut := rr.ExactOutSwapRoute(
			gnsPath,    // inputToken
			wugnotPath, // outputToken
			"500",      // amountOut
			"gno.land/r/gnoswap/v1/gns:gno.land/r/demo/wugnot:3000", // RouteArr
			"100",       // quoteArr
			"1000",      // amountInMax
			max_timeout, // deadline
			"",          // referrer
		)
		// tick changed
		// > from -60 ~ -30

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})

	t.Run("check reward for position 03 // #3", func(t *testing.T) {
		// position-05 range
		// > from 60 ~ 120
		// out range

		std.TestSetRealm(adminRealm)
		CollectReward(3, false)

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})

	t.Run("swap token1 to token1 0 // swap #4", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		wugnot.Approve(poolAddr, consts.UINT64_MAX)
		gns.Approve(poolAddr, consts.UINT64_MAX)

		wugnot.Approve(routerAddr, consts.UINT64_MAX)
		gns.Approve(routerAddr, consts.UINT64_MAX)

		tokenIn, tokenOut := rr.ExactOutSwapRoute(
			gnsPath,    // inputToken
			wugnotPath, // outputToken
			"500",      // amountOut
			"gno.land/r/gnoswap/v1/gns:gno.land/r/demo/wugnot:3000", // RouteArr
			"100",       // quoteArr
			"1000",      // amountInMax
			max_timeout, // deadline
			"",          // referrer
		)
		// tick changed
		// > from -30 ~ 0

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})

	t.Run("check reward for position 03 // #4", func(t *testing.T) {
		// position-05 range
		// > from 60 ~ 120
		// out range

		std.TestSetRealm(adminRealm)
		CollectReward(3, false)

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})
}

func testCreatePoolBarFoo100Tier03(t *testing.T) {
	t.Run("create bar:foo:100 pool, and set internal emission tier #3", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		pl.CreatePool(barPath, fooPath, fee100, common.TickMathGetSqrtRatioAtTick(600000).ToString())
		std.TestSkipHeights(1)

		// height 1944165
		SetPoolTierByAdmin("gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:100", 3)

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})
}

func testOneClickStakingPos07OutRange(t *testing.T) {
	t.Run("mint and stake grc20 pair (pos #7)", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		bar.Approve(poolAddr, consts.UINT64_MAX)
		foo.Approve(poolAddr, consts.UINT64_MAX)

		lpTokenId, liquidity, amount0, amount1, poolPath := MintAndStake(
			barPath,    // token0
			fooPath,    // token1
			fee100,     // fee
			int32(-60), // tickLower
			int32(60),  // tickUpper
			"1000",     // amount0Desired
			"1000",     // amount1Desired
			"0",        // amount0Min
			"0",        // amount1Min
			max_timeout,
		)
		uassert.Equal(t, lpTokenId, uint64(7))

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})

	t.Run("collect reward for position 07", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		oldCommunityPool := gns.BalanceOf(communityPoolAddr)
		CollectReward(7, false)
		// height 1944167

		newCommunityPool := gns.BalanceOf(communityPoolAddr)
		uassert.Equal(t, uint64(4280820), newCommunityPool-oldCommunityPool)
		// all internal tier exists
		// staker's emission reward per block 10702054
		// > tier 1, 50% ~= 5351027
		// > tier 2, 30% ~= 3210616
		// > tier 3, 20% ~= 2140410

		// bar:foo:0.1% pool has ben set to tier 3, at block 1944165 (current block is 1944167)
		// 2 block reward ª2140410 * 2 = 4280820) goes to community_pool as unclaimable

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})
}

func testUnstakeToken01(t *testing.T) {
	t.Run("unstake token 01", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		UnStakeToken(1, false)

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})

	t.Run("collect reward for position 03 (has same pool with position 01)", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		// wugnot:gns:0.3% // currentTick: 0
		// > position-01 inRange // -60 ~ 60 || unstaked
		// > position-03 outRange // 60 ~ 120
		// > position-05 outRange // -120 ~ -60
		// this pool may have mulitple staked position, but nothing is inrange
		// therefore reward for this pool(5351027) goes to community_pool as unclaimable

		oldCommuGns := gns.BalanceOf(communityPoolAddr)
		CollectReward(3, false) // dummy claim
		newCommuGns := gns.BalanceOf(communityPoolAddr)
		uassert.Equal(t, uint64(5351027), newCommuGns-oldCommuGns)

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})
}

func testCreatePoolBazQux3000ExternalOnly(t *testing.T) {
	t.Run("create pool baz:qux:0.3%", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		pl.CreatePool(bazPath, quxPath, 3000, common.TickMathGetSqrtRatioAtTick(0).ToString()) // current tick 0

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})
}

func testCreateExternalIncentiveBaz(t *testing.T) {
	t.Run("create external incentive baz for baz:qux:0.3% pool", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		baz.Transfer(externalCreator, 20000000)         // for external incentive
		gns.Transfer(externalCreator, depositGnsAmount) // for deposit

		std.TestSetRealm(std.NewUserRealm(externalCreator))
		baz.Approve(stakerAddr, 20000000)
		gns.Approve(stakerAddr, depositGnsAmount)

		CreateExternalIncentive(
			"gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:3000",
			bazPath,
			20000000,
			1238457600,
			1238457600+TIMESTAMP_90DAYS,
		)
		// startHeight 1944978
		// endHeight 5832978

		// 5832978 - 1944978 = 3888000 ( incentive block duration )
		// 20000000 / 3888000 = 5.1440329218 ( amount of baz reward per block )

		checkGnsBalance(t, depositGnsAmount)
		std.TestSkipHeights(1)
	})
}

func testMintPos08InRange(t *testing.T) {
	t.Run("mint position 08 in range", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		baz.Approve(poolAddr, consts.UINT64_MAX)
		qux.Approve(poolAddr, consts.UINT64_MAX)

		std.TestSkipHeights(1)
		pn.Mint(
			bazPath,
			quxPath,
			fee3000,
			int32(-60),
			int32(60),
			"1000",
			"1000",
			"0",
			"0",
			max_timeout,
			adminAddr,
			adminAddr,
			"",
		)

		checkGnsBalance(t, depositGnsAmount)
		std.TestSkipHeights(1)
	})
}

func testStakeToken08(t *testing.T) {
	t.Run("stake token 08", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		gnft.Approve(stakerAddr, common.PositionIdFrom(8))
		StakeToken(8, "")

		checkGnsBalance(t, depositGnsAmount)
		std.TestSkipHeights(1)
	})
}

func testCollectReward08(t *testing.T) {
	t.Run("collect reward for 08 position, baz incentive not yet started", func(t *testing.T) {
		std.TestSkipHeights(9)
		std.TestSetRealm(adminRealm)

		oldBaz := baz.BalanceOf(adminAddr)
		CollectReward(8, false)

		newBaz := baz.BalanceOf(adminAddr)
		uassert.Equal(t, uint64(0), newBaz-oldBaz)
		// extenral incentive not yet started

		checkGnsBalance(t, depositGnsAmount)
		std.TestSkipHeights(1)
	})
}

func testStartExternalIncentive(t *testing.T) {
	t.Run("external incentive start block skip", func(t *testing.T) {
		std.TestSkipHeights(1944978 - std.ChainHeight())
		std.TestSkipHeights(10)
	})
}

func testCollectReward08AfterStart(t *testing.T) {
	t.Run("collect reward for 08 position", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		oldBaz := baz.BalanceOf(adminAddr)
		CollectReward(8, false)
		newBaz := baz.BalanceOf(adminAddr)

		uassert.True(t, isNear(t, uint64(15), newBaz-oldBaz))
		// 5 * 10 * 30% = 15 // user receives
		// > bar reward amount per block is 5.1440329218 == 5
		// > 10 block skipped after incentive start
		// > position08 staked duration is 812 ( which is 30% warmUp period )

		checkGnsBalance(t, depositGnsAmount)
		std.TestSkipHeights(1)
	})
}

func testEndExternalIncentiveBaz(t *testing.T) {
	t.Run("end external incentive bar", func(t *testing.T) {
		std.TestSetRealm(std.NewUserRealm(externalCreator))

		oldGns := gns.BalanceOf(externalCreator)
		oldBaz := baz.BalanceOf(externalCreator)

		lpOldBaz := baz.BalanceOf(adminAddr)

		std.TestSkipHeights(5832978 - std.ChainHeight())
		std.TestSkipHeights(1)

		EndExternalIncentive(
			externalCreator,
			"gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:3000",
			bazPath,
			1238457600,
			1238457600+TIMESTAMP_90DAYS,
			1944978,
		)
		std.TestSkipHeights(1)

		newGns := gns.BalanceOf(externalCreator)
		newBaz := baz.BalanceOf(externalCreator)

		// 1. external creator recieves deposit gns amount
		refundGns := newGns - oldGns
		uassert.Equal(t, depositGnsAmount, refundGns, "gns refund amount mismatch")

		// 2. external creator receives penalty made by warm up
		// > position-08 had 50 reward (30% = 15 goes to reward, 70% = 35 goes to penalty )
		refundBaz := newBaz - oldBaz
		uassert.Equal(t, uint64(35), refundBaz)

		// 3. liquidity provider(who has staked position) still can receive reward even external is ended
		std.TestSetRealm(adminRealm)
		CollectReward(8, false)
		std.TestSkipHeights(1)

		lpNewBaz := baz.BalanceOf(adminAddr)
		uassert.True(t, lpNewBaz-lpOldBaz > 0)

		// 4. after external ends, no reward can be made
		std.TestSkipHeights(123)
		CollectReward(8, false)
		lpNewBaz2 := baz.BalanceOf(adminAddr)
		uassert.Equal(t, lpNewBaz, lpNewBaz2)

		checkGnsBalance(t, 0)
	})
}

func testReStakeTokenPos01(t *testing.T) {
	t.Run("re-stake token 01", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		gnft.Approve(stakerAddr, common.PositionIdFrom(1))
		StakeToken(1, "")

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})

	t.Run("collect reward for position 01", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		oldGns := gns.BalanceOf(adminAddr)
		CollectReward(1, false)
		newGns := gns.BalanceOf(adminAddr)
		uassert.True(t, isNear(t, uint64(1605308), newGns-oldGns))
		// position-01 is in warm up 30%
		// gnot:gns:0.3% is tier 1 pool, will get 5351027 per block
		// 5351027 * 30% = 1605308.1

		checkGnsBalance(t, 0)
		std.TestSkipHeights(1)
	})
}

func testChangeAvgBlockTimeTo4000(t *testing.T) {
	t.Run("change avg block time to 4000", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		gns.SetAvgBlockTimeInMsByAdmin(4000)
		std.TestSkipHeights(1)

		// dummy claim
		CollectReward(1, false)
	})

	t.Run("collect reward position 01", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		std.TestSkipHeights(1)

		oldGns := gns.BalanceOf(adminAddr)
		CollectReward(1, false)
		newGns := gns.BalanceOf(adminAddr)
		uassert.True(t, isNear(t, uint64(3210616), newGns-oldGns))

		// reward per block when avg block time is 2s = 10702054
		// reward per block when avg block time is 4s = 21404108

		// tier 1 gets 50% = 21404108 * 50% = 10702054
		// warmUp 30% = 10702054 * 30% = 3210616.2
		std.TestSkipHeights(1)

		// revert changes
		gns.SetAvgBlockTimeInMsByAdmin(2000)
	})
}

func testChangeDistributionPctByAdmin(t *testing.T) {
	t.Run("change staker's emission distribution pct to 50%", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		en.ChangeDistributionPctByAdmin(
			1, 5000, // staker
			2, 5000, // devops
			3, 0, // community pool
			4, 0, // xGNS
		)
		std.TestSkipHeights(1)

		// dummy claim
		CollectReward(1, false)
	})

	t.Run("collect reward position 01", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		std.TestSkipHeights(1)

		oldGns := gns.BalanceOf(adminAddr)
		CollectReward(1, false)
		newGns := gns.BalanceOf(adminAddr)
		uassert.True(t, isNear(t, uint64(1070205), newGns-oldGns))
		// emission per 1 block 14269406
		// (orig) 75%  = 10702054
		// (new) 50% = 7134703

		// tier 1 gets 50% = 7134703 * 50% = 3567351.5
		// warmUp 30% = 3567351.5 * 30% = 1070205.45

		// revert changes
		en.ChangeDistributionPctByAdmin(
			1, 7500, // staker
			2, 2500, // devops
			3, 0, // community pool
			4, 0, // xGNS
		)
		std.TestSkipHeights(1)
	})
}

func checkGnsBalance(t *testing.T, adjustAmount uint64) {
	t.Helper()

	currentHeight := std.ChainHeight()
	blockPassedFromGenesis := uint64(currentHeight - genesisBlockHeight)

	oneBlockEmissionAmount := uint64(14269406)

	oneBlockStakerAmount := uint64(10702054) // 14269406*0.75
	initialStakerAmount := uint64(32106163)  // 14269406*0.75*3

	oneBlockDevOpsAmount := uint64(3567351) // 14269406*0.25
	initialDevOpsAmount := uint64(10702054) // 14269406*0.25*3

	externalIncentiveDeposit := uint64(20000000) + depositGnsAmount // externalReward + depositGns
	emissionLeft := blockPassedFromGenesis / 2
	gnsPer2Block := uint64(1)

	uassert.Equal(t, uint64(100000000000000)+(blockPassedFromGenesis*oneBlockEmissionAmount), gns.TotalSupply())

	uassert.True(t, isNear(t, uint64(0), gnsBalance(emissionAddr)))

	expectStakerBalance := uint64(0) + initialStakerAmount + ((blockPassedFromGenesis - 3) * oneBlockStakerAmount) + externalIncentiveDeposit + adjustAmount
	uassert.True(t, isNear(t, expectStakerBalance+(uint64((currentHeight-126))*gnsPer2Block), gnsBalance(stakerAddr)+totalEmissionSent))

	expectedDevOpsBalance := uint64(0) + initialDevOpsAmount + ((blockPassedFromGenesis - 3) * oneBlockDevOpsAmount)
	uassert.True(t, isNear(t, expectedDevOpsBalance, gnsBalance(devOpsAddr)))
}

// check whether the actual value is within 99.999% of the expected value
func isNear(t *testing.T, expected, actual uint64) bool {
	t.Helper()

	// 99.999%
	lower := expected * 99999 / 100000
	upper := expected * 100001 / 100000

	if lower <= actual && actual <= upper {
		return true
	}

	lower = expected - 1
	if lower > expected {
		lower = 0
	}
	upper = expected + 1

	if lower <= actual && actual <= upper {
		return true
	}

	return false
}
