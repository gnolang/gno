package staker

import (
	"math"
	"std"
	"testing"

	"gno.land/p/demo/uassert"
	u256 "gno.land/p/gnoswap/uint256"

	"gno.land/p/gnoswap/consts"

	en "gno.land/r/gnoswap/v1/emission"
	pl "gno.land/r/gnoswap/v1/pool"
	pn "gno.land/r/gnoswap/v1/position"

	"gno.land/r/gnoswap/v1/gnft"
	"gno.land/r/gnoswap/v1/gns"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/baz"
	"gno.land/r/onbloc/qux"
)

func TestShortWarmUp365DayExternal(t *testing.T) {
	testInit(t)
	testCreatePool(t)
	testMintBarQux3000_1_4(t)
	testCreateExternalIncentiveQux365(t)
	testStakeToken_1_4(t)
	testBeforeActive(t)
	testRewardFor1Block(t)
}

func testInit(t *testing.T) {
	t.Run("override warm-up period", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		changeWarmup(t, 0, 150)
		changeWarmup(t, 1, 300)
		changeWarmup(t, 2, 900)
		changeWarmup(t, 3, math.MaxInt64)
	})
}

func testCreatePool(t *testing.T) {
	t.Run("create pool", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gns.Approve(consts.POOL_ADDR, pl.GetPoolCreationFee()*3)

		pl.CreatePool(barPath, bazPath, 3000, "79228162514264337593543950337")

		std.TestSkipHeights(1)
	})
}

func testMintBarQux3000_1_4(t *testing.T) {
	t.Run("mint bar qux 3000 1 4", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		bar.Approve(consts.POOL_ADDR, consts.UINT64_MAX)
		baz.Approve(consts.POOL_ADDR, consts.UINT64_MAX)

		anoAdmin := admin

		pn.Mint(barPath, bazPath, fee3000, int32(-1020), int32(1020), "13630", "13630", "0", "0", max_timeout, anoAdmin, anoAdmin)
		pn.Mint(barPath, bazPath, fee3000, int32(-1020), int32(1020), "84360", "84360", "0", "0", max_timeout, anoAdmin, anoAdmin)
		pn.Mint(barPath, bazPath, fee3000, int32(-1020), int32(1020), "1990", "1990", "0", "0", max_timeout, anoAdmin, anoAdmin)
		pn.Mint(barPath, bazPath, fee3000, int32(-1020), int32(1020), "7", "7", "0", "0", max_timeout, anoAdmin, anoAdmin)
		std.TestSkipHeights(1)

		t1Liq := pn.PositionGetPositionLiquidity(1).Clone()
		t2Liq := pn.PositionGetPositionLiquidity(2).Clone()
		t3Liq := pn.PositionGetPositionLiquidity(3).Clone()
		t4Liq := pn.PositionGetPositionLiquidity(4).Clone()

		all := u256.Zero()
		all.Add(all, t1Liq)
		all.Add(all, t2Liq)
		all.Add(all, t3Liq)
		all.Add(all, t4Liq)

		t1pct := t1Liq.Mul(t1Liq, u256.NewUint(100))
		t1pct.Div(t1pct, all) // 13.6317%
		t2pct := t2Liq.Mul(t2Liq, u256.NewUint(100))
		t2pct.Div(t2pct, all) // 84.3710%
		t3pct := t3Liq.Mul(t3Liq, u256.NewUint(100))
		t3pct.Div(t3pct, all) // 1.9902%
		t4pct := t4Liq.Mul(t4Liq, u256.NewUint(100))
		t4pct.Div(t4pct, all) // 0.0069%
	})
}

func testCreateExternalIncentiveQux365(t *testing.T) {
	t.Run("create external incentive qux 365", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		qux.Approve(consts.STAKER_ADDR, consts.UINT64_MAX)
		gns.Approve(consts.STAKER_ADDR, depositGnsAmount)

		AddToken(quxPath)
		CreateExternalIncentive(
			"gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:3000",
			quxPath,
			10000000000000,
			1234569600,
			1234569600+TIMESTAMP_365DAYS,
		)
		std.TestSkipHeights(1)
	})
}

func testStakeToken_1_4(t *testing.T) {
	t.Run("stake token 1 ~ 4", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gnft.Approve(GetOrigPkgAddr(), tid(1))
		StakeToken(1)

		gnft.Approve(GetOrigPkgAddr(), tid(2))
		StakeToken(2)

		gnft.Approve(GetOrigPkgAddr(), tid(3))
		StakeToken(3)

		gnft.Approve(GetOrigPkgAddr(), tid(4))
		StakeToken(4)

		std.TestSkipHeights(1)
	})
}

func testBeforeActive(t *testing.T) {
	t.Run("before active", func(t *testing.T) {
		en.MintAndDistributeGns()
		std.TestSkipHeights(1)
	})
}

func testRewardFor1Block(t *testing.T) {
	t.Run("reward for 1 block of 90 days external", func(t *testing.T) {
		std.TestSkipHeights(849) // in active
		std.TestSkipHeights(1)   // active // but no block passed since active
		std.TestSetRealm(adminRealm)

		CollectReward(1, false)
		CollectReward(2, false)
		CollectReward(3, false)
		CollectReward(4, false)
	})

	t.Run("skip 1 block", func(t *testing.T) {
		std.TestSkipHeights(1)
		std.TestSetRealm(adminRealm)

		/*
			- each staked position's liquidity ratio
			> position01: 13.6317%
			> position02: 84.3710%
			> position03: 1.9902%
			> position04: 0.0069%

			- block per reward 634195
		*/

		t.Run("collect reward position 01", func(t *testing.T) {
			std.TestSetRealm(adminRealm)

			oldQux := qux.BalanceOf(admin)
			CollectReward(1, false)
			newQux := qux.BalanceOf(admin)
			uassert.True(t, isInErrorRange(newQux-oldQux, uint64(59911)))
			// reward 59911
			// penalty 25936
			// total 85847
			// 634195 * 13.6317% = 86451.559815
		})

		t.Run("collect reward position 02", func(t *testing.T) {
			std.TestSetRealm(adminRealm)

			oldQux := qux.BalanceOf(admin)
			CollectReward(2, false)
			newQux := qux.BalanceOf(admin)
			uassert.True(t, isInErrorRange(newQux-oldQux, uint64(370808)))
			// reward 370808
			// penalty 160523
			// total 531331
			// 634195 * 84.3710% = 535076.66345
		})

		t.Run("collect reward position 03", func(t *testing.T) {
			std.TestSetRealm(adminRealm)

			oldQux := qux.BalanceOf(admin)
			CollectReward(3, false)
			newQux := qux.BalanceOf(admin)
			uassert.True(t, isInErrorRange(newQux-oldQux, uint64(8747)))
			// reward 8747
			// penalty 3787
			// total 12534
			// 634195 * 1.9902% = 12621.74889
		})

		t.Run("collect reward position 04", func(t *testing.T) {
			std.TestSetRealm(adminRealm)

			oldQux := qux.BalanceOf(admin)
			CollectReward(4, false)
			newQux := qux.BalanceOf(admin)
			uassert.True(t, isInErrorRange(newQux-oldQux, uint64(30)))
			// reward 30
			// penalty 14
			// total 44
			// 634195 * 0.0069% = 43.759455
		})
	})
}
