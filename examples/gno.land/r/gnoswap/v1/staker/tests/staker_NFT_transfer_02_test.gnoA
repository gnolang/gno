// User 'A' mints and stake NFT (with one click staking)
// user 'A' can collect reward

package staker

import (
	"std"
	"testing"

	"gno.land/p/demo/uassert"

	"gno.land/p/gnoswap/consts"

	pl "gno.land/r/gnoswap/v1/pool"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/qux"

	"gno.land/p/demo/testutils"
)

const (
	ugnotDenom string = "ugnot"
	ugnotPath  string = "ugnot"
	wugnotPath string = "gno.land/r/demo/wugnot"
	gnsPath    string = "gno.land/r/gnoswap/v1/gns"
	barPath    string = "gno.land/r/onbloc/bar"
	bazPath    string = "gno.land/r/onbloc/baz"
	fooPath    string = "gno.land/r/onbloc/foo"
	oblPath    string = "gno.land/r/onbloc/obl"
	quxPath    string = "gno.land/r/onbloc/qux"

	fee100      uint32 = 100
	fee500      uint32 = 500
	fee3000     uint32 = 3000
	maxApprove  uint64 = 18446744073709551615
	max_timeout int64  = 9999999999
)

var (
	// define addresses to use in tests
	addr01 = testutils.TestAddress("addr01")
	addr02 = testutils.TestAddress("addr02")
)

var (
	admin       = consts.ADMIN
	alice       = testutils.TestAddress("alice")
	pool        = consts.POOL_ADDR
	protocolFee = consts.PROTOCOL_FEE_ADDR
	adminRealm  = std.NewUserRealm(admin)
	posRealm    = std.NewCodeRealm(consts.POSITION_PATH)

	// addresses used in tests
	addrUsedInTest = []std.Address{addr01, addr02}
)

func TestNftTransfer02(t *testing.T) {
	testInit(t)
	testPoolCreatePool(t)
	testStakerMintAndStake(t)
	testCollectReward01(t)
}

func testInit(t *testing.T) {
	t.Run("initial", func(t *testing.T) {
		// set pool create fee to 0 for testing
		std.TestSetRealm(adminRealm)
		pl.SetPoolCreationFeeByAdmin(0)
	})
}

func testPoolCreatePool(t *testing.T) {
	t.Run("create pool", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		pl.CreatePool(barPath, quxPath, 500, "130621891405341611593710811006") // tick 10_000 â‰ˆ x2.7
		// tier 1
		SetPoolTierByAdmin(`gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:500`, 1)
		std.TestSkipHeights(1)
	})
}

func testStakerMintAndStake(t *testing.T) {
	t.Run("mint and stake", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		bar.Approve(consts.POOL_ADDR, consts.UINT64_MAX)
		qux.Approve(consts.POOL_ADDR, consts.UINT64_MAX)
		std.TestSkipHeights(2)

		tokenId, _, _, _, _ := MintAndStake(
			barPath, // token0
			quxPath, // token1
			500,     // fee
			9000,    // tickLower
			11000,   // tickUpper
			"1000",  // amount0Desired
			"1000",  // amount1Desired
			"1",     // amount0Min
			"1",     // amount1Min
			max_timeout,
		)
	})
}

func testCollectReward01(t *testing.T) {
	t.Run("collect reward", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		uassert.NotPanics(
			t,
			func() {
				CollectReward(1, false)
			},
			`should not panic`,
		)
	})
}
