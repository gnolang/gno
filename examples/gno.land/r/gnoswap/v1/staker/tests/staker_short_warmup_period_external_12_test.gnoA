// external incentive + warm up period testing
// with two external incentives for same pool
// bar + qux

package staker

import (
	"math"
	"std"
	"testing"

	"gno.land/p/demo/uassert"
	"gno.land/p/gnoswap/consts"

	en "gno.land/r/gnoswap/v1/emission"
	pl "gno.land/r/gnoswap/v1/pool"
	pn "gno.land/r/gnoswap/v1/position"

	"gno.land/r/gnoswap/v1/gnft"
	"gno.land/r/gnoswap/v1/gns"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/qux"
)

func TestShortWarmUpTWoExternalIncentive(t *testing.T) {
	testInit(t)
	testCreatePool(t)
	testMintBarQux100_1(t)
	testCreateExternalIncentiveBar(t)
	testCreateExternalIncentiveQux(t)
	testStakeToken_1(t)
	testBeforeActive(t)
	testAfterActive(t)
	testDuratino200(t)
	testCollectReward(t)
}

func testInit(t *testing.T) {
	t.Run("initialize", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		// override warm-up period for testing
		changeWarmup(t, 0, 150)
		changeWarmup(t, 1, 300)
		changeWarmup(t, 2, 900)
		changeWarmup(t, 3, math.MaxInt64)

		// set unstaking fee to 0
		SetUnStakingFeeByAdmin(0)
	})
}

func testCreatePool(t *testing.T) {
	t.Run("create pool", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gns.Approve(poolAddr, pl.GetPoolCreationFee()*3)

		pl.CreatePool(barPath, quxPath, 100, "79228162514264337593543950337")
		pl.CreatePool(barPath, bazPath, 3000, "79228162514264337593543950337")

		std.TestSkipHeights(1)
	})
}

func testMintBarQux100_1(t *testing.T) {
	t.Run("mint position 01, bar:qux:100", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		bar.Approve(poolAddr, consts.UINT64_MAX)
		qux.Approve(poolAddr, consts.UINT64_MAX)

		positionId, liquidity, amount0, amount1 := pn.Mint(
			barPath,      // token0
			quxPath,      // token1
			fee100,       // fee
			int32(-1000), // tickLower
			int32(1000),  // tickUpper
			"50",         // amount0Desired
			"50",         // amount1Desired
			"1",          // amount0Min
			"1",          // amount1Min
			max_timeout,
			admin,
			admin,
			"",
		)

		uassert.Equal(t, positionId, uint64(1))
		uassert.Equal(t, gnft.MustOwnerOf(positionIdFrom(positionId)), adminAddr)

		std.TestSkipHeights(1)
	})
}

func testCreateExternalIncentiveBar(t *testing.T) {
	t.Run("create external incentive bar", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		bar.Approve(stakerAddr, consts.UINT64_MAX)
		gns.Approve(stakerAddr, depositGnsAmount)

		CreateExternalIncentive(
			"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100",
			barPath,
			20000000,
			1234569600,
			1234569600+TIMESTAMP_90DAYS,
		)

		std.TestSkipHeights(1)
	})
}

func testCreateExternalIncentiveQux(t *testing.T) {
	t.Run("create external incentive qux", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		qux.Approve(stakerAddr, consts.UINT64_MAX)
		gns.Approve(stakerAddr, depositGnsAmount)

		CreateExternalIncentive(
			"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100",
			quxPath,
			20000000,
			1234569600,
			1234569600+TIMESTAMP_90DAYS,
		)

		std.TestSkipHeights(1)
	})
}

func testStakeToken_1(t *testing.T) {
	t.Run("stake token 01", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gnft.Approve(GetOrigPkgAddr(), positionIdFrom(1))
		StakeToken(1, "")

		std.TestSkipHeights(1)
	})
}

func testBeforeActive(t *testing.T) {
	t.Run("before active", func(t *testing.T) {
		en.MintAndDistributeGns()
		std.TestSkipHeights(1)
	})
}

func testAfterActive(t *testing.T) {
	t.Run("after active", func(t *testing.T) {
		std.TestSkipHeights(849) // in active
		std.TestSkipHeights(1)   // active // but no block passed since active
		std.TestSkipHeights(50)  // skip 50 more block

		en.MintAndDistributeGns()
		std.TestSkipHeights(1)
	})
}

func testDuratino200(t *testing.T) {
	t.Run("duration 200", func(t *testing.T) {
		std.TestSkipHeights(199) // skip 1 + 199 = 200 more block
		en.MintAndDistributeGns()
	})
}

func testCollectReward(t *testing.T) {
	t.Run("collect reward", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		oldBar := bar.BalanceOf(admin)
		oldQux := qux.BalanceOf(admin)

		CollectReward(1, false)

		newBar := bar.BalanceOf(admin)
		newQux := qux.BalanceOf(admin)

		uassert.Equal(t, bool(newBar > oldBar), true)
		uassert.Equal(t, bool(newQux > oldQux), true)
	})
}
