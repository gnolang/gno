package staker

import (
	"math"
	"std"
	"testing"

	"gno.land/p/demo/uassert"

	"gno.land/p/gnoswap/consts"

	pl "gno.land/r/gnoswap/v1/pool"
	pn "gno.land/r/gnoswap/v1/position"
	rr "gno.land/r/gnoswap/v1/router"

	"gno.land/r/gnoswap/v1/gnft"
	"gno.land/r/gnoswap/v1/gns"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/qux"
)

var poolPath string = "gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100"

func TestShortWarmUpInternalPositionInOutRangeChangedBySwap(t *testing.T) {
	testInit(t)
	testCreatePool(t)
	testMintBarQux100_1(t)
	testMintBarQux100_2(t)
	testStakeToken_1_2(t)
	testMakePosition1OutRange(t)
	testCheckRewardAfter1Block(t)
}

func testInit(t *testing.T) {
	t.Run("initialize", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		deletePoolTier(t, MUST_EXISTS_IN_TIER_1)
		std.TestSkipHeights(1)

		// override warm-up period for testing
		changeWarmup(t, 0, 150)
		changeWarmup(t, 1, 300)
		changeWarmup(t, 2, 900)
		changeWarmup(t, 3, math.MaxInt64)

		// set unstaking fee to 0
		SetUnStakingFeeByAdmin(0)
	})
}

func testCreatePool(t *testing.T) {
	t.Run("create pool", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gns.Approve(poolAddr, pl.GetPoolCreationFee()*3)

		pl.CreatePool(barPath, quxPath, 100, "79228162514264337593543950337")
		SetPoolTierByAdmin(poolPath, 1)

		std.TestSkipHeights(1)
	})
}

func testMintBarQux100_1(t *testing.T) {
	t.Run("mint position 01, bar:qux:100", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		bar.Approve(poolAddr, consts.UINT64_MAX)
		qux.Approve(poolAddr, consts.UINT64_MAX)

		positionId, liquidity, amount0, amount1 := pn.Mint(
			barPath,    // token0
			quxPath,    // token1
			fee100,     // fee
			int32(-30), // tickLower
			int32(30),  // tickUpper
			"50",       // amount0Desired
			"50",       // amount1Desired
			"1",        // amount0Min
			"1",        // amount1Min
			max_timeout,
			adminAddr,
			adminAddr,
			"",
		)

		uassert.Equal(t, positionId, uint64(1))
		std.TestSkipHeights(1)
	})
}

func testMintBarQux100_2(t *testing.T) {
	t.Run("mint position 02, bar:qux:100", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		bar.Approve(poolAddr, consts.UINT64_MAX)
		qux.Approve(poolAddr, consts.UINT64_MAX)

		positionId, liquidity, amount0, amount1 := pn.Mint(
			barPath,      // token0
			quxPath,      // token1
			fee100,       // fee
			int32(-1000), // tickLower
			int32(1000),  // tickUpper
			"50000",      // amount0Desired
			"50000",      // amount1Desired
			"1",          // amount0Min
			"1",          // amount1Min
			max_timeout,
			adminAddr,
			adminAddr,
			"",
		)

		uassert.Equal(t, positionId, uint64(2))
		std.TestSkipHeights(1)
	})
}

func testStakeToken_1_2(t *testing.T) {
	t.Run("stake position 01, 02", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gnft.Approve(GetOrigPkgAddr(), positionIdFrom(1))
		StakeToken(1, "")

		gnft.Approve(GetOrigPkgAddr(), positionIdFrom(2))
		StakeToken(2, "")

		std.TestSkipHeights(1)

		// clear reward
		CollectReward(1, false)
		CollectReward(2, false)

		std.TestSkipHeights(1)
	})

	/*
		total staked liquidity: 1058618
		> position 01: 33360 || 3.1512783648%
		> position 02: 1025258 || 96.8487216352%

		reward per block: 10702054
		> position 01: 10702054 * 3.1512783648% = 337251.512291213
		 > warmUp 30% => 337251.512291213 * 30% = 101175.4536873639
		> position 02: 10702054 * 96.8487216352% = 10364802.487708787
		 > warmUp 30% => 10364802.487708787 * 30% = 3109440.7463126361
	*/

	t.Run("collect reward position 01, while in-range", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		beforeGns := gns.BalanceOf(admin)
		CollectReward(1, false)
		afterGns := gns.BalanceOf(admin)
		uassert.True(t, isInErrorRange(afterGns-beforeGns, 101175))
		// reward 101175
		// penalty 236076
		// total 337251

	})

	t.Run("collect reward position 02, while in-range", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		beforeGns := gns.BalanceOf(admin)
		CollectReward(2, false)
		afterGns := gns.BalanceOf(admin)
		uassert.True(t, isInErrorRange(afterGns-beforeGns, 3109440))
		// reward 3109440
		// penalty 7255362
		// total 10364802
	})
}

func testMakePosition1OutRange(t *testing.T) {
	t.Run("make position 01 out of range", func(t *testing.T) {
		poolTick := pl.PoolGetSlot0Tick(poolPath)
		uassert.Equal(t, poolTick, int32(0))

		// ROUTER SWAP
		std.TestSetRealm(adminRealm)

		bar.Approve(poolAddr, consts.UINT64_MAX)
		qux.Approve(poolAddr, consts.UINT64_MAX)

		bar.Approve(routerAddr, consts.UINT64_MAX)
		qux.Approve(routerAddr, consts.UINT64_MAX)

		tokenIn, tokenOut := rr.ExactInSwapRoute(
			barPath,
			quxPath,
			"10000",
			"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100",
			"100",
			"0",
			max_timeout,
			"", // referrer
		)
		uassert.Equal(t, tokenIn, "10000")
		uassert.Equal(t, tokenOut, "-9884")
		std.TestSkipHeights(1)

		// position-01 became out-range
		// position-01 is only in-range position
	})
}

func testCheckRewardAfter1Block(t *testing.T) {
	t.Run("check reward position 01, out-range", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		beforeGns := gns.BalanceOf(admin)
		CollectReward(1, false)
		afterGns := gns.BalanceOf(admin)
		uassert.Equal(t, uint64(0), afterGns-beforeGns) // out range has no reward
	})

	t.Run("check reward position 02, in-range", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		beforeGns := gns.BalanceOf(admin)
		CollectReward(2, false)
		afterGns := gns.BalanceOf(admin)
		// reward 3210615
		// penalty 7491438
		// total 10702053

		// since position-01 has become out-range, position-02 is the only in-range position
		// so position-02 will get entire block reward
	})
}
