package staker

import (
	"std"
	"testing"

	"gno.land/r/gnoswap/v1/common"
	"gno.land/r/gnoswap/v1/gns"
	pl "gno.land/r/gnoswap/v1/pool"
)

func TestManagePoolTiers(t *testing.T) {
	testCreatePool(t)
	testSetPoolTierByAdmin(t)
	testChangePoolTierByAdmin(t)
	testSetAnotherPoolTier3(t)
	testRemovePoolTierByAdmin(t)
}

func testCreatePool(t *testing.T) {
	t.Run("create pool", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gns.Approve(poolAddr, pl.GetPoolCreationFee()*2)
		std.TestSkipHeights(1)

		pl.CreatePool(barPath, fooPath, 500, common.TickMathGetSqrtRatioAtTick(-10000).ToString())
		pl.CreatePool(barPath, fooPath, 100, common.TickMathGetSqrtRatioAtTick(-10000).ToString())

		std.TestSkipHeights(1)
	})
}

func testSetPoolTierByAdmin(t *testing.T) {
	t.Run("set pool tier by admin", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		SetPoolTierByAdmin("gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500", 2)

		if poolTier.CurrentTier("gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500") != 2 {
			t.Error("Expected tier to be 2")
		}
	})
}

func testChangePoolTierByAdmin(t *testing.T) {
	t.Run("change pool tier by admin", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		ChangePoolTierByAdmin("gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500", 3)

		if poolTier.CurrentTier("gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500") != 3 {
			t.Error("Expected tier to be 3")
		}
	})
}

func testSetAnotherPoolTier3(t *testing.T) {
	t.Run("set another pool tier 3", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		SetPoolTierByAdmin("gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:100", 3)

		if poolTier.CurrentTier("gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:100") != 3 {
			t.Error("Expected tier to be 3")
		}
	})
}

func testRemovePoolTierByAdmin(t *testing.T) {
	t.Run("remove pool tier by admin", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		RemovePoolTierByAdmin("gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")

		if poolTier.CurrentTier("gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500") != 0 {
			t.Error("Expected tier to be 0")
		}
	})
}
