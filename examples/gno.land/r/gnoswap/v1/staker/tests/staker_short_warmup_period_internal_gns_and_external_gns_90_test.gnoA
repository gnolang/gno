// internal and external incentive + warm up period testing
// with two external incentives for same pool
// 	bar + gns
// with internal incentive for same pool

package staker

import (
	"math"
	"std"
	"testing"

	"gno.land/p/demo/uassert"
	"gno.land/p/gnoswap/consts"

	pl "gno.land/r/gnoswap/v1/pool"
	pn "gno.land/r/gnoswap/v1/position"

	"gno.land/r/gnoswap/v1/gnft"
	"gno.land/r/gnoswap/v1/gns"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/qux"
)

func TestShortWarmUpInternalAndExternalAllPositionInRange(t *testing.T) {
	testInit(t)
	testCreatePool(t)
	testMintBarQux100_1(t)
	testCreateExternalIncentiveBar(t)
	testCreateExternalIncentiveGns(t)
	testStakeToken_1(t)
	testAfterActive(t)
	testCollectRewardSingleBlock(t)
	// testCollectRewardSameBlockNoReward(t)
}

func testInit(t *testing.T) {
	t.Run("initialize", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		deletePoolTier(t, MUST_EXISTS_IN_TIER_1)

		// override warm-up period for testing
		changeWarmup(t, 0, 150)
		changeWarmup(t, 1, 300)
		changeWarmup(t, 2, 900)
		changeWarmup(t, 3, math.MaxInt64)

		// set unstaking fee to 0
		SetUnStakingFeeByAdmin(0)

		changeWarmup(t, 0, 150)
		changeWarmup(t, 1, 300)
		changeWarmup(t, 2, 900)
		changeWarmup(t, 3, math.MaxInt64)
	})
}

func testCreatePool(t *testing.T) {
	t.Run("create pool", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gns.Approve(consts.POOL_ADDR, pl.GetPoolCreationFee()*3)

		pl.CreatePool(barPath, quxPath, 100, "79228162514264337593543950337")
		SetPoolTierByAdmin(`gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100`, 1)

		pl.CreatePool(barPath, bazPath, 3000, "79228162514264337593543950337")
		std.TestSkipHeights(1)
	})
}

func testMintBarQux100_1(t *testing.T) {
	t.Run("mint position 01, bar:qux:100", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		bar.Approve(consts.POOL_ADDR, consts.UINT64_MAX)
		qux.Approve(consts.POOL_ADDR, consts.UINT64_MAX)

		tokenId, liquidity, amount0, amount1 := pn.Mint(
			barPath,      // token0
			quxPath,      // token1
			fee100,       // fee
			int32(-1000), // tickLower
			int32(1000),  // tickUpper
			"50",         // amount0Desired
			"50",         // amount1Desired
			"1",          // amount0Min
			"1",          // amount1Min
			max_timeout,
			adminAddr,
			adminAddr,
		)

		uassert.Equal(t, tokenId, uint64(1))
		owner, err := gnft.OwnerOf(tid(tokenId))
		uassert.NoError(t, err)
		uassert.Equal(t, owner, admin)

		std.TestSkipHeights(1)
	})
}

func testCreateExternalIncentiveBar(t *testing.T) {
	t.Run("create external incentive bar", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		bar.Approve(consts.STAKER_ADDR, consts.UINT64_MAX)
		gns.Approve(consts.STAKER_ADDR, depositGnsAmount)

		CreateExternalIncentive(
			"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100",
			barPath,
			200000000,
			1234569600,
			1234569600+TIMESTAMP_90DAYS,
		)

		std.TestSkipHeights(1)
	})
}

func testCreateExternalIncentiveGns(t *testing.T) {
	t.Run("create external incentive gns", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gns.Approve(consts.STAKER_ADDR, consts.UINT64_MAX)

		CreateExternalIncentive(
			"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100",
			consts.GNS_PATH,
			500000000,
			1234569600,
			1234569600+TIMESTAMP_90DAYS,
		)
		std.TestSkipHeights(1)
	})
}

func testStakeToken_1(t *testing.T) {
	t.Run("stake token 01", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gnft.Approve(consts.STAKER_ADDR, tid(1))
		StakeToken(1)

		std.TestSkipHeights(1)
	})
}

func testAfterActive(t *testing.T) {
	t.Run("after active", func(t *testing.T) {
		std.TestSkipHeights(978 - std.GetHeight() - 1) // in active
		std.TestSkipHeights(1)                         // active // but no block passed since active
		std.TestSkipHeights(50)                        // skip 50 more block

		std.TestSkipHeights(1)

		// clear reward
		std.TestSetRealm(adminRealm)
		CollectReward(1, false)
	})
}

func testCollectRewardSingleBlock(t *testing.T) {
	t.Run("collect reward", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		oldBar := bar.BalanceOf(admin)
		oldGns := gns.BalanceOf(admin)

		std.TestSkipHeights(1)
		CollectReward(1, false)
		// 1 block passed
		// position warmup is 70%

		newBar := bar.BalanceOf(admin)
		newGns := gns.BalanceOf(admin)

		// external: bar ( this incentive program reward per block is 51)
		// reward 35
		// penalty 15

		// external: gns ( this incentive program reward per block is 128)
		// reward 88
		// penalty 39

		// internal: gns
		// reward 7491437
		// penalty 3210616
		// total 10702053

		// gns increased by 2 reasons
		// internal + external

		// bar increased by 1 reason
		// external

		barReward := newBar - oldBar
		uassert.Equal(t, barReward, uint64(35))

		gnsReward := newGns - oldGns
		uassert.Equal(t, gnsReward, uint64(88+7491437))
	})
}

func testCollectRewardSameBlockNoReward(t *testing.T) {
	t.Run("collect reward same block no reward", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		oldBar := bar.BalanceOf(admin)
		oldGns := gns.BalanceOf(admin)

		CollectReward(1, false)

		newBar := bar.BalanceOf(admin)
		newGns := gns.BalanceOf(admin)

		// same block, no reward
		uassert.Equal(t, newBar-oldBar, uint64(0))
		uassert.Equal(t, newGns-oldGns, uint64(0))
	})
}
