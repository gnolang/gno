// PKGPATH: gno.land/r/gnoswap/v1/staker_test

// POOLs:
// 1. gnot:gns:3000
// 2. bar:baz:100

// POSITIONs:
// 1. in-range ( gnot:gns:3000 )
// 2. in-range ( bar:baz:100 )

// REWARDs:
// - internal tier 1 ( gnot:gns:3000 )
// - internal tier 2 ( bar:baz:100 ) -> will be changed to tier 3

package staker_test

import (
	"std"
	"strconv"

	"gno.land/p/demo/grc/grc721"
	"gno.land/p/demo/testutils"

	"gno.land/p/gnoswap/consts"
	"gno.land/r/gnoswap/v1/common"
	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/baz"

	"gno.land/r/demo/wugnot"

	"gno.land/r/gnoswap/v1/access"

	"gno.land/r/gnoswap/v1/gnft"
	"gno.land/r/gnoswap/v1/gns"

	pl "gno.land/r/gnoswap/v1/pool"
	pn "gno.land/r/gnoswap/v1/position"
	sr "gno.land/r/gnoswap/v1/staker"
)

var (
	adminAddr, _ = access.GetAddress(access.ROLE_ADMIN)
	adminUser    = adminAddr
	adminRealm   = std.NewUserRealm(adminAddr)

	// g1v4u8getjdeskcsmjv4shgmmjta047h6lua7mup
	externalCreatorAddr = testutils.TestAddress("externalCreator")

	stakerAddr, _ = access.GetAddress(access.ROLE_STAKER)
	poolAddr, _   = access.GetAddress(access.ROLE_POOL)

	wugnotAddr = consts.WUGNOT_ADDR

	barPath = "gno.land/r/onbloc/bar"
	bazPath = "gno.land/r/onbloc/baz"

	gnsPath    = "gno.land/r/gnoswap/v1/gns"
	wugnotPath = "gno.land/r/demo/wugnot"

	fee100  uint32 = 100
	fee3000 uint32 = 3000

	max_timeout int64 = 9999999999
)

func main() {
	testInit()
	testCreatePool()

	testMintAndStakeWugnotGnsPos01()

	testSetPoolTier2() // new pool is set to tier 2
	testMintAndStakeBarBazPos02()

	testChangePoolTier3() // pool is changed to tier 3
}

func testInit() {
	testing.SetRealm(adminRealm)

	// prepare wugnot
	testing.IssueCoins(adminAddr, std.Coins{{"ugnot", 100_000_000_000_000}})
	banker := std.NewBanker(std.BankerTypeRealmSend)
	banker.SendCoins(adminAddr, wugnotAddr, std.Coins{{"ugnot", 50_000_000_000_000}})
	testing.SetOriginSend(std.Coins{{"ugnot", 50_000_000_000_000}})
	cross(wugnot.Deposit)()
	testing.SetOriginSend(nil)

	// set unstaking fee to 0
	sr.SetUnStakingFeeByAdmin(0)
}

func testCreatePool() {
	testing.SetRealm(adminRealm)

	cross(pl.SetPoolCreationFeeByAdmin)(0)

	testing.SkipHeights(1)
	pl.CreatePool(
		wugnotPath,
		gnsPath,
		fee3000,
		common.TickMathGetSqrtRatioAtTick(0).ToString(), // 79228162514264337593543950337
	)
	pl.CreatePool(
		barPath,
		bazPath,
		fee100,
		common.TickMathGetSqrtRatioAtTick(0).ToString(), // 79228162514264337593543950337
	)
}

func testMintAndStakeWugnotGnsPos01() {
	testing.SetRealm(adminRealm)

	cross(wugnot.Approve)(poolAddr, consts.UINT64_MAX)
	gns.Approve(poolAddr, consts.UINT64_MAX)

	testing.SkipHeights(1)
	cross(pn.Mint)(
		wugnotPath,
		gnsPath,
		fee3000,
		int32(-60),
		int32(60),
		"100",
		"100",
		"0",
		"0",
		max_timeout,
		adminAddr,
		adminAddr,
	)

	gnft.Approve(stakerAddr, positionIdFrom(1))
	sr.StakeToken(1, "")

	testing.SkipHeights(1)
	{
		// check reward for position 01 (gnot:gns:3000 tier 01)
		testing.SetRealm(adminRealm)
		beforeGns := gns.BalanceOf(adminUser)
		sr.CollectReward(1, false)
		afterGns := gns.BalanceOf(adminUser)
		diff := afterGns - beforeGns
		if !isInErrorRange(3210615, diff) {
			panic("expected about 3210615") // 10702054 * 100%(tier1 ratio) * 30%(warmUp)
		}
	}
}

func testSetPoolTier2() {
	testing.SetRealm(adminRealm)

	testing.SkipHeights(1)
	sr.SetPoolTierByAdmin("gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:100", 2)
}

func testMintAndStakeBarBazPos02() {
	testing.SetRealm(adminRealm)

	bar.Approve(poolAddr, consts.UINT64_MAX)
	baz.Approve(poolAddr, consts.UINT64_MAX)

	testing.SkipHeights(1)
	cross(pn.Mint)(
		barPath,
		bazPath,
		fee100,
		int32(-50),
		int32(50),
		"100",
		"100",
		"0",
		"0",
		max_timeout,
		adminAddr,
		adminAddr,
	)

	gnft.Approve(stakerAddr, positionIdFrom(2))
	sr.StakeToken(2, "")

	testing.SkipHeights(1)
	{
		// check reward for position 02 (bar:baz:100 tier 02)
		testing.SetRealm(adminRealm)
		beforeGns := gns.BalanceOf(adminUser)
		sr.CollectReward(2, false)
		afterGns := gns.BalanceOf(adminUser)
		diff := afterGns - beforeGns
		if !isInErrorRange(963184, diff) { // 10702054 * 30%(tier2 ratio) * 30% (warmUp)
			panic("expected about 963184")
		}
	}
}

func testChangePoolTier3() {
	testing.SetRealm(adminRealm)

	sr.ChangePoolTierByAdmin("gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:100", 3)

	testing.SkipHeights(1)
	{
		// check reward for position 02 (bar:baz:100 tier 02)
		testing.SetRealm(adminRealm)
		beforeGns := gns.BalanceOf(adminUser)
		sr.CollectReward(2, false)
		afterGns := gns.BalanceOf(adminUser)
		diff := afterGns - beforeGns
		if !isInErrorRange(642122, diff) { // 10702054 * 20%(tier3 ratio) * 30% (warmUp)
			panic("expected about 642122")
		}
	}
}

func positionIdFrom(positionId any) grc721.TokenID {
	if positionId == nil {
		panic("positionId is nil")
	}

	switch positionId.(type) {
	case string:
		return grc721.TokenID(positionId.(string))
	case int:
		return grc721.TokenID(strconv.Itoa(positionId.(int)))
	case uint64:
		return grc721.TokenID(strconv.Itoa(int(positionId.(uint64))))
	case grc721.TokenID:
		return positionId.(grc721.TokenID)
	default:
		panic("unsupported positionId type")
	}
}
