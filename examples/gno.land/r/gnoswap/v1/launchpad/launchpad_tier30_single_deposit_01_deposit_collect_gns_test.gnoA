package launchpad

import (
	"std"
	"testing"
	"time"

	"gno.land/p/demo/testutils"
	"gno.land/p/demo/uassert"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/foo"
	"gno.land/r/onbloc/obl"

	"gno.land/r/gnoswap/v1/gns"
)

var (
	user01      = testutils.TestAddress("user01")
	user01Realm = std.NewUserRealm(user01)
)

func TestCollectGns(t *testing.T) {
	t.Skip("fix this code")
	testCreateProject(t)
	depositGnsTier(t)
	collectDepositGns(t)
}

func testCreateProject(t *testing.T) {
	std.TestSetRealm(adminRealm)

	obl.Approve(launchpadAddr, uint64(1_000_000_000))
	std.TestSkipHeights(1)

	t.Run("check before project create", func(t *testing.T) {
		// check before project create
		uassert.Equal(t, len(projects), 0)
		uassert.Equal(t, len(deposits), 0)
		uassert.Equal(t, len(depositsByProject), 0)
		uassert.Equal(t, len(depositsByUser), 0)
	})

	t.Run("create project", func(t *testing.T) {
		projectId := CreateProject(
			"Obl Protocol",
			oblPath,
			projectAddr,
			uint64(1_000_000_000), // 1000000000
			"gno.land/r/onbloc/foo*PAD*gno.land/r/onbloc/bar",
			"1*PAD*2",
			uint64(10),                   // 100000000
			uint64(20),                   // 200000000
			uint64(70),                   // 700000000
			uint64(time.Now().Unix()+10), // 10s later
		)
		uassert.Equal(t, projectId, `gno.land/r/onbloc/obl:124`)
		std.TestSkipHeights(1)
	})

	t.Run("check after project create", func(t *testing.T) {
		// check after project create
		uassert.Equal(t, len(projects), 1)

		project := projects[`gno.land/r/onbloc/obl:124`]
		uassert.Equal(t, project.id, `gno.land/r/onbloc/obl:124`)
		uassert.Equal(t, project.tokenPath, `gno.land/r/onbloc/obl`)
		uassert.Equal(t, project.depositAmount, uint64(1000000000))
		uassert.Equal(t, project.recipient, projectAddr)

		uassert.Equal(t, project.conditions[`gno.land/r/onbloc/foo`].minAmount, uint64(1))
		uassert.Equal(t, project.conditions[`gno.land/r/onbloc/bar`].minAmount, uint64(2))

		tier30 := project.tiers[30]
		uassert.Equal(t, tier30.id, `gno.land/r/onbloc/obl:124:30`)
		uassert.Equal(t, tier30.collectWaitDuration, uint64(90)) // block range for 3 days based on 2s per block
		uassert.Equal(t, tier30.tierAmount, uint64(100000000))
		uassert.NotEqual(t, tier30.tierAmountPerBlockX128.ToString(), `0`)
		uassert.Equal(t, tier30.ended.time, project.started.time+TIMESTAMP_30DAYS)
		uassert.Equal(t, tier30.actualDepositAmount, uint64(0))
		uassert.Equal(t, tier30.actualParticipant, uint64(0))

		tier90 := project.tiers[90]
		uassert.Equal(t, tier90.id, `gno.land/r/onbloc/obl:124:90`)
		uassert.Equal(t, tier90.collectWaitDuration, uint64(210)) // block range for 7 days based on 2s per block
		uassert.Equal(t, tier90.tierAmount, uint64(200000000))
		uassert.NotEqual(t, tier90.tierAmountPerBlockX128.ToString(), `0`)
		uassert.Equal(t, tier90.ended.time, project.started.time+TIMESTAMP_90DAYS)
		uassert.Equal(t, tier90.actualDepositAmount, uint64(0))
		uassert.Equal(t, tier90.actualParticipant, uint64(0))

		tier180 := project.tiers[180]
		uassert.Equal(t, tier180.id, `gno.land/r/onbloc/obl:124:180`)
		uassert.Equal(t, tier180.collectWaitDuration, uint64(420)) // block range for 7 days based on 2s per block
		uassert.Equal(t, tier180.tierAmount, uint64(700000000))
		uassert.NotEqual(t, tier180.tierAmountPerBlockX128.ToString(), `0`)
		uassert.Equal(t, tier180.ended.time, project.started.time+TIMESTAMP_180DAYS)
		uassert.Equal(t, tier180.actualDepositAmount, uint64(0))
		uassert.Equal(t, tier180.actualParticipant, uint64(0))

		uassert.Equal(t, project.created.height, uint64(124))
		uassert.Equal(t, project.created.time, uint64(1234567892))

		uassert.Equal(t, project.started.time, uint64(1234567902))
		uassert.Equal(t, project.stats.totalDeposit, uint64(0))
		uassert.Equal(t, project.stats.totalParticipant, uint64(0))

		uassert.Equal(t, len(deposits), 0)
		uassert.Equal(t, len(depositsByProject), 0)
		uassert.Equal(t, len(depositsByUser), 0)
	})
}

func depositGnsTier(t *testing.T) {
	std.TestSetRealm(adminRealm)
	gns.Transfer(user01, uint64(1_000_000)) // to deposit
	// transfer some grc20 tokens to bypass project condition
	foo.Transfer(user01, uint64(10))
	bar.Transfer(user01, uint64(10))

	std.TestSetRealm(user01Realm)
	gns.Approve(launchpadAddr, uint64(1_000_000))

	t.Run("check before deposit", func(t *testing.T) {
		// check before deposit
		uassert.Equal(t, len(projects), 1)

		project := projects[`gno.land/r/onbloc/obl:124`]

		tier30 := project.tiers[30]
		uassert.Equal(t, tier30.id, `gno.land/r/onbloc/obl:124:30`)
		uassert.Equal(t, tier30.collectWaitDuration, uint64(90))
		uassert.Equal(t, tier30.tierAmount, uint64(100000000))
		uassert.NotEqual(t, tier30.tierAmountPerBlockX128.ToString(), `0`)
		uassert.Equal(t, tier30.ended.time, project.started.time+TIMESTAMP_30DAYS)
		uassert.Equal(t, tier30.actualDepositAmount, uint64(0))
		uassert.Equal(t, tier30.actualParticipant, uint64(0))

		uassert.Equal(t, len(deposits), 0)
		uassert.Equal(t, len(depositsByProject), 0)
		uassert.Equal(t, len(depositsByUser), 0)
	})

	t.Run("deposit", func(t *testing.T) {
		// skip some blocks to make project active
		std.TestSkipHeights(4)
		depositId := DepositGns("gno.land/r/onbloc/obl:124:30", uint64(1_000_000), "") // 1000000
		uassert.Equal(t, depositId, `gno.land/r/onbloc/obl:124:30:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:129`)
		std.TestSkipHeights(1)
	})

	t.Run("check after deposit", func(t *testing.T) {
		// check after deposit
		uassert.Equal(t, len(projects), 1)

		project := projects[`gno.land/r/onbloc/obl:124`]

		tier30 := project.tiers[30]
		uassert.Equal(t, tier30.id, `gno.land/r/onbloc/obl:124:30`)
		uassert.Equal(t, tier30.collectWaitDuration, uint64(90))
		uassert.Equal(t, tier30.tierAmount, uint64(100000000))
		uassert.NotEqual(t, tier30.tierAmountPerBlockX128.ToString(), `0`)
		uassert.Equal(t, tier30.ended.time, project.started.time+TIMESTAMP_30DAYS)
		uassert.Equal(t, tier30.actualDepositAmount, uint64(1000000))
		uassert.Equal(t, tier30.actualParticipant, uint64(1))

		//
		uassert.Equal(t, len(deposits), 1)
		deposit := deposits[`gno.land/r/onbloc/obl:124:30:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:129`]
		uassert.Equal(t, deposit.id, `gno.land/r/onbloc/obl:124:30:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:129`)
		uassert.Equal(t, deposit.projectId, `gno.land/r/onbloc/obl:124`)
		uassert.Equal(t, deposit.tier, `30`)
		uassert.Equal(t, deposit.depositor, user01)
		uassert.Equal(t, deposit.amount, uint64(1000000))
		uassert.Equal(t, deposit.depositHeight, uint64(129))
		uassert.Equal(t, deposit.depositTime, uint64(1234567902))
		uassert.Equal(t, deposit.depositCollectHeight, uint64(0))
		uassert.Equal(t, deposit.depositCollectTime, uint64(0))
		uassert.Equal(t, deposit.rewardCollectHeight, uint64(0))
		uassert.Equal(t, deposit.rewardCollectTime, uint64(0))

		//
		uassert.Equal(t, len(depositsByProject), 1)
		uassert.Equal(t, depositsByProject[`gno.land/r/onbloc/obl:124`][`30`][0], `gno.land/r/onbloc/obl:124:30:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:129`)

		//
		uassert.Equal(t, len(depositsByUser), 1)
		uassert.Equal(t, depositsByUser[`g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv`][0], `gno.land/r/onbloc/obl:124:30:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:129`)

	})
}

func collectDepositGns(t *testing.T) {
	std.TestSetRealm(user01Realm)

	t.Run("claim before 30 days", func(t *testing.T) {
		claimed := CollectDepositGns()
		std.TestSkipHeights(1)
		uassert.Equal(t, claimed, uint64(0))
	})

	t.Run("claim after 30 days", func(t *testing.T) {
		std.TestSkipHeights(int64(TIMESTAMP_30DAYS) / 2)
		claimed := CollectDepositGns()
		uassert.Equal(t, claimed, uint64(1_000_000))
	})

	t.Run("no more claim in same block", func(t *testing.T) {
		claimed := CollectDepositGns()
		std.TestSkipHeights(1)
		uassert.Equal(t, claimed, uint64(0))
	})

	// check deposit
	uassert.Equal(t, len(deposits), 1)
	deposit := deposits[`gno.land/r/onbloc/obl:124:30:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:129`]
	uassert.Equal(t, deposit.id, `gno.land/r/onbloc/obl:124:30:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:129`)
	uassert.Equal(t, deposit.projectId, `gno.land/r/onbloc/obl:124`)
	uassert.Equal(t, deposit.tier, `30`)
	uassert.Equal(t, deposit.depositor, user01)
	uassert.Equal(t, deposit.amount, uint64(1000000))
	uassert.Equal(t, deposit.depositHeight, uint64(129))
	uassert.Equal(t, deposit.depositTime, uint64(1234567902))
	uassert.Equal(t, deposit.depositCollectHeight, uint64(1031))
	uassert.Equal(t, deposit.depositCollectTime, uint64(1234569706))
	uassert.Equal(t, deposit.amount, uint64(99999999))
	uassert.Equal(t, deposit.rewardCollectHeight, uint64(0))
	uassert.Equal(t, deposit.rewardCollectTime, uint64(0))

	//
	uassert.Equal(t, len(depositsByProject), 1)
	uassert.Equal(t, depositsByProject[`gno.land/r/onbloc/obl:124`][`30`][0], `gno.land/r/onbloc/obl:124:30:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:129`)

	//
	uassert.Equal(t, len(depositsByUser), 1)
	uassert.Equal(t, depositsByUser[`g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv`][0], `gno.land/r/onbloc/obl:124:30:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:129`)

	// check project
	project := projects[`gno.land/r/onbloc/obl:124`]
	tier30 := project.tiers[30]
	uassert.Equal(t, tier30.id, `gno.land/r/onbloc/obl:124:30`)
	uassert.Equal(t, tier30.tierAmount, uint64(100000000))
	uassert.Equal(t, tier30.actualDepositAmount, uint64(0))
	uassert.Equal(t, tier30.actualParticipant, uint64(0))
}
