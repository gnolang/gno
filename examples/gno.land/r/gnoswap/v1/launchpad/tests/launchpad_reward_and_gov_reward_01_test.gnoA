package launchpad

import (
	"std"
	"testing"
	"time"

	"gno.land/p/demo/testutils"
	"gno.land/p/demo/uassert"
	"gno.land/p/gnoswap/consts"
	"gno.land/r/gnoswap/v1/gns"

	gs "gno.land/r/gnoswap/v1/gov/staker"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/obl"
	"gno.land/r/onbloc/qux"
)

var (
	launchpadRecipientAddr = testutils.TestAddress("launchpadRecipient")
	launchpadDepositAddr   = testutils.TestAddress("launchpadDeposit")
	launchpadDepositRealm  = std.NewUserRealm(launchpadDepositAddr)
	govDelegateAddr        = testutils.TestAddress("govDelegate")
	govDelegateRealm       = std.NewUserRealm(govDelegateAddr)
)

func init() {
	std.TestSetRealm(adminRealm)
	gns.Transfer(launchpadDepositAddr, uint64(1_000_000_000))
	gns.Transfer(govDelegateAddr, uint64(1_000_000_000))
}

func TestLaunchPadAndGovernanceReward(t *testing.T) {
	t.Skip("fix this code")
	testCreateProject(t)
	testDepositGnsToTier30(t)
	testGovDelegate(t)
	testMockProtocolFee(t)
	testClaimableRewardForProjectRecipient(t)
	testClaimableRewardForGovernanceDelegate(t)
}

func testCreateProject(t *testing.T) {
	t.Run("create project", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		obl.Approve(launchpadAddr, uint64(1_000_000_000))
		std.TestSkipHeights(1)

		projectId := CreateProject(
			"Obl Protocol",
			oblPath,
			launchpadRecipientAddr,
			uint64(1_000_000_000), // 1000000000
			"",
			"",
			uint64(10),                   // 100000000
			uint64(20),                   // 200000000
			uint64(70),                   // 700000000
			uint64(time.Now().Unix()+10), // 10s later
		)
		uassert.Equal(t, projectId, `gno.land/r/onbloc/obl:124`)
		std.TestSkipHeights(1)
	})
}

func testDepositGnsToTier30(t *testing.T) {
	t.Run("deposit gns to tier 30", func(t *testing.T) {
		std.TestSetRealm(launchpadDepositRealm)
		gns.Approve(launchpadAddr, uint64(1_000_000_000))

		// skip some blocks to make project active
		std.TestSkipHeights(4)
		depositId := DepositGns("gno.land/r/onbloc/obl:124:30", uint64(1_000_000_000), "") // 1000000
		uassert.Equal(t, depositId, `gno.land/r/onbloc/obl:124:30:g1d3sh2mnrdpcxzezyv4cx7umfw3047h6l29lj5t:129`)
		std.TestSkipHeights(1)
	})
}

func testGovDelegate(t *testing.T) {
	t.Run("delegate to gov", func(t *testing.T) {
		std.TestSetRealm(govDelegateRealm)
		gns.Approve(govStakerAddr, uint64(1_000_000_000))
		gs.Delegate(govDelegateAddr, uint64(1_000_000_000), "")
		std.TestSkipHeights(1)
	})
}

func testMockProtocolFee(t *testing.T) {
	t.Run("mock protocol fee", func(t *testing.T) {
		// admin > protocol_fee
		// send qux, bar for testing
		std.TestSetRealm(adminRealm)
		bar.Transfer(protocolFeeAddr, 100_000)
		qux.Transfer(protocolFeeAddr, 250_000)

		uassert.Equal(t, bar.BalanceOf(protocolFeeAddr), uint64(100000))
		uassert.Equal(t, bar.BalanceOf(devOpsAddr), uint64(0))
		uassert.Equal(t, bar.BalanceOf(govStakerAddr), uint64(0))

		uassert.Equal(t, qux.BalanceOf(protocolFeeAddr), uint64(250000))
		uassert.Equal(t, qux.BalanceOf(devOpsAddr), uint64(0))
		uassert.Equal(t, qux.BalanceOf(govStakerAddr), uint64(0))
		std.TestSkipHeights(1)
	})
}

func testClaimableRewardForProjectRecipient(t *testing.T) {
	t.Run("check claimable reward for project recipient", func(t *testing.T) {
		res := ApiGetProjectRecipientRewardByAddress(launchpadRecipientAddr)
		uassert.Equal(t, res, `{"height":"132","now":"1234567908","emissionReward":"0","protocolFees":[{"tokenPath":"gno.land/r/onbloc/bar","amount":"50000"},{"tokenPath":"gno.land/r/onbloc/qux","amount":"125000"}]}`)
		// bar 99
		// qux 249
	})
}

func testClaimableRewardForGovernanceDelegate(t *testing.T) {
	t.Run("check claimable reward for governance delegate", func(t *testing.T) {
		res := gs.GetClaimableRewardByAddress(govDelegateAddr)
		uassert.Equal(t, res, `{"height":"132","now":"1234567908","emissionReward":"0","protocolFees":[{"tokenPath":"gno.land/r/onbloc/bar","amount":"50000"},{"tokenPath":"gno.land/r/onbloc/qux","amount":"125000"}]}`)
		// bar 99900
		// qux 249750
	})
}
