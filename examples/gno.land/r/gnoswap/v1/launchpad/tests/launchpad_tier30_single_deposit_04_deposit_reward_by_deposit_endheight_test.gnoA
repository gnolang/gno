package launchpad

import (
	"std"
	"testing"
	"time"

	"gno.land/p/demo/testutils"
	"gno.land/p/demo/uassert"
	"gno.land/p/gnoswap/consts"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/foo"
	"gno.land/r/onbloc/obl"

	"gno.land/r/gnoswap/v1/gns"
)

var (
	projectAddr = testutils.TestAddress("projectAddr")
	user01      = testutils.TestAddress("user01")

	projectRealm = std.NewUserRealm(projectAddr)
	user01Realm  = std.NewUserRealm(user01)
)

func TestCollectRewardByDepositIdEndHeight(t *testing.T) {
	t.Skip("fix this code")
	testCreateProject(t)
	depositGnsTier(t)
	collectRewardByDepositId(t)
}

func testCreateProject(t *testing.T) {
	t.Run("create project", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		obl.Approve(consts.LAUNCHPAD_ADDR, uint64(1_000_000_000))
		std.TestSkipHeights(1)

		projectId := CreateProject(
			"Obl Protocol",
			oblPath,
			projectAddr,
			uint64(1_000_000_000), // 1000000000
			"gno.land/r/onbloc/foo*PAD*gno.land/r/onbloc/bar",
			"1*PAD*2",
			uint64(10),                   // 100000000
			uint64(20),                   // 200000000
			uint64(70),                   // 700000000
			uint64(time.Now().Unix()+10), // 10s later
		)
		uassert.Equal(t, projectId, `gno.land/r/onbloc/obl:124`)
		std.TestSkipHeights(1)
	})
}

func depositGnsTier(t *testing.T) {
	t.Run("deposit gns to tier 30", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		gns.Transfer(user01, uint64(1_000_000)) // to deposit
		// transfer some grc20 tokens to bypass project condition
		foo.Transfer(user01, uint64(10))
		bar.Transfer(user01, uint64(10))

		std.TestSetRealm(user01Realm)
		gns.Approve(consts.LAUNCHPAD_ADDR, uint64(1_000_000))

		// skip some blocks to make project active(= few block before tier end height)
		// > tier30 will end `1029` // tier30 end height
		// > current height is `125`
		// > diff is `1029 - 125 = 904`
		std.TestSkipHeights(900) // 4 block before tier30 end

		depositId := DepositGns("gno.land/r/onbloc/obl:124:30", uint64(1_000_000))
		uassert.Equal(t, depositId, `gno.land/r/onbloc/obl:124:30:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:1025`)
		std.TestSkipHeights(1)
	})
}

func collectRewardByDepositId(t *testing.T) {
	std.TestSetRealm(user01Realm)

	t.Run("claim reward before 3 days(for 30day tier's init reward)", func(t *testing.T) {
		reward := CollectRewardByDepositId(`gno.land/r/onbloc/obl:124:30:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:1025`)
		uassert.Equal(t, reward, uint64(0))
		std.TestSkipHeights(1)
	})

	t.Run("claim after tier30 ends", func(t *testing.T) {
		std.TestSkipHeights(5)

		tier30EndHeight := projects[`gno.land/r/onbloc/obl:124`].tiers[30].ended.height
		currHeight := uint64(std.GetHeight())
		uassert.Equal(t, bool(tier30EndHeight < currHeight), true)

		reward := CollectRewardByDepositId(`gno.land/r/onbloc/obl:124:30:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:1025`)
		uassert.Equal(t, reward, uint64(100000000))
	})
}
