package launchpad

import (
	"std"
	"testing"
	"time"

	"gno.land/p/demo/testutils"
	"gno.land/p/demo/uassert"

	"gno.land/p/gnoswap/consts"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/foo"
	"gno.land/r/onbloc/obl"

	"gno.land/r/gnoswap/v1/gns"
)

var (
	projectAddr = testutils.TestAddress("projectAddr")
	user01      = testutils.TestAddress("user01")

	projectRealm = std.NewUserRealm(projectAddr)
	user01Realm  = std.NewUserRealm(user01)
)

func TestTier180RewardByTier(t *testing.T) {
	t.Skip("fix this code")
	testCreateProject(t)
	testDepositGnsTier30(t)
	testCollectRewardTier30(t)
	testDepositGnsTier180(t)
	testCollectRewardTier180(t)
}

func testCreateProject(t *testing.T) {
	t.Run("create project", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		obl.Approve(consts.LAUNCHPAD_ADDR, uint64(1_000_000_000))
		std.TestSkipHeights(1)

		projectId := CreateProject(
			"Obl Protocol",
			oblPath,
			projectAddr,
			uint64(1_000_000_000), // 1000000000
			"gno.land/r/onbloc/foo*PAD*gno.land/r/onbloc/bar",
			"1*PAD*2",
			uint64(10),                   // 100000000
			uint64(20),                   // 200000000
			uint64(70),                   // 700000000
			uint64(time.Now().Unix()+10), // 10s later
		)
		uassert.Equal(t, projectId, `gno.land/r/onbloc/obl:124`)
		std.TestSkipHeights(1)
	})
}

func testDepositGnsTier30(t *testing.T) {
	t.Run("deposit gns to tier 30", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		gns.Transfer(user01, uint64(1_000_000)) // to deposit
		// transfer some grc20 tokens to bypass project condition
		foo.Transfer(user01, uint64(10))
		bar.Transfer(user01, uint64(10))

		std.TestSetRealm(user01Realm)
		gns.Approve(consts.LAUNCHPAD_ADDR, uint64(1_000_000))

		// skip some blocks to make project active
		std.TestSkipHeights(4)
		depositId := DepositGns("gno.land/r/onbloc/obl:124:30", uint64(1_000_000))
		uassert.Equal(t, depositId, `gno.land/r/onbloc/obl:124:30:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:129`)
		std.TestSkipHeights(1)
	})
}

func testCollectRewardTier30(t *testing.T) {
	std.TestSetRealm(user01Realm)

	t.Run("claim reward before 3 days(for 30day tier's init reward)", func(t *testing.T) {
		reward := CollectRewardByProjectId(`gno.land/r/onbloc/obl:124`)
		uassert.Equal(t, reward, uint64(0))
		std.TestSkipHeights(1)
	})

	t.Run("30day tier is over", func(t *testing.T) {
		std.TestSkipHeights(int64(TIMESTAMP_30DAYS) / 2)
		std.TestSkipHeights(1)

		reward := CollectRewardByProjectId(`gno.land/r/onbloc/obl:124`)
		uassert.Equal(t, reward, uint64(99999999))
	})

	t.Run("more block after 30 days", func(t *testing.T) {
		std.TestSkipHeights(int64(TIMESTAMP_30DAYS) / 2)
		reward := CollectRewardByProjectId(`gno.land/r/onbloc/obl:124`)
		uassert.Equal(t, reward, uint64(0))
	})

	t.Run("collect deposit gns by projectId", func(t *testing.T) {
		std.TestSkipHeights(1)
		depositCollected := CollectDepositGnsByProjectId(`gno.land/r/onbloc/obl:124`)
		uassert.Equal(t, depositCollected, uint64(1_000_000))
	})
}

func testDepositGnsTier180(t *testing.T) {
	t.Run("deposit gns to tier 180", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		gns.Transfer(user01, uint64(1_000_000)) // to deposit
		// transfer some grc20 tokens to bypass project condition
		foo.Transfer(user01, uint64(10))
		bar.Transfer(user01, uint64(10))

		std.TestSetRealm(user01Realm)
		gns.Approve(consts.LAUNCHPAD_ADDR, uint64(1_000_000))

		// skip some blocks to make project active
		std.TestSkipHeights(4)
		depositId := DepositGns("gno.land/r/onbloc/obl:124:180", uint64(1_000_000))
		uassert.Equal(t, depositId, `gno.land/r/onbloc/obl:124:180:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:1937`)
		std.TestSkipHeights(1)
	})
}

func testCollectRewardTier180(t *testing.T) {
	std.TestSetRealm(user01Realm)

	t.Run("claim reward before 14 days(for 180day tier's init reward)", func(t *testing.T) {
		reward := CollectRewardByProjectId(`gno.land/r/onbloc/obl:124`)
		uassert.Equal(t, reward, uint64(0))
		std.TestSkipHeights(1)
	})

	t.Run("180day tier is over", func(t *testing.T) {
		std.TestSkipHeights(int64(TIMESTAMP_180DAYS) / 2)
		std.TestSkipHeights(1)

		reward := CollectRewardByProjectId(`gno.land/r/onbloc/obl:124`)
		uassert.Equal(t, reward, uint64(699999999))
	})
}
