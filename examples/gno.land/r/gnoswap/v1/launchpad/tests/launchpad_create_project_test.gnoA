package launchpad

import (
	"std"
	"testing"
	"time"

	"gno.land/p/demo/testutils"
	"gno.land/p/demo/uassert"
	"gno.land/p/demo/ufmt"
	"gno.land/p/gnoswap/consts"

	"gno.land/r/gnoswap/v1/access"
	"gno.land/r/gnoswap/v1/gns"
	gs "gno.land/r/gnoswap/v1/gov/staker"
	"gno.land/r/onbloc/obl"
	"gno.land/r/onbloc/usdc"
)

func TestCreateProject(t *testing.T) {
	createProjectTest(t)
}

func createProjectTest(t *testing.T) {
	adminAddr := consts.ADMIN
	adminRealm := std.NewUserRealm(adminAddr)

	t.Run("launchpad create project fail test - not admin", func(t *testing.T) {
		projectName := "OBL Launchpad Project"
		rewardTokenPath := "gno.land/r/onbloc/obl"
		rewardAmount := uint64(1_000_000_000)
		conditionsToken := "gno.land/r/gnoswap/v1/gov/xgns"
		conditionsAmount := "1000000"
		tier30Ratio := uint64(10)
		tier90Ratio := uint64(20)
		tier180Ratio := uint64(70)
		startTime := uint64(time.Now().Unix() + 10)

		uassert.PanicsWithMessage(t, "[GNOSWAP-LAUNCHPAD-002] invalid address || caller(g1v9kxjcm9ta047h6lta047h6lta047h6lzd40gh) is not authorized for role admin", func() {
			std.TestSetRealm(aliceRealm)
			obl.Approve(launchpadAddr, rewardAmount)
			CreateProject(
				projectName,
				rewardTokenPath,
				projectAddr,
				rewardAmount,
				conditionsToken,
				conditionsAmount,
				tier30Ratio,
				tier90Ratio,
				tier180Ratio,
				startTime,
			)
		})
	})

	t.Run("launchpad create project fail test - invalid name(empty)", func(t *testing.T) {
		projectName := ""
		rewardTokenPath := "gno.land/r/onbloc/obl"
		rewardAmount := uint64(1_000_000_000)
		conditionsToken := "gno.land/r/gnoswap/v1/gov/xgns"
		conditionsAmount := "1000000"
		tier30Ratio := uint64(10)
		tier90Ratio := uint64(20)
		tier180Ratio := uint64(70)
		startTime := uint64(time.Now().Unix() + 10)

		uassert.PanicsWithMessage(t, "[GNOSWAP-LAUNCHPAD-007] invalid input data || project name cannot be empty", func() {
			std.TestSetRealm(adminRealm)
			obl.Approve(launchpadAddr, rewardAmount)
			CreateProject(
				projectName,
				rewardTokenPath,
				projectAddr,
				rewardAmount,
				conditionsToken,
				conditionsAmount,
				tier30Ratio,
				tier90Ratio,
				tier180Ratio,
				startTime,
			)
		})
	})

	t.Run("launchpad create project fail test - invalid name(too long)", func(t *testing.T) {
		projectName := "01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"
		rewardTokenPath := "gno.land/r/onbloc/obl"
		rewardAmount := uint64(1_000_000_000)
		conditionsToken := "gno.land/r/gnoswap/v1/gov/xgns"
		conditionsAmount := "1000000"
		tier30Ratio := uint64(10)
		tier90Ratio := uint64(20)
		tier180Ratio := uint64(70)
		startTime := uint64(time.Now().Unix() + 10)

		uassert.PanicsWithMessage(t, "[GNOSWAP-LAUNCHPAD-007] invalid input data || project name is too long", func() {
			std.TestSetRealm(adminRealm)
			obl.Approve(launchpadAddr, rewardAmount)
			CreateProject(
				projectName,
				rewardTokenPath,
				projectAddr,
				rewardAmount,
				conditionsToken,
				conditionsAmount,
				tier30Ratio,
				tier90Ratio,
				tier180Ratio,
				startTime,
			)
		})
	})

	t.Run("launchpad create project fail test - invalid tokenPath(empty)", func(t *testing.T) {
		projectName := "OBL Launchpad Project"
		rewardTokenPath := ""
		rewardAmount := uint64(1_000_000_000)
		conditionsToken := "gno.land/r/gnoswap/v1/gov/xgns"
		conditionsAmount := "1000000"
		tier30Ratio := uint64(10)
		tier90Ratio := uint64(20)
		tier180Ratio := uint64(70)
		startTime := uint64(time.Now().Unix() + 10)

		uassert.PanicsWithMessage(t, "[GNOSWAP-LAUNCHPAD-007] invalid input data || tokenPath cannot be empty", func() {
			std.TestSetRealm(adminRealm)
			obl.Approve(launchpadAddr, rewardAmount)
			CreateProject(
				projectName,
				rewardTokenPath,
				projectAddr,
				rewardAmount,
				conditionsToken,
				conditionsAmount,
				tier30Ratio,
				tier90Ratio,
				tier180Ratio,
				startTime,
			)
		})
	})

	t.Run("launchpad create project fail test - invalid tokenPath(not registered)", func(t *testing.T) {
		projectName := "OBL Launchpad Project"
		rewardTokenPath := "gno.land/r/gnoswap/v1/token_test/obl"
		rewardAmount := uint64(1_000_000_000)
		conditionsToken := "gno.land/r/gnoswap/v1/gov/xgns"
		conditionsAmount := "1000000"
		tier30Ratio := uint64(10)
		tier90Ratio := uint64(20)
		tier180Ratio := uint64(70)
		startTime := uint64(time.Now().Unix() + 10)

		uassert.PanicsWithMessage(t, "[GNOSWAP-LAUNCHPAD-007] invalid input data || tokenPath(gno.land/r/gnoswap/v1/token_test/obl) not registered", func() {
			std.TestSetRealm(adminRealm)
			obl.Approve(launchpadAddr, rewardAmount)
			CreateProject(
				projectName,
				rewardTokenPath,
				projectAddr,
				rewardAmount,
				conditionsToken,
				conditionsAmount,
				tier30Ratio,
				tier90Ratio,
				tier180Ratio,
				startTime,
			)
		})
	})

	t.Run("launchpad create project fail test - invalid recipient address", func(t *testing.T) {
		projectName := "OBL Launchpad Project"
		rewardTokenPath := "gno.land/r/onbloc/obl"
		rewardAmount := uint64(1_000_000_000)
		conditionsToken := "gno.land/r/gnoswap/v1/gov/xgns"
		conditionsAmount := "1000000"
		tier30Ratio := uint64(10)
		tier90Ratio := uint64(20)
		tier180Ratio := uint64(70)
		startTime := uint64(time.Now().Unix() + 10)
		invalidAddr := std.Address("invalidAddress")

		uassert.PanicsWithMessage(t, "[GNOSWAP-LAUNCHPAD-002] invalid address || recipient address(invalidAddress)", func() {
			std.TestSetRealm(adminRealm)
			obl.Approve(launchpadAddr, rewardAmount)
			CreateProject(
				projectName,
				rewardTokenPath,
				invalidAddr,
				rewardAmount,
				conditionsToken,
				conditionsAmount,
				tier30Ratio,
				tier90Ratio,
				tier180Ratio,
				startTime,
			)
		})
	})

	t.Run("launchpad create project fail test - invalid reward amount", func(t *testing.T) {
		projectName := "OBL Launchpad Project"
		rewardTokenPath := "gno.land/r/onbloc/obl"
		rewardAmount := uint64(0)
		conditionsToken := "gno.land/r/gnoswap/v1/gov/xgns"
		conditionsAmount := "1000000"
		tier30Ratio := uint64(10)
		tier90Ratio := uint64(20)
		tier180Ratio := uint64(70)
		startTime := uint64(time.Now().Unix() + 10)

		uassert.PanicsWithMessage(t, "[GNOSWAP-LAUNCHPAD-007] invalid input data || deposit amount cannot be 0", func() {
			std.TestSetRealm(adminRealm)
			obl.Approve(launchpadAddr, rewardAmount)
			CreateProject(
				projectName,
				rewardTokenPath,
				projectAddr,
				rewardAmount,
				conditionsToken,
				conditionsAmount,
				tier30Ratio,
				tier90Ratio,
				tier180Ratio,
				startTime,
			)
		})
	})

	t.Run("launchpad create project fail test - invalid tier ratio", func(t *testing.T) {
		projectName := "OBL Launchpad Project"
		rewardTokenPath := "gno.land/r/onbloc/obl"
		rewardAmount := uint64(1_000_000_000)
		conditionsToken := "gno.land/r/gnoswap/v1/gov/xgns"
		conditionsAmount := "1000000"
		tier30Ratio := uint64(15)
		tier90Ratio := uint64(20)
		tier180Ratio := uint64(70)
		startTime := uint64(time.Now().Unix() + 10)

		uassert.PanicsWithMessage(t, "[GNOSWAP-LAUNCHPAD-007] invalid input data || invalid ratio, sum of all tiers(30:15, 90:20, 180:70) should be 100", func() {
			std.TestSetRealm(adminRealm)
			obl.Approve(launchpadAddr, rewardAmount)
			CreateProject(
				projectName,
				rewardTokenPath,
				projectAddr,
				rewardAmount,
				conditionsToken,
				conditionsAmount,
				tier30Ratio,
				tier90Ratio,
				tier180Ratio,
				startTime,
			)
		})
	})

	t.Run("launchpad create project fail test - invalid start time", func(t *testing.T) {
		projectName := "OBL Launchpad Project"
		rewardTokenPath := "gno.land/r/onbloc/obl"
		rewardAmount := uint64(1_000_000_000)
		conditionsToken := "gno.land/r/gnoswap/v1/gov/xgns"
		conditionsAmount := "1000000"
		tier30Ratio := uint64(10)
		tier90Ratio := uint64(20)
		tier180Ratio := uint64(70)
		startTime := uint64(time.Now().Unix() - 10)

		uassert.PanicsWithMessage(t, "[GNOSWAP-LAUNCHPAD-007] invalid input data || start time(1234567880) must be greater than now(1234567890)", func() {
			std.TestSetRealm(adminRealm)
			obl.Approve(launchpadAddr, rewardAmount)
			CreateProject(
				projectName,
				rewardTokenPath,
				projectAddr,
				rewardAmount,
				conditionsToken,
				conditionsAmount,
				tier30Ratio,
				tier90Ratio,
				tier180Ratio,
				startTime,
			)
		})
	})

	t.Run("launchpad create project fail test - invalid conditions (empty path)", func(t *testing.T) {
		projectName := "OBL Launchpad Project"
		rewardTokenPath := "gno.land/r/onbloc/obl"
		rewardAmount := uint64(1_000_000_000)
		conditionsToken := ""
		conditionsAmount := "1000000"
		tier30Ratio := uint64(10)
		tier90Ratio := uint64(20)
		tier180Ratio := uint64(70)
		startTime := uint64(time.Now().Unix() + 10)

		uassert.PanicsWithMessage(t, "[GNOSWAP-LAUNCHPAD-007] invalid input data || conditionsToken or conditionsAmount cannot be empty", func() {
			std.TestSetRealm(adminRealm)
			obl.Approve(launchpadAddr, rewardAmount)
			CreateProject(
				projectName,
				rewardTokenPath,
				projectAddr,
				rewardAmount,
				conditionsToken,
				conditionsAmount,
				tier30Ratio,
				tier90Ratio,
				tier180Ratio,
				startTime,
			)
		})
	})

	t.Run("launchpad create project fail test - invalid conditions (empty amount)", func(t *testing.T) {
		projectName := "OBL Launchpad Project"
		rewardTokenPath := "gno.land/r/onbloc/obl"
		rewardAmount := uint64(1_000_000_000)
		conditionsToken := "gno.land/r/gnoswap/v1/gov/xgns"
		conditionsAmount := ""
		tier30Ratio := uint64(10)
		tier90Ratio := uint64(20)
		tier180Ratio := uint64(70)
		startTime := uint64(time.Now().Unix() + 10)

		uassert.PanicsWithMessage(t, "[GNOSWAP-LAUNCHPAD-007] invalid input data || conditionsToken or conditionsAmount cannot be empty", func() {
			std.TestSetRealm(adminRealm)
			obl.Approve(launchpadAddr, rewardAmount)
			CreateProject(
				projectName,
				rewardTokenPath,
				projectAddr,
				rewardAmount,
				conditionsToken,
				conditionsAmount,
				tier30Ratio,
				tier90Ratio,
				tier180Ratio,
				startTime,
			)
		})
	})

	t.Run("launchpad create project fail test - invalid conditions (different conditions count)", func(t *testing.T) {
		projectName := "OBL Launchpad Project"
		rewardTokenPath := "gno.land/r/onbloc/obl"
		rewardAmount := uint64(1_000_000_000)
		conditionsToken := "gno.land/r/gnoswap/v1/gov/xgns"
		conditionsAmount := "1000000*PAD*0"
		tier30Ratio := uint64(10)
		tier90Ratio := uint64(20)
		tier180Ratio := uint64(70)
		startTime := uint64(time.Now().Unix() + 10)

		uassert.PanicsWithMessage(t, "[GNOSWAP-LAUNCHPAD-011] invalid length || invalid conditions(numTokens(1) != numAmounts(2))", func() {
			std.TestSetRealm(adminRealm)
			obl.Approve(launchpadAddr, rewardAmount)
			CreateProject(
				projectName,
				rewardTokenPath,
				projectAddr,
				rewardAmount,
				conditionsToken,
				conditionsAmount,
				tier30Ratio,
				tier90Ratio,
				tier180Ratio,
				startTime,
			)
		})
	})

	t.Run("launchpad create project fail test - invalid conditions (some path are invalid)", func(t *testing.T) {
		projectName := "OBL Launchpad Project"
		rewardTokenPath := "gno.land/r/onbloc/obl"
		rewardAmount := uint64(1_000_000_000)
		conditionsToken := "gno.land/r/gnoswap/v1/gov/xgns*PAD*"
		conditionsAmount := "1000000*PAD*0"
		tier30Ratio := uint64(10)
		tier90Ratio := uint64(20)
		tier180Ratio := uint64(70)
		startTime := uint64(time.Now().Unix() + 10)

		uassert.PanicsWithMessage(t, "[GNOSWAP-LAUNCHPAD-007] invalid input data || invalid token()", func() {
			std.TestSetRealm(adminRealm)
			obl.Approve(launchpadAddr, rewardAmount)
			CreateProject(
				projectName,
				rewardTokenPath,
				projectAddr,
				rewardAmount,
				conditionsToken,
				conditionsAmount,
				tier30Ratio,
				tier90Ratio,
				tier180Ratio,
				startTime,
			)
		})
	})

	t.Run("launchpad create project fail test - invalid conditions (some path are not registered)", func(t *testing.T) {
		projectName := "OBL Launchpad Project"
		rewardTokenPath := "gno.land/r/onbloc/obl"
		rewardAmount := uint64(1_000_000_000)
		conditionsToken := "gno.land/r/gnoswap/v1/gov/xgns*PAD*gno.land/r/gnoswap/v1/token_test/obl"
		conditionsAmount := "1000000*PAD*10"
		tier30Ratio := uint64(10)
		tier90Ratio := uint64(20)
		tier180Ratio := uint64(70)
		startTime := uint64(time.Now().Unix() + 10)

		uassert.PanicsWithMessage(t, "[GNOSWAP-LAUNCHPAD-007] invalid input data || token(gno.land/r/gnoswap/v1/token_test/obl) not registered", func() {
			std.TestSetRealm(adminRealm)
			obl.Approve(launchpadAddr, rewardAmount)
			CreateProject(
				projectName,
				rewardTokenPath,
				projectAddr,
				rewardAmount,
				conditionsToken,
				conditionsAmount,
				tier30Ratio,
				tier90Ratio,
				tier180Ratio,
				startTime,
			)
		})
	})

	t.Run("launchpad create project fail test - invalid conditions (already exist)", func(t *testing.T) {
		projectName := "OBL Launchpad Project"
		rewardTokenPath := "gno.land/r/onbloc/obl"
		rewardAmount := uint64(1_000_000_000)
		conditionsToken := "gno.land/r/gnoswap/v1/gov/xgns*PAD*gno.land/r/gnoswap/v1/gov/xgns"
		conditionsAmount := "1000000*PAD*10"
		tier30Ratio := uint64(10)
		tier90Ratio := uint64(20)
		tier180Ratio := uint64(70)
		startTime := uint64(time.Now().Unix() + 10)

		uassert.PanicsWithMessage(t, "[GNOSWAP-LAUNCHPAD-007] invalid input data || duplicated condition token(gno.land/r/gnoswap/v1/gov/xgns)", func() {
			std.TestSetRealm(adminRealm)
			obl.Approve(launchpadAddr, rewardAmount)
			CreateProject(
				projectName,
				rewardTokenPath,
				projectAddr,
				rewardAmount,
				conditionsToken,
				conditionsAmount,
				tier30Ratio,
				tier90Ratio,
				tier180Ratio,
				startTime,
			)
		})
	})

	t.Run("launchpad create project fail test - invalid token balance", func(t *testing.T) {
		projectName := "OBL Launchpad Project"
		rewardTokenPath := "gno.land/r/onbloc/obl"
		rewardAmount := uint64(1_000_000_000)
		conditionsToken := "gno.land/r/gnoswap/v1/gov/xgns"
		conditionsAmount := "1000000"
		tier30Ratio := uint64(10)
		tier90Ratio := uint64(20)
		tier180Ratio := uint64(70)
		startTime := uint64(time.Now().Unix() + 10)

		uassert.PanicsWithMessage(t, "[GNOSWAP-LAUNCHPAD-010] insufficient balance || caller(g1v9kxjcm9ta047h6lta047h6lta047h6lzd40gh) balance(0) < depositAmount(1000000000)", func() {
			std.TestSetRealm(adminRealm)
			access.SetRole(access.ROLE_ADMIN, aliceAddr)

			std.TestSetRealm(aliceRealm)
			obl.Approve(launchpadAddr, rewardAmount)
			CreateProject(
				projectName,
				rewardTokenPath,
				projectAddr,
				rewardAmount,
				conditionsToken,
				conditionsAmount,
				tier30Ratio,
				tier90Ratio,
				tier180Ratio,
				startTime,
			)
		})
	})

	t.Run("launchpad create project - OBL Project", func(t *testing.T) {
		projectName := "OBL Launchpad Project"
		rewardTokenPath := "gno.land/r/onbloc/obl"
		rewardAmount := uint64(1_000_000_000)
		conditionsToken := "gno.land/r/gnoswap/v1/gov/xgns"
		conditionsAmount := "1000000"
		tier30Ratio := uint64(10)
		tier90Ratio := uint64(20)
		tier180Ratio := uint64(70)
		startTime := uint64(time.Now().Unix() + 10)

		std.TestSetRealm(aliceRealm)
		access.SetRole(access.ROLE_ADMIN, adminAddr)

		std.TestSetRealm(adminRealm)
		obl.Approve(launchpadAddr, rewardAmount)
		projectId := CreateProject(
			projectName,
			rewardTokenPath,
			projectAddr,
			rewardAmount,
			conditionsToken,
			conditionsAmount,
			tier30Ratio,  // 100000000
			tier90Ratio,  // 200000000
			tier180Ratio, // 700000000
			startTime,    // 5 block later
		)
		uassert.Equal(t, `gno.land/r/onbloc/obl:123`, projectId)
		uassert.Equal(t, `{"height":"123","now":"1234567890","projectId":"gno.land/r/onbloc/obl:123","name":"OBL Launchpad Project","tokenPath":"gno.land/r/onbloc/obl","depositAmount":"1000000000","recipient":"g1wpex76n9vd6yzerywf047h6lta047h6lqlp5qp","conditionsToken":"gno.land/r/gnoswap/v1/gov/xgns","conditionsAmount":"1000000","tier30Ratio":"10","tier90Ratio":"20","tier180Ratio":"70","createdHeight":"123","createdTime":"1234567890","startedHeight":"128","startedTime":"1234567900","endedHeight":"7776128","endedTime":"1250119900","totalDeposit":"0","actualDeposit":"0","totalParticipant":"0","actualParticipant":"0","totalCollected":"0","refundedAmount":"0","refundedHeight":"0","refundedTime":"0"}`,
			ApiGetProjectStatisticsByProjectId(projectId))
		uassert.Equal(t, `{"height":"123","now":"1234567890","projectId":"gno.land/r/onbloc/obl:123","tierId":"gno.land/r/onbloc/obl:123:30","collectWaitDuration":"129600","tierAmount":"100000000","tierAmountPerBlockX128":"26256355472294634526494954277142608908641","started.height":"128","started.time":"1234567900","ended.height":"1296128","ended.time":"1237159900","tierTotalDepositAmount":"0","tierActualDepositAmount":"0","tierTotalParticipant":"0","tierActualParticipant":"0","userCollectedAmount":"0","calculatedAmount":"0"}`,
			ApiGetProjectStatisticsByProjectTierId(ufmt.Sprintf("%s:30", projectId)))
		uassert.Equal(t, `{"height":"123","now":"1234567890","projectId":"gno.land/r/onbloc/obl:123","tierId":"gno.land/r/onbloc/obl:123:90","collectWaitDuration":"302400","tierAmount":"200000000","tierAmountPerBlockX128":"17504236981529756350996636184761739272427","started.height":"128","started.time":"1234567900","ended.height":"3888128","ended.time":"1242343900","tierTotalDepositAmount":"0","tierActualDepositAmount":"0","tierTotalParticipant":"0","tierActualParticipant":"0","userCollectedAmount":"0","calculatedAmount":"0"}`,
			ApiGetProjectStatisticsByProjectTierId(ufmt.Sprintf("%s:90", projectId)))
		uassert.Equal(t, `{"height":"123","now":"1234567890","projectId":"gno.land/r/onbloc/obl:123","tierId":"gno.land/r/onbloc/obl:123:180","collectWaitDuration":"604800","tierAmount":"700000000","tierAmountPerBlockX128":"30632414717677073614244113323333043726748","started.height":"128","started.time":"1234567900","ended.height":"7776128","ended.time":"1250119900","tierTotalDepositAmount":"0","tierActualDepositAmount":"0","tierTotalParticipant":"0","tierActualParticipant":"0","userCollectedAmount":"0","calculatedAmount":"0"}`,
			ApiGetProjectStatisticsByProjectTierId(ufmt.Sprintf("%s:180", projectId)))
	})

	t.Run("launchpad create project - usdc project", func(t *testing.T) {
		projectName := "USDC Launchpad Project"
		rewardTokenPath := "gno.land/r/onbloc/usdc"
		rewardAmount := uint64(1_000_000_000_000)
		conditionsToken := "gno.land/r/gnoswap/v1/gov/xgns*PAD*gno.land/r/onbloc/usdc*PAD*gno.land/r/gnoswap/v1/gns"
		conditionsAmount := "100000000*PAD*200000000*PAD*300000000"
		tier30Ratio := uint64(50)
		tier90Ratio := uint64(30)
		tier180Ratio := uint64(20)
		startTime := uint64(time.Now().Unix() + 10)

		std.TestSkipHeights(1)

		std.TestSetRealm(adminRealm)
		usdc.Approve(launchpadAddr, rewardAmount)
		projectId := CreateProject(
			projectName,
			rewardTokenPath,
			projectAddr,
			rewardAmount,
			conditionsToken,
			conditionsAmount,
			tier30Ratio,  // 100000000
			tier90Ratio,  // 200000000
			tier180Ratio, // 700000000
			startTime,    // 5 block later
		)
		uassert.Equal(t, `gno.land/r/onbloc/usdc:124`, projectId)
		uassert.Equal(t, `{"height":"124","now":"1234567892","projectId":"gno.land/r/onbloc/usdc:124","name":"USDC Launchpad Project","tokenPath":"gno.land/r/onbloc/usdc","depositAmount":"1000000000000","recipient":"g1wpex76n9vd6yzerywf047h6lta047h6lqlp5qp","conditionsToken":"gno.land/r/gnoswap/v1/gov/xgns*PAD*gno.land/r/onbloc/usdc*PAD*gno.land/r/gnoswap/v1/gns","conditionsAmount":"100000000*PAD*200000000*PAD*300000000","tier30Ratio":"50","tier90Ratio":"30","tier180Ratio":"20","createdHeight":"124","createdTime":"1234567892","startedHeight":"128","startedTime":"1234567900","endedHeight":"7776128","endedTime":"1250119900","totalDeposit":"0","actualDeposit":"0","totalParticipant":"0","actualParticipant":"0","totalCollected":"0","refundedAmount":"0","refundedHeight":"0","refundedTime":"0"}`,
			ApiGetProjectStatisticsByProjectId(projectId))
		uassert.Equal(t, `{"height":"124","now":"1234567892","projectId":"gno.land/r/onbloc/usdc:124","tierId":"gno.land/r/onbloc/usdc:124:30","collectWaitDuration":"129600","tierAmount":"500000000000","tierAmountPerBlockX128":"131281777361473172632474771385713044543209876","started.height":"128","started.time":"1234567900","ended.height":"1296128","ended.time":"1237159900","tierTotalDepositAmount":"0","tierActualDepositAmount":"0","tierTotalParticipant":"0","tierActualParticipant":"0","userCollectedAmount":"0","calculatedAmount":"0"}`,
			ApiGetProjectStatisticsByProjectTierId(ufmt.Sprintf("%s:30", projectId)))
		uassert.Equal(t, `{"height":"124","now":"1234567892","projectId":"gno.land/r/onbloc/usdc:124","tierId":"gno.land/r/onbloc/usdc:124:90","collectWaitDuration":"302400","tierAmount":"300000000000","tierAmountPerBlockX128":"26256355472294634526494954277142608908641975","started.height":"128","started.time":"1234567900","ended.height":"3888128","ended.time":"1242343900","tierTotalDepositAmount":"0","tierActualDepositAmount":"0","tierTotalParticipant":"0","tierActualParticipant":"0","userCollectedAmount":"0","calculatedAmount":"0"}`,
			ApiGetProjectStatisticsByProjectTierId(ufmt.Sprintf("%s:90", projectId)))
		uassert.Equal(t, `{"height":"124","now":"1234567892","projectId":"gno.land/r/onbloc/usdc:124","tierId":"gno.land/r/onbloc/usdc:124:180","collectWaitDuration":"604800","tierAmount":"200000000000","tierAmountPerBlockX128":"8752118490764878175498318092380869636213991","started.height":"128","started.time":"1234567900","ended.height":"7776128","ended.time":"1250119900","tierTotalDepositAmount":"0","tierActualDepositAmount":"0","tierTotalParticipant":"0","tierActualParticipant":"0","userCollectedAmount":"0","calculatedAmount":"0"}`,
			ApiGetProjectStatisticsByProjectTierId(ufmt.Sprintf("%s:180", projectId)))
	})

	std.TestSkipHeights(4)
}
