package launchpad

import (
	"std"
	"testing"
	"time"

	"gno.land/p/demo/testutils"
	"gno.land/p/demo/uassert"

	"gno.land/p/gnoswap/consts"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/foo"
	"gno.land/r/onbloc/obl"

	"gno.land/r/gnoswap/v1/gns"
)

var (
	projectAddr = testutils.TestAddress("projectAddr")
	user01      = testutils.TestAddress("user01")
	user02      = testutils.TestAddress("user02")

	projectRealm = std.NewUserRealm(projectAddr)
	user01Realm  = std.NewUserRealm(user01)
	user02Realm  = std.NewUserRealm(user02)
)

func TestTwoDepositRewardByProjectId(t *testing.T) {
	t.Skip("fix this code")
	testCreateProject(t)
	depositGnsTier(t)
	collectRewardByProjectId(t)
}

func testCreateProject(t *testing.T) {
	t.Run("create project", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		obl.Approve(consts.LAUNCHPAD_ADDR, uint64(1_000_000_000))
		std.TestSkipHeights(1)

		projectId := CreateProject(
			"Obl Protocol",
			oblPath,
			projectAddr,
			uint64(1_000_000_000), // 1000000000
			"gno.land/r/onbloc/foo*PAD*gno.land/r/onbloc/bar",
			"1*PAD*2",
			uint64(10),                   // 100000000
			uint64(20),                   // 200000000
			uint64(70),                   // 700000000
			uint64(time.Now().Unix()+10), // 10s later
		)
		uassert.Equal(t, projectId, `gno.land/r/onbloc/obl:124`)
		std.TestSkipHeights(1)
	})
}

func depositGnsTier(t *testing.T) {
	t.Run("deposit gns to tier 30 by user01", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gns.Transfer(user01, uint64(1_000_000)) // to deposit
		// transfer some grc20 tokens to bypass project condition
		foo.Transfer(user01, uint64(10))
		bar.Transfer(user01, uint64(10))

		std.TestSetRealm(user01Realm)
		gns.Approve(consts.LAUNCHPAD_ADDR, uint64(1_000_000))

		// skip some blocks to make project active
		std.TestSkipHeights(4)
		DepositGns("gno.land/r/onbloc/obl:124:30", uint64(1_000_000))
		std.TestSkipHeights(1)
	})

	t.Run("deposit gns to tier 30 by user02", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gns.Transfer(user02, uint64(9_000_000)) // to deposit
		// transfer some grc20 tokens to bypass project condition
		foo.Transfer(user02, uint64(10))
		bar.Transfer(user02, uint64(10))

		std.TestSetRealm(user02Realm)
		gns.Approve(consts.LAUNCHPAD_ADDR, uint64(9_000_000))

		// skip some blocks to make project active
		DepositGns("gno.land/r/onbloc/obl:124:30", uint64(1_000_000))
		std.TestSkipHeights(1)
	})
}

func collectRewardByProjectId(t *testing.T) {
	t.Run("claim reward before 30 days by user01", func(t *testing.T) {
		std.TestSetRealm(user01Realm)

		reward := CollectRewardByProjectId(`gno.land/r/onbloc/obl:124`)
		uassert.Equal(t, reward, uint64(0))
		std.TestSkipHeights(1)
	})

	t.Run("claim reward before 30 days by user02", func(t *testing.T) {
		std.TestSetRealm(user02Realm)

		reward := CollectRewardByProjectId(`gno.land/r/onbloc/obl:124`)
		uassert.Equal(t, reward, uint64(0))
		std.TestSkipHeights(1)
	})

	t.Run("claim after 30 days by user01", func(t *testing.T) {
		std.TestSetRealm(user01Realm)

		std.TestSkipHeights(int64(TIMESTAMP_30DAYS) / 2)
		reward := CollectRewardByProjectId(`gno.land/r/onbloc/obl:124`)
		uassert.Equal(t, reward, uint64(50000038))
	})

	t.Run("claim after 30 days by user02", func(t *testing.T) {
		std.TestSetRealm(user02Realm)

		std.TestSkipHeights(int64(TIMESTAMP_30DAYS) / 2)
		reward := CollectRewardByProjectId(`gno.land/r/onbloc/obl:124`)
		uassert.Equal(t, reward, uint64(49999961))
	})

	t.Run("no more claim in same block by user 01", func(t *testing.T) {
		std.TestSetRealm(user01Realm)

		reward := CollectRewardByProjectId(`gno.land/r/onbloc/obl:124`)
		uassert.Equal(t, reward, uint64(0))
	})

	t.Run("no more claim in same block by user 02", func(t *testing.T) {
		std.TestSetRealm(user02Realm)

		reward := CollectRewardByProjectId(`gno.land/r/onbloc/obl:124`)
		uassert.Equal(t, reward, uint64(0))
	})
}
