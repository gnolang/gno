package launchpad

import (
	"std"
	"testing"
	"time"

	"gno.land/p/demo/testutils"
	"gno.land/p/demo/uassert"

	"gno.land/r/gnoswap/v1/gnft"
	"gno.land/r/gnoswap/v1/gns"

	"gno.land/p/gnoswap/consts"
	"gno.land/r/demo/wugnot"
	"gno.land/r/gnoswap/v1/common"
	"gno.land/r/gnoswap/v1/gov/xgns"
	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/baz"
	"gno.land/r/onbloc/foo"

	gs "gno.land/r/gnoswap/v1/gov/staker"
	pl "gno.land/r/gnoswap/v1/pool"
	pn "gno.land/r/gnoswap/v1/position"
	rr "gno.land/r/gnoswap/v1/router"
	sr "gno.land/r/gnoswap/v1/staker"
)

//! TODO: may need to change deadline param in `ExactInSwapRoute` function

var (
	launchpadProject01Addr  = testutils.TestAddress("launchpadProject01")
	launchpadProject01Realm = std.NewUserRealm(launchpadProject01Addr)
	// g1d3sh2mnrdpcxzezswfhk5etrwscrzh6lyxj2sl

	launchpadProject02Addr  = testutils.TestAddress("launchpadProject02")
	launchpadProject02Realm = std.NewUserRealm(launchpadProject02Addr)
	// g1d3sh2mnrdpcxzezswfhk5etrwscryh6le8ayrc

	launchpadProject03Addr  = testutils.TestAddress("launchpadProject03")
	launchpadProject03Realm = std.NewUserRealm(launchpadProject03Addr)
	// g1d3sh2mnrdpcxzezswfhk5etrwscrxh6ljlce4z

	launchpadDeposit01Addr  = testutils.TestAddress("launchpadDeposit01")
	launchpadDeposit01Realm = std.NewUserRealm(launchpadDeposit01Addr)
	// g1d3sh2mnrdpcxzezyv4cx7umfwscrzh6lzr9g7u

	launchpadDeposit02Addr  = testutils.TestAddress("launchpadDeposit02")
	launchpadDeposit02Realm = std.NewUserRealm(launchpadDeposit02Addr)
	// g1d3sh2mnrdpcxzezyv4cx7umfwscryh6llz2xdm

	launchpadDeposit03Addr  = testutils.TestAddress("launchpadDeposit03")
	launchpadDeposit03Realm = std.NewUserRealm(launchpadDeposit03Addr)
	// g1d3sh2mnrdpcxzezyv4cx7umfwscrxh6l560mmp

	govDelegateAddr  = testutils.TestAddress("govDelegate")
	govDelegateRealm = std.NewUserRealm(govDelegateAddr)
	// g1vahhv3r9d3jkwct5v4047h6lta047h6lnv8wwm

	dummy01Addr  = testutils.TestAddress("dummy01")
	dummy01Realm = std.NewUserRealm(dummy01Addr)
	// g1v36k6mtexqc47h6lta047h6lta047h6lp6a3dc

	dummy02Addr  = testutils.TestAddress("dummy02")
	dummy02Realm = std.NewUserRealm(dummy02Addr)
	// g1v36k6mtexqe97h6lta047h6lta047h6l7fjzzd

	dummy03Addr  = testutils.TestAddress("dummy03")
	dummy03Realm = std.NewUserRealm(dummy03Addr)
	// g1v36k6mtexqe47h6lta047h6lta047h6lpretcl

	max_timeout = int64(9999999999)
)

func init() {
	std.TestSetRealm(adminRealm)
	gns.Transfer(launchpadDeposit01Addr, uint64(1_000_000_000))
	gns.Transfer(launchpadDeposit02Addr, uint64(1_000_000_000))
	gns.Transfer(launchpadDeposit03Addr, uint64(1_000_000_000))
	gns.Transfer(govDelegateAddr, uint64(1_000_000_000))
	gns.Transfer(dummy01Addr, uint64(1_000_000_000))
	gns.Transfer(dummy02Addr, uint64(1_000_000_000))
	gns.Transfer(dummy03Addr, uint64(1_000_000_000))
}

func TestLaunchPadAndGovernanceReward(t *testing.T) {
	t.Skip("fix this code")
	testCreatePool(t)
	testMint(t)
	testStakeToken(t)
	testCreateProject(t)
	testDepositGns(t)
	testGovStakerDelegate(t)
	testCreatePool_4(t)
	testSwapRoute(t)
	testXgnsData(t)
	testCheckReward(t)
}

func testCreatePool(t *testing.T) {
	t.Run("create three pools", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		gns.Approve(poolAddr, pl.GetPoolCreationFee()*3)
		pl.CreatePool(barPath, fooPath, fee500, common.TickMathGetSqrtRatioAtTick(0).ToString())                     // x1
		pl.CreatePool(barPath, bazPath, fee500, common.TickMathGetSqrtRatioAtTick(0).ToString())                     // x1
		pl.CreatePool(consts.WUGNOT_PATH, consts.GNS_PATH, fee3000, common.TickMathGetSqrtRatioAtTick(0).ToString()) // x1

		checkProtocolFeeBalance()
		// gns 300_000_000

		std.TestSkipHeights(1)
	})
}

func testMint(t *testing.T) {
	t.Run("mint", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		std.TestSetOriginSend(std.Coins{{"ugnot", 100000000000000}}, nil)
		wugnot.Deposit()
		wugnot.Approve(poolAddr, consts.UINT64_MAX)
		gns.Approve(poolAddr, consts.UINT64_MAX)

		positionId, liquidity, amount0, amount1 := pn.Mint(consts.WUGNOT_PATH, consts.GNS_PATH, fee3000, int32(-8040), int32(8040), "10000000000", "10000000000", "0", "0", max_timeout, adminAddr, adminAddr, "")
		uassert.Equal(t, positionId, uint64(1))
		uassert.Equal(t, amount0, "10000000000")
		uassert.Equal(t, amount1, "10000000000")

		std.TestSetRealm(adminRealm)
		bar.Approve(poolAddr, consts.UINT64_MAX)
		foo.Approve(poolAddr, consts.UINT64_MAX)
		pn.Mint(barPath, fooPath, fee500, int32(-8000), int32(8000), "10000000000", "10000000000", "0", "0", max_timeout, adminAddr, adminAddr, "")

		std.TestSetRealm(adminRealm)
		bar.Approve(poolAddr, consts.UINT64_MAX)
		baz.Approve(poolAddr, consts.UINT64_MAX)
		pn.Mint(barPath, bazPath, fee500, int32(-8000), int32(8000), "10000000000", "10000000000", "0", "0", max_timeout, adminAddr, adminAddr, "")

		checkProtocolFeeBalance()
		// (still) gns 300_000_000

		std.TestSkipHeights(1)
	})
}

func testStakeToken(t *testing.T) {
	t.Run("stake token", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		gnft.Approve(stakerAddr, "1")

		sr.StakeToken(1, "")

		checkProtocolFeeBalance()
		// (still) gns 300_000_000

		std.TestSkipHeights(1)
	})
}

func testCreateProject(t *testing.T) {
	t.Run("create project 01", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		foo.Approve(launchpadAddr, uint64(1_000_000_000))
		std.TestSkipHeights(1)

		projectId := CreateProject(
			"Foo Protocol",
			fooPath,
			launchpadProject01Addr,
			uint64(1_000_000_000), // 1000000000
			"",
			"",
			uint64(10),                   // 100000000
			uint64(20),                   // 200000000
			uint64(70),                   // 700000000
			uint64(time.Now().Unix()+10), // 10s later
		)
		uassert.Equal(t, projectId, `gno.land/r/onbloc/foo:127`)

		checkProtocolFeeBalance()
		// (still) gns 300_000_000

		std.TestSkipHeights(1)
	})

	t.Run("create project 02", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		bar.Approve(launchpadAddr, uint64(1_000_000_000))
		std.TestSkipHeights(1)

		projectId := CreateProject(
			"Bar Protocol",
			barPath,
			launchpadProject02Addr,
			uint64(1_000_000_000), // 1000000000
			"",
			"",
			uint64(10),                   // 100000000
			uint64(20),                   // 200000000
			uint64(70),                   // 700000000
			uint64(time.Now().Unix()+10), // 10s later
		)
		uassert.Equal(t, projectId, `gno.land/r/onbloc/bar:129`)

		checkProtocolFeeBalance()
		// (still) gns 300_000_000

		std.TestSkipHeights(1)
	})
}

func testDepositGns(t *testing.T) {
	t.Run("make project active", func(t *testing.T) {
		std.TestSkipHeights(10)
	})

	t.Run("deposit to project01 tier30", func(t *testing.T) {
		std.TestSetRealm(launchpadDeposit01Realm)
		gns.Approve(launchpadAddr, uint64(1_000_000))
		depositId := DepositGns("gno.land/r/onbloc/foo:127:30", uint64(1_000_000), "")
		uassert.Equal(t, depositId, `gno.land/r/onbloc/foo:127:30:g1d3sh2mnrdpcxzezyv4cx7umfwscrzh6lzr9g7u:140`)

		checkProtocolFeeBalance()
		// (still) gns 300_000_000
	})

	t.Run("deposit to project01 tier30 another 1 gns", func(t *testing.T) {
		std.TestSkipHeights(1)
		std.TestSetRealm(launchpadDeposit02Realm)
		gns.Approve(launchpadAddr, uint64(1_000_000))
		depositId := DepositGns("gno.land/r/onbloc/foo:127:30", uint64(1_000_000), "")
		uassert.Equal(t, depositId, `gno.land/r/onbloc/foo:127:30:g1d3sh2mnrdpcxzezyv4cx7umfwscryh6llz2xdm:141`)
	})

	t.Run("project recipient reward", func(t *testing.T) {
		checkProtocolFeeBalance()
		// none

		rewards := ApiGetProjectRecipientRewardByAddress(launchpadProject01Addr)
		uassert.Equal(t, rewards, `{"height":"141","now":"1234567926","emissionReward":"0","protocolFees":[{"tokenPath":"gno.land/r/gnoswap/v1/gns","amount":"300000000"}]}`)
	})

	t.Run("deposit to project02 tier30", func(t *testing.T) {
		std.TestSkipHeights(1)

		std.TestSetRealm(launchpadDeposit03Realm)
		gns.Approve(launchpadAddr, uint64(1_000_000))
		depositId := DepositGns("gno.land/r/onbloc/bar:129:30", uint64(1_000_000), "") // 1 GNS
		uassert.Equal(t, depositId, `gno.land/r/onbloc/bar:129:30:g1d3sh2mnrdpcxzezyv4cx7umfwscrxh6l560mmp:142`)

		checkProtocolFeeBalance()
		// (still) none
	})
}

func testGovStakerDelegate(t *testing.T) {
	t.Run("gov delegate", func(t *testing.T) {
		std.TestSetRealm(govDelegateRealm)
		gns.Approve(govStakerAddr, uint64(1_000_000))
		gs.Delegate(govDelegateAddr, uint64(1_000_000), "")

		checkProtocolFeeBalance()
		// (still) none

		std.TestSkipHeights(1)
	})
}

func testCreatePool_4(t *testing.T) {
	std.TestSetRealm(adminRealm)

	gns.Approve(poolAddr, pl.GetPoolCreationFee())
	pl.CreatePool(barPath, quxPath, fee3000, common.TickMathGetSqrtRatioAtTick(0).ToString()) // x1

	checkProtocolFeeBalance()
	// gns 100_000_000 // pool creation fee

	std.TestSkipHeights(1)
}

// CREATED POOL LIST
// bar:foo:500
// bar:baz:500
// wugnot:gns:3000
// bar:qux:3000

func testSwapRoute(t *testing.T) {
	t.Run("swap route 01 (bar > foo)", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		bar.Approve(routerAddr, uint64(1_000_000))
		foo.Approve(routerAddr, uint64(1_000_000))

		amountIn, amountOut := rr.ExactInSwapRoute(
			barPath,
			fooPath,
			"100000",
			"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500",
			"100",
			"1",
			time.Now().Unix(),
			"", // referrer
		)
		uassert.Equal(t, amountIn, "100000")
		uassert.Equal(t, amountOut, "-99800")

		checkProtocolFeeBalance()
		// (still) gns 100_000_000 // pool creation fee
		// foo 149
		// > 0.15% of output
		// => 99800 * 0.15% = 149.7

		std.TestSkipHeights(1)
	})

	t.Run("swap route 02 (baz > bar)", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		bar.Approve(routerAddr, uint64(1_000_000))
		baz.Approve(routerAddr, uint64(1_000_000))

		amountIn, amountOut := rr.ExactInSwapRoute(
			bazPath,
			barPath,
			"100000",
			"gno.land/r/onbloc/baz:gno.land/r/onbloc/bar:500",
			"100",
			"1",
			time.Now().Unix(),
			"", // referrer
		)
		uassert.Equal(t, amountIn, "100000")
		uassert.Equal(t, amountOut, "-99800")

		checkProtocolFeeBalance()
		// (still) gns 100_000_000 // pool creation fee
		// (still) foo 149
		// bar 149
		// => 0.15% of output
		// => 99800 * 0.15% = 149.7

		std.TestSkipHeights(1)
	})

	t.Run("swap route 03 (wugnot > gns)", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		gns.Approve(routerAddr, consts.UINT64_MAX)
		gns.Approve(poolAddr, consts.UINT64_MAX)
		wugnot.Approve(routerAddr, consts.UINT64_MAX)

		amountIn, amountOut := rr.ExactInSwapRoute(
			consts.GNS_PATH,
			consts.WUGNOT_PATH,
			"100000",
			"gno.land/r/gnoswap/v1/gns:gno.land/r/demo/wugnot:3000",
			"100",
			"1",
			time.Now().Unix(),
			"", // referrer
		)
		uassert.Equal(t, amountIn, "100000")
		uassert.Equal(t, amountOut, "-99550")

		checkProtocolFeeBalance()
		// (still) gns 100_000_000 // pool creation fee
		// (still) foo 149
		// (still) bar 149
		// wugnot 149
		// => 0.15% of output
		// => 99550 * 0.15% = 149.325

		std.TestSkipHeights(1)
	})
}

func testXgnsData(t *testing.T) {
	t.Run("xgns data", func(t *testing.T) {
		totalSupply := xgns.TotalSupply()
		uassert.Equal(t, totalSupply, uint64(4_000_000))
		// project01 (first deposit)	1_000_000
		// project01 (second deposit) 1_000_000
		// project02 (first deposit)	1_000_000
		// govDelegate (delegate)			1_000_000

		std.TestSkipHeights(1)
	})
}

func testCheckReward(t *testing.T) {
	t.Run("project01 addr reward", func(t *testing.T) {
		rewards := ApiGetProjectRecipientRewardByAddress(launchpadProject01Addr)
		uassert.Equal(t, rewards, `{"height":"148","now":"1234567940","emissionReward":"0","protocolFees":[{"tokenPath":"gno.land/r/gnoswap/v1/gns","amount":"350000000"},{"tokenPath":"gno.land/r/onbloc/bar","amount":"74"},{"tokenPath":"gno.land/r/onbloc/foo","amount":"74"},{"tokenPath":"gno.land/r/demo/wugnot","amount":"74"}]}`)
		// gns 350_000_000
		// > 300_000_000 previously (before 4th create pool and bunch of swaps)
		// > 50_000_000 newly

		// bar 74
		// foo 74
		// wugnot 74
	})

	t.Run("project02 addr reward", func(t *testing.T) {
		rewards := ApiGetProjectRecipientRewardByAddress(launchpadProject02Addr)
		uassert.Equal(t, rewards, `{"height":"148","now":"1234567940","emissionReward":"0","protocolFees":[{"tokenPath":"gno.land/r/onbloc/bar","amount":"37"},{"tokenPath":"gno.land/r/onbloc/foo","amount":"37"},{"tokenPath":"gno.land/r/demo/wugnot","amount":"37"},{"tokenPath":"gno.land/r/gnoswap/v1/gns","amount":"25000000"}]}`)
		// bar 37
		// foo 37
		// wugnot 37
		// gns 25_000_000
	})

	t.Run("gov delegate reward", func(t *testing.T) {
		rewards := ApiGetProjectRecipientRewardByAddress(govDelegateAddr)
		uassert.Equal(t, rewards, `{"height":"148","now":"1234567940","emissionReward":"0","protocolFees":[{"tokenPath":"gno.land/r/onbloc/bar","amount":"37"},{"tokenPath":"gno.land/r/onbloc/foo","amount":"37"},{"tokenPath":"gno.land/r/demo/wugnot","amount":"37"},{"tokenPath":"gno.land/r/gnoswap/v1/gns","amount":"25000000"}]}`)
		// bar 37
		// foo 37
		// wugnot 37
		// gns 25_000_000
	})
}

func checkProtocolFeeBalance() {
	for _, token := range common.ListRegisteredTokens() {
		balance := common.BalanceOf(token, protocolFeeAddr)
		if balance != 0 {
			println("token", token)
			println("balance", balance)
		}
	}
}
