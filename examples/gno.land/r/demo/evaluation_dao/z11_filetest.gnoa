package main

import (
	"std"
	"gno.land/r/demo/foo_governor"
	"gno.land/p/demo/governance/governor"
	"gno.land/p/demo/testutils"
	"gno.land/p/demo/ufmt"
)

func main() {
		banker := std.GetBanker(std.BankerTypeReadonly)

		pkgaddr := std.GetOrigPkgAddr()

		test1 := testutils.TestAddress("test1")
		println("test1:", test1)
		println("============================")
	
		std.TestSetOrigCaller(test1)
		// mint
		println("mint")
		foo_governor.Mint(test1, 10000)
		totalSupply := foo_governor.TotalSupply()
		println("total supply:", totalSupply)
	
		// balance of
		balance, err := foo_governor.BalanceOf(test1)
		if err != nil{
			println("balance of test1 is :", balance)
		}
	
		std.TestSkipHeights(1)		//skip 1 step, we can only get vote from past block
	
		// getVote
		height := std.GetHeight()
		println("height is:", height)
		votes_test1 := foo_governor.GetVotes(test1, height - 1)
		println(ufmt.Sprintf("test1 votes at block: %d is %d: ", height - 1, votes_test1))
		// set voting delay, override default settings
		foo_governor.SetVotingDelay(14)
	
		// Propose
		var tfs []string
		var cfs []string
		tfs = append(tfs, "https://test2.gno.land/r/users/users.gno")
		cfs = append(cfs, "https://test2.gno.land/r/boards/misc.gno")
		proposal := &governor.Proposal{
			TargetFiles: tfs,
			CallFiles: cfs,
		}
		proposalId := foo_governor.Propose(proposal)
	
		println("before voting----------------------------------")
		println("proposal RenderHome:", foo_governor.RenderHome(proposalId))

		toAddr := std.DerivePkgAddr("gno.land/r/demo/foo_governor")
		govbal := banker.GetCoins(toAddr)
		println("govbal before :", govbal)

		std.TestSetOrigPkgAddr(test1)
		std.TestIssueCoins(test1, std.Coins{{"ugnot", 64000001}})
		test1bal := banker.GetCoins(test1)

		println("test1bal before deposit is :", test1bal)

		std.TestSetOrigSend(std.Coins{{"ugnot", 64000000}}, nil)	
		println("deposit")
		foo_governor.Deposit(proposalId)

		println("proposal RenderHome:", foo_governor.RenderHome(proposalId))


		// std.TestSkipHeights(1)
		// println("height is:", std.GetHeight())

		std.TestSetOrigSend(std.Coins{{"ugnot", 1}}, nil)	
		println("deposit again!!!")
		foo_governor.Deposit(proposalId)

		test1bal = banker.GetCoins(test1)
		println("test1bal after :", test1bal)

		govbal = banker.GetCoins(toAddr)
		println("govbal after :", govbal)

		println("skip current block")
		std.TestSkipHeights(1)
		println("after deposit ----------------------------------")
		println("proposal RenderHome:", foo_governor.RenderHome(proposalId))
}

// Output:
// test1: g1w3jhxap3ta047h6lta047h6lta047h6l4mfnm7
// ============================
// mint
// total supply: 10000
// height is: 124
// test1 votes at block: 123 is 10000:
// done propose
// before voting----------------------------------
// proposal RenderHome: * **Proposal state is***: Pending
// * **Proposal snapShot is***: 138
// * **Proposal deadLine is***: 143
// * **Proposal deposit is***: 0ugnot
//
// govbal before :
// test1bal before deposit is : 64000001ugnot
// deposit
// pkgaddr:  g1w3jhxap3ta047h6lta047h6lta047h6l4mfnm7
// proposal RenderHome: * **Proposal state is***: Pending
// * **Proposal snapShot is***: 124
// * **Proposal deadLine is***: 129
// * **Proposal deposit is***: 64000000ugnot
//
// deposit again!!!
// pkgaddr:  g1w3jhxap3ta047h6lta047h6lta047h6l4mfnm7
// test1bal after : 1ugnot
// govbal after :
// skip current block
// after deposit ----------------------------------
// proposal RenderHome: * **Proposal state is***: Active
// * **Proposal snapShot is***: 124
// * **Proposal deadLine is***: 129
// * **Proposal deposit is***: 64000000ugnot