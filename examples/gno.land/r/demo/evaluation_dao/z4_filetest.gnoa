package main

import (
	"std"
	"gno.land/r/demo/foo_governor"
	"gno.land/p/demo/governance/governor"
	"gno.land/p/demo/testutils"
	"gno.land/p/demo/ufmt"
)

func main() {
	// test1 -> test2, test1 -> test3, test2 -> test1
	test1 := testutils.TestAddress("test1")
	println("test1:", test1)
	test2 := testutils.TestAddress("test2")
	println("test2:", test2)
	test3 := testutils.TestAddress("test3")
	println("test3:", test3)
	test4 := testutils.TestAddress("test4")
	println("test4:", test4)
	println("============================")

	std.TestSetOrigCaller(test1)
	// mint
	println("mint")
	foo_governor.Mint(test1, 10000)
	totalSupply := foo_governor.TotalSupply()
	println("total supply:", totalSupply)

	// tranfer
	println("transfer from test1 to test2")
	foo_governor.Transfer(test1, test2, 3000)

	println("transfer from test1 to test3")
	foo_governor.Transfer(test1, test3, 1000)

	// balance of
	balance, err := foo_governor.BalanceOf(test1)
	if err != nil{
		println("balance of test1 is :", balance)
	}
	balance, err = foo_governor.BalanceOf(test2)
	if err != nil{
		println("balance of test2 is :", balance)
	}
	balance, err = foo_governor.BalanceOf(test3)
	if err != nil{
		println("balance of test3 is :", balance)
	}

	std.TestSkipHeights(1)		//skip 1 step, we can only get vote from past block

	// getVote
	height := std.GetHeight()
	println("height is:", height)
	votes_test1 := foo_governor.GetVotes(test1, height - 1)
	println(ufmt.Sprintf("test1 votes at block %d is %d ", height - 1, votes_test1))
	votes_test2 := foo_governor.GetVotes(test2, height - 1)
	println(ufmt.Sprintf("test2 votes at block %d is %d ", height - 1, votes_test2))
	votes_test3 := foo_governor.GetVotes(test3, height - 1)
	println(ufmt.Sprintf("test3 votes at block %d is %d ", height - 1, votes_test3))

	println("-----------------------------------------------------------------------")

	println("transfer from test2 to test1")
	foo_governor.Transfer(test2, test1, 1500)

	// balance of
	balance, err = foo_governor.BalanceOf(test1)
	if err != nil{
		println("balance of test1 is :", balance)
	}
	balance, err = foo_governor.BalanceOf(test2)
	if err != nil{
		println("balance of test2 is :", balance)
	}

	std.TestSkipHeights(1)		//skip 1 step, we can only get vote from past block
	// getVote
	height = std.GetHeight()
	println("height is:", height)
	votes_test1 = foo_governor.GetVotes(test1, height - 1)
	println(ufmt.Sprintf("test1 votes at block %d is %d ", height - 1, votes_test1))
	votes_test2 = foo_governor.GetVotes(test2, height - 1)
	println(ufmt.Sprintf("test2 votes at block %d is %d ", height - 1, votes_test2))
	votes_test3 = foo_governor.GetVotes(test3, height - 1)
	println(ufmt.Sprintf("test3 votes at block %d is %d ", height - 1, votes_test3))

	// Propose
	var tfs []string
	var cfs []string
	tfs = append(tfs, "https://test2.gno.land/r/users/users.gno")
	cfs = append(cfs, "https://test2.gno.land/r/boards/misc.gno")
	proposal := &governor.Proposal{
		TargetFiles: tfs,
		CallFiles: cfs,
	}
	proposalId := foo_governor.Propose(proposal)


	println("before voting----------------------------------")
	println("proposal RenderHome:", foo_governor.RenderHome(proposalId))

	// vote
	std.TestSkipHeights(1)		//skip current block
	weight := foo_governor.CastVote(proposalId, governor.For)

	println("voted----------------------------------")
	println("weight is: ", weight)
	println("proposal RenderHome:", foo_governor.RenderHome(proposalId))


	// check result
	std.TestSkipHeights(5)		
	println("after voting period ----------------------------------")
	println("proposal RenderHome:", foo_governor.RenderHome(proposalId))
}

// Output:
// test1: g1w3jhxap3ta047h6lta047h6lta047h6l4mfnm7
// test2: g1w3jhxapjta047h6lta047h6lta047h6laqcyu4
// test3: g1w3jhxapnta047h6lta047h6lta047h6lzfhfxt
// test4: g1w3jhxap5ta047h6lta047h6lta047h6ldlnrjr
// ============================
// mint
// total supply: 10000
// transfer from test1 to test2
// transfer from test1 to test3
// height is: 124
// test1 votes at block 123 is 6000
// test2 votes at block 123 is 3000
// test3 votes at block 123 is 1000
// -----------------------------------------------------------------------
// transfer from test2 to test1
// height is: 125
// test1 votes at block 124 is 7500
// test2 votes at block 124 is 1500
// test3 votes at block 124 is 1000
// done propose
// before voting----------------------------------
// proposal RenderHome: * **Proposal state is***: Pending
// * **Proposal snapShot is***: 125
// * **Proposal deadLine is***: 130
// * **Proposal deposit is***: 0ugnot
//
// voted----------------------------------
// weight is:  7500
// proposal RenderHome: * **Proposal state is***: Active
// * **Proposal snapShot is***: 125
// * **Proposal deadLine is***: 130
// * **Proposal deposit is***: 0ugnot
//
// after voting period ----------------------------------
// proposal RenderHome: * **Proposal state is***: Succeeded
// * **Proposal snapShot is***: 125
// * **Proposal deadLine is***: 130
// * **Proposal deposit is***: 0ugnot