package home

import (
	"std"
	"strconv"

	"gno.land/p/demo/svg"
	"gno.land/p/demo/ufmt"
	"gno.land/p/moul/md"

	"gno.land/r/demo/art/gnoface"
	"gno.land/r/demo/art/millipede"
	"gno.land/r/demo/mirror"
	"gno.land/r/leon/config"
	"gno.land/r/leon/hor"
)

var (
	pfp        string // link to profile picture
	pfpCaption string // profile picture caption
	abtMe      [2]string
)

func Render(_ string) string {
	out := "# Leon's Homepage\n\n"

	out += renderAboutMe()
	out += renderArt()
	out += config.Banner()

	return out
}

func init() {
	hor.Register(cross, "Leon's Home Realm", "")
	mirror.Register(std.CurrentRealm().PkgPath(), Render)

	pfp = "https://i.imgflip.com/91vskx.jpg"
	pfpCaption = "[My favourite painting & pfp](https://en.wikipedia.org/wiki/Wanderer_above_the_Sea_of_Fog)"
	abtMe = [2]string{
		`### About me
Hi, I'm Leon, a DevRel Engineer at gno.land. I am a tech enthusiast, 
life-long learner, and sharer of knowledge.`,
		`### Contributions
My contributions to gno.land can mainly be found 
[here](https://github.com/gnolang/gno/issues?q=sort:updated-desc+author:leohhhn).

TODO import r/gh`,
	}
}

func UpdatePFP(cur realm, url, caption string) {
	if !config.IsAuthorized(std.PreviousRealm().Address()) {
		panic(config.ErrUnauthorized)
	}

	pfp = url
	pfpCaption = caption
}

func UpdateAboutMe(cur realm, col1, col2 string) {
	if !config.IsAuthorized(std.PreviousRealm().Address()) {
		panic(config.ErrUnauthorized)
	}

	abtMe[0] = col1
	abtMe[1] = col2
}

func renderAboutMe() string {
	return md.Columns([]string{
		ufmt.Sprintf("![my profile pic](%s)\n\n%s\n", pfp, pfpCaption),
		abtMe[0],
		abtMe[1],
	})
}

func renderArt() string {
	out := "# Gno Art\n"

	out += md.Columns([]string{
		gnoface.Render(strconv.Itoa(int(std.ChainHeight()))),
		renderMillipede(),
		"SVG Gnome\n" + RenderSVGGnome(),
	})

	out += "This art is dynamic; it will change with every new block.\n\n"

	return out
}

func renderMillipede() string {
	out := "Millipede\n\n"
	out += "```\n" + millipede.Draw(int(std.ChainHeight())%10+1) + "```\n"
	return out
}

func renderBlogPosts() string {
	out := ""
	// out += "## Leon's Blog Posts"

	// todo fetch blog posts authored by @leohhhn
	// and render them
	return out
}

func RenderSVGGnome() string { // exported for your pleasure :)
	c := svg.NewCanvas(430, 430).WithViewBox(13, 25, 75, 75)

	// Body: blue triangle
	body := svg.NewPolygon("50,50 30,100 70,100", gnomeBodyColors[int(std.ChainHeight())%len(gnomeBodyColors)])

	// Head: peach circle (overlaps body)
	head := svg.NewCircle(50, 60, 10, "#FAD7B6")

	// Hat: red triangle on top of head
	hat := svg.NewPolygon("50,30 35,55 65,55", "#E53935")

	// Eyes: two small black dots
	leftEye := svg.NewCircle(46, 59, 1, "#000")
	rightEye := svg.NewCircle(54, 59, 1, "#000")

	// Beard: small white triangle under head
	beard := svg.NewPolygon("50,85 42,63 58,63", "#FFF")

	// Layering order matters (bottom to top)
	c.Append(body, head, beard, hat, leftEye, rightEye)

	return c.Render("svg gnome")
}

var gnomeBodyColors = []string{
	"#4CAF50", // Green
	"#2196F3", // Blue
	"#9C27B0", // Purple
	"#FF5722", // Orange
	"#795548", // Brown
	"#607D8B", // Grayish Blue
	"#E91E63", // Pink
	"#FFC107", // Amber
	"#00BCD4", // Cyan
	"#8BC34A", // Light Green
	"#FF9800", // Deep Orange
	"#3F51B5", // Indigo
	"#673AB7", // Deep Purple
	"#009688", // Teal
	"#F44336", // Red
	"#CDDC39", // Lime
}
