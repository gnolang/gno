// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.3
// source: proto/stats.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HubClient is the client API for Hub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HubClient interface {
	// GetDataStream returns a stream of fresh data from the stats hub
	GetDataStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Hub_GetDataStreamClient, error)
	// Register registers the node instance with the stats hub
	Register(ctx context.Context, in *StaticInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// PushData continuously pushes the node data to the stats hub
	PushData(ctx context.Context, opts ...grpc.CallOption) (Hub_PushDataClient, error)
}

type hubClient struct {
	cc grpc.ClientConnInterface
}

func NewHubClient(cc grpc.ClientConnInterface) HubClient {
	return &hubClient{cc}
}

func (c *hubClient) GetDataStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Hub_GetDataStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hub_ServiceDesc.Streams[0], "/Hub/GetDataStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &hubGetDataStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Hub_GetDataStreamClient interface {
	Recv() (*DataPoint, error)
	grpc.ClientStream
}

type hubGetDataStreamClient struct {
	grpc.ClientStream
}

func (x *hubGetDataStreamClient) Recv() (*DataPoint, error) {
	m := new(DataPoint)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hubClient) Register(ctx context.Context, in *StaticInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Hub/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) PushData(ctx context.Context, opts ...grpc.CallOption) (Hub_PushDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hub_ServiceDesc.Streams[1], "/Hub/PushData", opts...)
	if err != nil {
		return nil, err
	}
	x := &hubPushDataClient{stream}
	return x, nil
}

type Hub_PushDataClient interface {
	Send(*DynamicInfo) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type hubPushDataClient struct {
	grpc.ClientStream
}

func (x *hubPushDataClient) Send(m *DynamicInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hubPushDataClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HubServer is the server API for Hub service.
// All implementations must embed UnimplementedHubServer
// for forward compatibility
type HubServer interface {
	// GetDataStream returns a stream of fresh data from the stats hub
	GetDataStream(*emptypb.Empty, Hub_GetDataStreamServer) error
	// Register registers the node instance with the stats hub
	Register(context.Context, *StaticInfo) (*emptypb.Empty, error)
	// PushData continuously pushes the node data to the stats hub
	PushData(Hub_PushDataServer) error
	mustEmbedUnimplementedHubServer()
}

// UnimplementedHubServer must be embedded to have forward compatible implementations.
type UnimplementedHubServer struct {
}

func (UnimplementedHubServer) GetDataStream(*emptypb.Empty, Hub_GetDataStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDataStream not implemented")
}
func (UnimplementedHubServer) Register(context.Context, *StaticInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedHubServer) PushData(Hub_PushDataServer) error {
	return status.Errorf(codes.Unimplemented, "method PushData not implemented")
}
func (UnimplementedHubServer) mustEmbedUnimplementedHubServer() {}

// UnsafeHubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HubServer will
// result in compilation errors.
type UnsafeHubServer interface {
	mustEmbedUnimplementedHubServer()
}

func RegisterHubServer(s grpc.ServiceRegistrar, srv HubServer) {
	s.RegisterService(&Hub_ServiceDesc, srv)
}

func _Hub_GetDataStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HubServer).GetDataStream(m, &hubGetDataStreamServer{stream})
}

type Hub_GetDataStreamServer interface {
	Send(*DataPoint) error
	grpc.ServerStream
}

type hubGetDataStreamServer struct {
	grpc.ServerStream
}

func (x *hubGetDataStreamServer) Send(m *DataPoint) error {
	return x.ServerStream.SendMsg(m)
}

func _Hub_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaticInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hub/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).Register(ctx, req.(*StaticInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_PushData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HubServer).PushData(&hubPushDataServer{stream})
}

type Hub_PushDataServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*DynamicInfo, error)
	grpc.ServerStream
}

type hubPushDataServer struct {
	grpc.ServerStream
}

func (x *hubPushDataServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hubPushDataServer) Recv() (*DynamicInfo, error) {
	m := new(DynamicInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Hub_ServiceDesc is the grpc.ServiceDesc for Hub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Hub",
	HandlerType: (*HubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Hub_Register_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDataStream",
			Handler:       _Hub_GetDataStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PushData",
			Handler:       _Hub_PushData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/stats.proto",
}
