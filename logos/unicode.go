package logos

func isCombining(r rune) bool {
	return inTable(r, combining)
}

//----------------------------------------
// from https://github.com/mattn/go-runewidth
// runewidth doesn't expose whether a character is combining or not.
// TODO might as well fork both runewidth and tcell.

var combining = table{
	{0x0300, 0x036F},
	{0x0483, 0x0489},
	{0x07EB, 0x07F3},
	{0x0C00, 0x0C00},
	{0x0C04, 0x0C04},
	{0x0D00, 0x0D01},
	{0x135D, 0x135F},
	{0x1A7F, 0x1A7F},
	{0x1AB0, 0x1AC0},
	{0x1B6B, 0x1B73},
	{0x1DC0, 0x1DF9},
	{0x1DFB, 0x1DFF},
	{0x20D0, 0x20F0},
	{0x2CEF, 0x2CF1},
	{0x2DE0, 0x2DFF},
	{0x3099, 0x309A},
	{0xA66F, 0xA672},
	{0xA674, 0xA67D},
	{0xA69E, 0xA69F},
	{0xA6F0, 0xA6F1},
	{0xA8E0, 0xA8F1},
	{0xFE20, 0xFE2F},
	{0x101FD, 0x101FD},
	{0x10376, 0x1037A},
	{0x10EAB, 0x10EAC},
	{0x10F46, 0x10F50},
	{0x11300, 0x11301},
	{0x1133B, 0x1133C},
	{0x11366, 0x1136C},
	{0x11370, 0x11374},
	{0x16AF0, 0x16AF4},
	{0x1D165, 0x1D169},
	{0x1D16D, 0x1D172},
	{0x1D17B, 0x1D182},
	{0x1D185, 0x1D18B},
	{0x1D1AA, 0x1D1AD},
	{0x1D242, 0x1D244},
	{0x1E000, 0x1E006},
	{0x1E008, 0x1E018},
	{0x1E01B, 0x1E021},
	{0x1E023, 0x1E024},
	{0x1E026, 0x1E02A},
	{0x1E8D0, 0x1E8D6},
}

type interval struct {
	first rune
	last  rune
}

type table []interval

func inTables(r rune, ts ...table) bool {
	for _, t := range ts {
		if inTable(r, t) {
			return true
		}
	}
	return false
}

func inTable(r rune, t table) bool {
	if r < t[0].first {
		return false
	}

	bot := 0
	top := len(t) - 1
	for top >= bot {
		mid := (bot + top) >> 1

		switch {
		case t[mid].last < r:
			bot = mid + 1
		case t[mid].first > r:
			top = mid - 1
		default:
			return true
		}
	}

	return false
}
