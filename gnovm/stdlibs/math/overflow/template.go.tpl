package overflow

// Code generated by ./gen.go. DO NOT EDIT.

{{- range . }}

// Add{{ .Short }} sums two {{ .Name }}s, returning the result and a boolean status.
func Add{{ .Short }}(a, b {{ .Name }}) ({{ .Name }}, bool) {
	c := a + b
	return c, (c > a) == (b > 0)
}

// Sub{{ .Short }} returns the difference of two {{ .Name }}s and a boolean status.
func Sub{{ .Short }}(a, b {{ .Name }}) ({{ .Name }}, bool) {
	c := a - b
	return c, (c < a) == (b > 0)
}

// Mul{{ .Short }} returns the multiplication of two {{ .Name }}s and a boolean status.
func Mul{{ .Short }}(a, b {{ .Name }}) ({{ .Name }}, bool) {
	if a == 0 || b == 0 {
		return 0, true
	}
	c := a * b
	return c, {{ if .Signed }}(c < 0) == ((a < 0) != (b < 0)) && {{ end }}(c/b == a)
}

// Div{{ .Short }} returns the quotient of two {{ .Name }}s and a boolean status.
func Div{{ .Short }}(a, b {{ .Name }}) ({{ .Name }}, bool) {
	if b == 0 {
		return 0, false
	}
{{- if .Signed }}
	// Only the smallest {{ .Name }} divided by -1 can overflow, as its absolute
	// value cannot be represented as a positive integer.
	return a / b, !(b == -1 && a == {{ .Min }})
{{- else }}
	return a / b, true
{{- end }}
}

// Add{{ .Short }}p returns the sum of two {{ .Name }}s, panicking on overflow.
func Add{{ .Short }}p(a, b {{ .Name }}) {{ .Name }} {
	r, ok := Add{{ .Short }}(a, b)
	if !ok {
		panic("addition overflow")
	}
	return r
}

// Sub{{ .Short }}p returns the difference of two {{ .Name }}s, panicking on overflow.
func Sub{{ .Short }}p(a, b {{ .Name }}) {{ .Name }} {
	r, ok := Sub{{ .Short }}(a, b)
	if !ok {
		panic("subtraction overflow")
	}
	return r
}

// Mul{{ .Short }}p returns the product of two {{ .Name }}s, panicking on overflow.
func Mul{{ .Short }}p(a, b {{ .Name }}) {{ .Name }} {
	r, ok := Mul{{ .Short }}(a, b)
	if !ok {
		panic("multiplication overflow")
	}
	return r
}

// Div{{ .Short }}p returns the quotient of two {{ .Name }}s, panicking on overflow or division by 0.
func Div{{ .Short }}p(a, b {{ .Name }}) {{ .Name }} {
	r, ok := Div{{ .Short }}(a, b)
	if !ok {
		panic("division failure")
	}
	return r
}
{{- end }}
