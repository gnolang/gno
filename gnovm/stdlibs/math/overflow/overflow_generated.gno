package overflow

// Code generated by ./gen.go. DO NOT EDIT.

// Add sums two ints, returning the result and a boolean status.
func Add(a, b int) (int, bool) {
	c := a + b
	return c, (c > a) == (b > 0)
}

// Sub returns the difference of two ints and a boolean status.
func Sub(a, b int) (int, bool) {
	c := a - b
	return c, (c < a) == (b > 0)
}

// Mul returns the multiplication of two ints and a boolean status.
func Mul(a, b int) (int, bool) {
	if a == 0 || b == 0 {
		return 0, true
	}
	c := a * b
	return c, (c < 0) == ((a < 0) != (b < 0)) && (c/b == a)
}

// Div returns the quotient of two ints and a boolean status.
func Div(a, b int) (int, bool) {
	if b == 0 {
		return 0, false
	}
	// Only the smallest int divided by -1 can overflow, as its absolute
	// value cannot be represented as a positive integer.
	return a / b, !(b == -1 && a == -9223372036854775808)
}

// Addp returns the sum of two ints, panicking on overflow.
func Addp(a, b int) int {
	r, ok := Add(a, b)
	if !ok {
		panic("addition overflow")
	}
	return r
}

// Subp returns the difference of two ints, panicking on overflow.
func Subp(a, b int) int {
	r, ok := Sub(a, b)
	if !ok {
		panic("subtraction overflow")
	}
	return r
}

// Mulp returns the product of two ints, panicking on overflow.
func Mulp(a, b int) int {
	r, ok := Mul(a, b)
	if !ok {
		panic("multiplication overflow")
	}
	return r
}

// Divp returns the quotient of two ints, panicking on overflow or division by 0.
func Divp(a, b int) int {
	r, ok := Div(a, b)
	if !ok {
		panic("division failure")
	}
	return r
}

// Addu sums two uints, returning the result and a boolean status.
func Addu(a, b uint) (uint, bool) {
	c := a + b
	return c, (c > a) == (b > 0)
}

// Subu returns the difference of two uints and a boolean status.
func Subu(a, b uint) (uint, bool) {
	c := a - b
	return c, (c < a) == (b > 0)
}

// Mulu returns the multiplication of two uints and a boolean status.
func Mulu(a, b uint) (uint, bool) {
	if a == 0 || b == 0 {
		return 0, true
	}
	c := a * b
	return c, (c/b == a)
}

// Divu returns the quotient of two uints and a boolean status.
func Divu(a, b uint) (uint, bool) {
	if b == 0 {
		return 0, false
	}
	return a / b, true
}

// Addup returns the sum of two uints, panicking on overflow.
func Addup(a, b uint) uint {
	r, ok := Addu(a, b)
	if !ok {
		panic("addition overflow")
	}
	return r
}

// Subup returns the difference of two uints, panicking on overflow.
func Subup(a, b uint) uint {
	r, ok := Subu(a, b)
	if !ok {
		panic("subtraction overflow")
	}
	return r
}

// Mulup returns the product of two uints, panicking on overflow.
func Mulup(a, b uint) uint {
	r, ok := Mulu(a, b)
	if !ok {
		panic("multiplication overflow")
	}
	return r
}

// Divup returns the quotient of two uints, panicking on overflow or division by 0.
func Divup(a, b uint) uint {
	r, ok := Divu(a, b)
	if !ok {
		panic("division failure")
	}
	return r
}

// Add8 sums two int8s, returning the result and a boolean status.
func Add8(a, b int8) (int8, bool) {
	c := a + b
	return c, (c > a) == (b > 0)
}

// Sub8 returns the difference of two int8s and a boolean status.
func Sub8(a, b int8) (int8, bool) {
	c := a - b
	return c, (c < a) == (b > 0)
}

// Mul8 returns the multiplication of two int8s and a boolean status.
func Mul8(a, b int8) (int8, bool) {
	if a == 0 || b == 0 {
		return 0, true
	}
	c := a * b
	return c, (c < 0) == ((a < 0) != (b < 0)) && (c/b == a)
}

// Div8 returns the quotient of two int8s and a boolean status.
func Div8(a, b int8) (int8, bool) {
	if b == 0 {
		return 0, false
	}
	// Only the smallest int8 divided by -1 can overflow, as its absolute
	// value cannot be represented as a positive integer.
	return a / b, !(b == -1 && a == -128)
}

// Add8p returns the sum of two int8s, panicking on overflow.
func Add8p(a, b int8) int8 {
	r, ok := Add8(a, b)
	if !ok {
		panic("addition overflow")
	}
	return r
}

// Sub8p returns the difference of two int8s, panicking on overflow.
func Sub8p(a, b int8) int8 {
	r, ok := Sub8(a, b)
	if !ok {
		panic("subtraction overflow")
	}
	return r
}

// Mul8p returns the product of two int8s, panicking on overflow.
func Mul8p(a, b int8) int8 {
	r, ok := Mul8(a, b)
	if !ok {
		panic("multiplication overflow")
	}
	return r
}

// Div8p returns the quotient of two int8s, panicking on overflow or division by 0.
func Div8p(a, b int8) int8 {
	r, ok := Div8(a, b)
	if !ok {
		panic("division failure")
	}
	return r
}

// Addu8 sums two uint8s, returning the result and a boolean status.
func Addu8(a, b uint8) (uint8, bool) {
	c := a + b
	return c, (c > a) == (b > 0)
}

// Subu8 returns the difference of two uint8s and a boolean status.
func Subu8(a, b uint8) (uint8, bool) {
	c := a - b
	return c, (c < a) == (b > 0)
}

// Mulu8 returns the multiplication of two uint8s and a boolean status.
func Mulu8(a, b uint8) (uint8, bool) {
	if a == 0 || b == 0 {
		return 0, true
	}
	c := a * b
	return c, (c/b == a)
}

// Divu8 returns the quotient of two uint8s and a boolean status.
func Divu8(a, b uint8) (uint8, bool) {
	if b == 0 {
		return 0, false
	}
	return a / b, true
}

// Addu8p returns the sum of two uint8s, panicking on overflow.
func Addu8p(a, b uint8) uint8 {
	r, ok := Addu8(a, b)
	if !ok {
		panic("addition overflow")
	}
	return r
}

// Subu8p returns the difference of two uint8s, panicking on overflow.
func Subu8p(a, b uint8) uint8 {
	r, ok := Subu8(a, b)
	if !ok {
		panic("subtraction overflow")
	}
	return r
}

// Mulu8p returns the product of two uint8s, panicking on overflow.
func Mulu8p(a, b uint8) uint8 {
	r, ok := Mulu8(a, b)
	if !ok {
		panic("multiplication overflow")
	}
	return r
}

// Divu8p returns the quotient of two uint8s, panicking on overflow or division by 0.
func Divu8p(a, b uint8) uint8 {
	r, ok := Divu8(a, b)
	if !ok {
		panic("division failure")
	}
	return r
}

// Add16 sums two int16s, returning the result and a boolean status.
func Add16(a, b int16) (int16, bool) {
	c := a + b
	return c, (c > a) == (b > 0)
}

// Sub16 returns the difference of two int16s and a boolean status.
func Sub16(a, b int16) (int16, bool) {
	c := a - b
	return c, (c < a) == (b > 0)
}

// Mul16 returns the multiplication of two int16s and a boolean status.
func Mul16(a, b int16) (int16, bool) {
	if a == 0 || b == 0 {
		return 0, true
	}
	c := a * b
	return c, (c < 0) == ((a < 0) != (b < 0)) && (c/b == a)
}

// Div16 returns the quotient of two int16s and a boolean status.
func Div16(a, b int16) (int16, bool) {
	if b == 0 {
		return 0, false
	}
	// Only the smallest int16 divided by -1 can overflow, as its absolute
	// value cannot be represented as a positive integer.
	return a / b, !(b == -1 && a == -32768)
}

// Add16p returns the sum of two int16s, panicking on overflow.
func Add16p(a, b int16) int16 {
	r, ok := Add16(a, b)
	if !ok {
		panic("addition overflow")
	}
	return r
}

// Sub16p returns the difference of two int16s, panicking on overflow.
func Sub16p(a, b int16) int16 {
	r, ok := Sub16(a, b)
	if !ok {
		panic("subtraction overflow")
	}
	return r
}

// Mul16p returns the product of two int16s, panicking on overflow.
func Mul16p(a, b int16) int16 {
	r, ok := Mul16(a, b)
	if !ok {
		panic("multiplication overflow")
	}
	return r
}

// Div16p returns the quotient of two int16s, panicking on overflow or division by 0.
func Div16p(a, b int16) int16 {
	r, ok := Div16(a, b)
	if !ok {
		panic("division failure")
	}
	return r
}

// Addu16 sums two uint16s, returning the result and a boolean status.
func Addu16(a, b uint16) (uint16, bool) {
	c := a + b
	return c, (c > a) == (b > 0)
}

// Subu16 returns the difference of two uint16s and a boolean status.
func Subu16(a, b uint16) (uint16, bool) {
	c := a - b
	return c, (c < a) == (b > 0)
}

// Mulu16 returns the multiplication of two uint16s and a boolean status.
func Mulu16(a, b uint16) (uint16, bool) {
	if a == 0 || b == 0 {
		return 0, true
	}
	c := a * b
	return c, (c/b == a)
}

// Divu16 returns the quotient of two uint16s and a boolean status.
func Divu16(a, b uint16) (uint16, bool) {
	if b == 0 {
		return 0, false
	}
	return a / b, true
}

// Addu16p returns the sum of two uint16s, panicking on overflow.
func Addu16p(a, b uint16) uint16 {
	r, ok := Addu16(a, b)
	if !ok {
		panic("addition overflow")
	}
	return r
}

// Subu16p returns the difference of two uint16s, panicking on overflow.
func Subu16p(a, b uint16) uint16 {
	r, ok := Subu16(a, b)
	if !ok {
		panic("subtraction overflow")
	}
	return r
}

// Mulu16p returns the product of two uint16s, panicking on overflow.
func Mulu16p(a, b uint16) uint16 {
	r, ok := Mulu16(a, b)
	if !ok {
		panic("multiplication overflow")
	}
	return r
}

// Divu16p returns the quotient of two uint16s, panicking on overflow or division by 0.
func Divu16p(a, b uint16) uint16 {
	r, ok := Divu16(a, b)
	if !ok {
		panic("division failure")
	}
	return r
}

// Add32 sums two int32s, returning the result and a boolean status.
func Add32(a, b int32) (int32, bool) {
	c := a + b
	return c, (c > a) == (b > 0)
}

// Sub32 returns the difference of two int32s and a boolean status.
func Sub32(a, b int32) (int32, bool) {
	c := a - b
	return c, (c < a) == (b > 0)
}

// Mul32 returns the multiplication of two int32s and a boolean status.
func Mul32(a, b int32) (int32, bool) {
	if a == 0 || b == 0 {
		return 0, true
	}
	c := a * b
	return c, (c < 0) == ((a < 0) != (b < 0)) && (c/b == a)
}

// Div32 returns the quotient of two int32s and a boolean status.
func Div32(a, b int32) (int32, bool) {
	if b == 0 {
		return 0, false
	}
	// Only the smallest int32 divided by -1 can overflow, as its absolute
	// value cannot be represented as a positive integer.
	return a / b, !(b == -1 && a == -2147483648)
}

// Add32p returns the sum of two int32s, panicking on overflow.
func Add32p(a, b int32) int32 {
	r, ok := Add32(a, b)
	if !ok {
		panic("addition overflow")
	}
	return r
}

// Sub32p returns the difference of two int32s, panicking on overflow.
func Sub32p(a, b int32) int32 {
	r, ok := Sub32(a, b)
	if !ok {
		panic("subtraction overflow")
	}
	return r
}

// Mul32p returns the product of two int32s, panicking on overflow.
func Mul32p(a, b int32) int32 {
	r, ok := Mul32(a, b)
	if !ok {
		panic("multiplication overflow")
	}
	return r
}

// Div32p returns the quotient of two int32s, panicking on overflow or division by 0.
func Div32p(a, b int32) int32 {
	r, ok := Div32(a, b)
	if !ok {
		panic("division failure")
	}
	return r
}

// Addu32 sums two uint32s, returning the result and a boolean status.
func Addu32(a, b uint32) (uint32, bool) {
	c := a + b
	return c, (c > a) == (b > 0)
}

// Subu32 returns the difference of two uint32s and a boolean status.
func Subu32(a, b uint32) (uint32, bool) {
	c := a - b
	return c, (c < a) == (b > 0)
}

// Mulu32 returns the multiplication of two uint32s and a boolean status.
func Mulu32(a, b uint32) (uint32, bool) {
	if a == 0 || b == 0 {
		return 0, true
	}
	c := a * b
	return c, (c/b == a)
}

// Divu32 returns the quotient of two uint32s and a boolean status.
func Divu32(a, b uint32) (uint32, bool) {
	if b == 0 {
		return 0, false
	}
	return a / b, true
}

// Addu32p returns the sum of two uint32s, panicking on overflow.
func Addu32p(a, b uint32) uint32 {
	r, ok := Addu32(a, b)
	if !ok {
		panic("addition overflow")
	}
	return r
}

// Subu32p returns the difference of two uint32s, panicking on overflow.
func Subu32p(a, b uint32) uint32 {
	r, ok := Subu32(a, b)
	if !ok {
		panic("subtraction overflow")
	}
	return r
}

// Mulu32p returns the product of two uint32s, panicking on overflow.
func Mulu32p(a, b uint32) uint32 {
	r, ok := Mulu32(a, b)
	if !ok {
		panic("multiplication overflow")
	}
	return r
}

// Divu32p returns the quotient of two uint32s, panicking on overflow or division by 0.
func Divu32p(a, b uint32) uint32 {
	r, ok := Divu32(a, b)
	if !ok {
		panic("division failure")
	}
	return r
}

// Add64 sums two int64s, returning the result and a boolean status.
func Add64(a, b int64) (int64, bool) {
	c := a + b
	return c, (c > a) == (b > 0)
}

// Sub64 returns the difference of two int64s and a boolean status.
func Sub64(a, b int64) (int64, bool) {
	c := a - b
	return c, (c < a) == (b > 0)
}

// Mul64 returns the multiplication of two int64s and a boolean status.
func Mul64(a, b int64) (int64, bool) {
	if a == 0 || b == 0 {
		return 0, true
	}
	c := a * b
	return c, (c < 0) == ((a < 0) != (b < 0)) && (c/b == a)
}

// Div64 returns the quotient of two int64s and a boolean status.
func Div64(a, b int64) (int64, bool) {
	if b == 0 {
		return 0, false
	}
	// Only the smallest int64 divided by -1 can overflow, as its absolute
	// value cannot be represented as a positive integer.
	return a / b, !(b == -1 && a == -9223372036854775808)
}

// Add64p returns the sum of two int64s, panicking on overflow.
func Add64p(a, b int64) int64 {
	r, ok := Add64(a, b)
	if !ok {
		panic("addition overflow")
	}
	return r
}

// Sub64p returns the difference of two int64s, panicking on overflow.
func Sub64p(a, b int64) int64 {
	r, ok := Sub64(a, b)
	if !ok {
		panic("subtraction overflow")
	}
	return r
}

// Mul64p returns the product of two int64s, panicking on overflow.
func Mul64p(a, b int64) int64 {
	r, ok := Mul64(a, b)
	if !ok {
		panic("multiplication overflow")
	}
	return r
}

// Div64p returns the quotient of two int64s, panicking on overflow or division by 0.
func Div64p(a, b int64) int64 {
	r, ok := Div64(a, b)
	if !ok {
		panic("division failure")
	}
	return r
}

// Addu64 sums two uint64s, returning the result and a boolean status.
func Addu64(a, b uint64) (uint64, bool) {
	c := a + b
	return c, (c > a) == (b > 0)
}

// Subu64 returns the difference of two uint64s and a boolean status.
func Subu64(a, b uint64) (uint64, bool) {
	c := a - b
	return c, (c < a) == (b > 0)
}

// Mulu64 returns the multiplication of two uint64s and a boolean status.
func Mulu64(a, b uint64) (uint64, bool) {
	if a == 0 || b == 0 {
		return 0, true
	}
	c := a * b
	return c, (c/b == a)
}

// Divu64 returns the quotient of two uint64s and a boolean status.
func Divu64(a, b uint64) (uint64, bool) {
	if b == 0 {
		return 0, false
	}
	return a / b, true
}

// Addu64p returns the sum of two uint64s, panicking on overflow.
func Addu64p(a, b uint64) uint64 {
	r, ok := Addu64(a, b)
	if !ok {
		panic("addition overflow")
	}
	return r
}

// Subu64p returns the difference of two uint64s, panicking on overflow.
func Subu64p(a, b uint64) uint64 {
	r, ok := Subu64(a, b)
	if !ok {
		panic("subtraction overflow")
	}
	return r
}

// Mulu64p returns the product of two uint64s, panicking on overflow.
func Mulu64p(a, b uint64) uint64 {
	r, ok := Mulu64(a, b)
	if !ok {
		panic("multiplication overflow")
	}
	return r
}

// Divu64p returns the quotient of two uint64s, panicking on overflow or division by 0.
func Divu64p(a, b uint64) uint64 {
	r, ok := Divu64(a, b)
	if !ok {
		panic("division failure")
	}
	return r
}
