package gnolang

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestOpString(t *testing.T) {
	t.Parallel()

	testTable := []struct {
		desc     string
		in       Op
		expected string
	}{
		{"OpInvalid", 0, "OpInvalid"},
		{"OpHalt", 1, "OpHalt"},
		{"OpNoop", 2, "OpNoop"},
		{"OpExec", 3, "OpExec"},
		{"OpPrecall", 4, "OpPrecall"},
		{"OpCall", 5, "OpCall"},
		{"OpCallNativeBody", 6, "OpCallNativeBody"},
		{"OpReturn", 7, "OpReturn"},
		{"OpReturnFromBlock", 8, "OpReturnFromBlock"},
		{"OpReturnToBlock", 9, "OpReturnToBlock"},
		{"OpDefer", 10, "OpDefer"},
		{"OpCallDeferNativeBody", 11, "OpCallDeferNativeBody"},
		{"OpGo", 12, "OpGo"},
		{"OpSelect", 13, "OpSelect"},
		{"OpSwitchClause", 14, "OpSwitchClause"},
		{"OpSwitchClauseCase", 15, "OpSwitchClauseCase"},
		{"OpTypeSwitch", 16, "OpTypeSwitch"},
		{"OpIfCond", 17, "OpIfCond"},
		{"OpPopValue", 18, "OpPopValue"},
		{"OpPopResults", 19, "OpPopResults"},
		{"OpPopBlock", 20, "OpPopBlock"},
		{"OpPopFrameAndReset", 21, "OpPopFrameAndReset"},
		{"OpPanic1", 22, "OpPanic1"},
		{"OpPanic2", 23, "OpPanic2"},
		{"Op(24)", 24, "Op(24)"},
		{"Op(25)", 25, "Op(25)"},
		{"Op(26)", 26, "Op(26)"},
		{"Op(27)", 27, "Op(27)"},
		{"Op(28)", 28, "Op(28)"},
		{"Op(29)", 29, "Op(29)"},
		{"Op(30)", 30, "Op(30)"},
		{"Op(31)", 31, "Op(31)"},
		{"OpUpos", 32, "OpUpos"},
		{"OpUneg", 33, "OpUneg"},
		{"OpUnot", 34, "OpUnot"},
		{"OpUxor", 35, "OpUxor"},
		{"Op(36)", 36, "Op(36)"},
		{"OpUrecv", 37, "OpUrecv"},
		{"OpLor", 38, "OpLor"},
		{"OpLand", 39, "OpLand"},
		{"OpEql", 40, "OpEql"},
		{"OpNeq", 41, "OpNeq"},
		{"OpLss", 42, "OpLss"},
		{"OpLeq", 43, "OpLeq"},
		{"OpGtr", 44, "OpGtr"},
		{"OpGeq", 45, "OpGeq"},
		{"OpAdd", 46, "OpAdd"},
		{"OpSub", 47, "OpSub"},
		{"OpBor", 48, "OpBor"},
		{"OpXor", 49, "OpXor"},
		{"OpMul", 50, "OpMul"},
		{"OpQuo", 51, "OpQuo"},
		{"OpRem", 52, "OpRem"},
		{"OpShl", 53, "OpShl"},
		{"OpShr", 54, "OpShr"},
		{"OpBand", 55, "OpBand"},
		{"OpBandn", 56, "OpBandn"},
		{"Op(57)", 57, "Op(57)"},
		{"Op(58)", 58, "Op(58)"},
		{"Op(59)", 59, "Op(59)"},
		{"Op(60)", 60, "Op(60)"},
		{"Op(61)", 61, "Op(61)"},
		{"Op(62)", 62, "Op(62)"},
		{"Op(63)", 63, "Op(63)"},
		{"OpEval", 64, "OpEval"},
		{"OpBinary1", 65, "OpBinary1"},
		{"OpIndex1", 66, "OpIndex1"},
		{"OpIndex2", 67, "OpIndex2"},
		{"OpSelector", 68, "OpSelector"},
		{"OpSlice", 69, "OpSlice"},
		{"OpStar", 70, "OpStar"},
		{"OpRef", 71, "OpRef"},
		{"OpTypeAssert1", 72, "OpTypeAssert1"},
		{"OpTypeAssert2", 73, "OpTypeAssert2"},
		{"OpStaticTypeOf", 74, "OpStaticTypeOf"},
		{"OpCompositeLit", 75, "OpCompositeLit"},
		{"OpArrayLit", 76, "OpArrayLit"},
		{"OpSliceLit", 77, "OpSliceLit"},
		{"OpSliceLit2", 78, "OpSliceLit2"},
		{"OpMapLit", 79, "OpMapLit"},
		{"OpStructLit", 80, "OpStructLit"},
		{"OpFuncLit", 81, "OpFuncLit"},
		{"OpConvert", 82, "OpConvert"},
		{"Op(83)", 83, "Op(83)"},
		{"Op(84)", 84, "Op(84)"},
		{"Op(85)", 85, "Op(85)"},
		{"Op(86)", 86, "Op(86)"},
		{"Op(87)", 87, "Op(87)"},
		{"Op(88)", 88, "Op(88)"},
		{"Op(89)", 89, "Op(89)"},
		{"Op(90)", 90, "Op(90)"},
		{"Op(91)", 91, "Op(91)"},
		{"Op(92)", 92, "Op(92)"},
		{"Op(93)", 93, "Op(93)"},
		{"Op(94)", 94, "Op(94)"},
		{"Op(95)", 95, "Op(95)"},
		{"OpArrayLitGoNative", 96, "OpArrayLitGoNative"},
		{"OpSliceLitGoNative", 97, "OpSliceLitGoNative"},
		{"OpStructLitGoNative", 98, "OpStructLitGoNative"},
		{"OpCallGoNative", 99, "OpCallGoNative"},
		{"Op(100)", 100, "Op(100)"},
		{"Op(101)", 101, "Op(101)"},
		{"Op(102)", 102, "Op(102)"},
		{"Op(103)", 103, "Op(103)"},
		{"Op(104)", 104, "Op(104)"},
		{"Op(105)", 105, "Op(105)"},
		{"Op(106)", 106, "Op(106)"},
		{"Op(107)", 107, "Op(107)"},
		{"Op(108)", 108, "Op(108)"},
		{"Op(109)", 109, "Op(109)"},
		{"Op(110)", 110, "Op(110)"},
		{"Op(111)", 111, "Op(111)"},
		{"OpFieldType", 112, "OpFieldType"},
		{"OpArrayType", 113, "OpArrayType"},
		{"OpSliceType", 114, "OpSliceType"},
		{"OpPointerType", 115, "OpPointerType"},
		{"OpInterfaceType", 116, "OpInterfaceType"},
		{"OpChanType", 117, "OpChanType"},
		{"OpFuncType", 118, "OpFuncType"},
		{"OpMapType", 119, "OpMapType"},
		{"OpStructType", 120, "OpStructType"},
		{"OpMaybeNativeType", 121, "OpMaybeNativeType"},
		{"Op(122)", 122, "Op(122)"},
		{"Op(123)", 123, "Op(123)"},
		{"Op(124)", 124, "Op(124)"},
		{"Op(125)", 125, "Op(125)"},
		{"Op(126)", 126, "Op(126)"},
		{"Op(127)", 127, "Op(127)"},
		{"OpAssign", 128, "OpAssign"},
		{"OpAddAssign", 129, "OpAddAssign"},
		{"OpSubAssign", 130, "OpSubAssign"},
		{"OpMulAssign", 131, "OpMulAssign"},
		{"OpQuoAssign", 132, "OpQuoAssign"},
		{"OpRemAssign", 133, "OpRemAssign"},
		{"OpBandAssign", 134, "OpBandAssign"},
		{"OpBandnAssign", 135, "OpBandnAssign"},
		{"OpBorAssign", 136, "OpBorAssign"},
		{"OpXorAssign", 137, "OpXorAssign"},
		{"OpShlAssign", 138, "OpShlAssign"},
		{"OpShrAssign", 139, "OpShrAssign"},
		{"OpDefine", 140, "OpDefine"},
		{"OpInc", 141, "OpInc"},
		{"OpDec", 142, "OpDec"},
		{"Op(143)", 143, "Op(143)"},
		{"OpValueDecl", 144, "OpValueDecl"},
		{"OpTypeDecl", 145, "OpTypeDecl"},
		{"Op(146)", 146, "Op(146)"},
		{"Op(147)", 147, "Op(147)"},
		{"Op(148)", 148, "Op(148)"},
		{"Op(149)", 149, "Op(149)"},
		{"Op(150)", 150, "Op(150)"},
		{"Op(151)", 151, "Op(151)"},
		{"Op(152)", 152, "Op(152)"},
		{"Op(153)", 153, "Op(153)"},
		{"Op(154)", 154, "Op(154)"},
		{"Op(155)", 155, "Op(155)"},
		{"Op(156)", 156, "Op(156)"},
		{"Op(157)", 157, "Op(157)"},
		{"Op(158)", 158, "Op(158)"},
		{"Op(159)", 159, "Op(159)"},
		{"Op(160)", 160, "Op(160)"},
		{"Op(161)", 161, "Op(161)"},
		{"Op(162)", 162, "Op(162)"},
		{"Op(163)", 163, "Op(163)"},
		{"Op(164)", 164, "Op(164)"},
		{"Op(165)", 165, "Op(165)"},
		{"Op(166)", 166, "Op(166)"},
		{"Op(167)", 167, "Op(167)"},
		{"Op(168)", 168, "Op(168)"},
		{"Op(169)", 169, "Op(169)"},
		{"Op(170)", 170, "Op(170)"},
		{"Op(171)", 171, "Op(171)"},
		{"Op(172)", 172, "Op(172)"},
		{"Op(173)", 173, "Op(173)"},
		{"Op(174)", 174, "Op(174)"},
		{"Op(175)", 175, "Op(175)"},
		{"Op(176)", 176, "Op(176)"},
		{"Op(177)", 177, "Op(177)"},
		{"Op(178)", 178, "Op(178)"},
		{"Op(179)", 179, "Op(179)"},
		{"Op(180)", 180, "Op(180)"},
		{"Op(181)", 181, "Op(181)"},
		{"Op(182)", 182, "Op(182)"},
		{"Op(183)", 183, "Op(183)"},
		{"Op(184)", 184, "Op(184)"},
		{"Op(185)", 185, "Op(185)"},
		{"Op(186)", 186, "Op(186)"},
		{"Op(187)", 187, "Op(187)"},
		{"Op(188)", 188, "Op(188)"},
		{"Op(189)", 189, "Op(189)"},
		{"Op(190)", 190, "Op(190)"},
		{"Op(191)", 191, "Op(191)"},
		{"Op(192)", 192, "Op(192)"},
		{"Op(193)", 193, "Op(193)"},
		{"Op(194)", 194, "Op(194)"},
		{"Op(195)", 195, "Op(195)"},
		{"Op(196)", 196, "Op(196)"},
		{"Op(197)", 197, "Op(197)"},
		{"Op(198)", 198, "Op(198)"},
		{"Op(199)", 199, "Op(199)"},
		{"Op(200)", 200, "Op(200)"},
		{"Op(201)", 201, "Op(201)"},
		{"Op(202)", 202, "Op(202)"},
		{"Op(203)", 203, "Op(203)"},
		{"Op(204)", 204, "Op(204)"},
		{"Op(205)", 205, "Op(205)"},
		{"Op(206)", 206, "Op(206)"},
		{"Op(207)", 207, "Op(207)"},
		{"OpSticky", 208, "OpSticky"},
		{"OpBody", 209, "OpBody"},
		{"OpForLoop", 210, "OpForLoop"},
		{"OpRangeIter", 211, "OpRangeIter"},
		{"OpRangeIterString", 212, "OpRangeIterString"},
		{"OpRangeIterMap", 213, "OpRangeIterMap"},
		{"OpRangeIterArrayPtr", 214, "OpRangeIterArrayPtr"},
		{"OpReturnCallDefers", 215, "OpReturnCallDefers"},
		{"Op(216)", 216, "Op(216)"},
	}

	for _, tt := range testTable {
		tt := tt
		t.Run(tt.desc, func(t *testing.T) {
			t.Parallel()

			actual := tt.in.String()
			if actual != tt.expected {
				assert.Equal(t, tt.expected, actual)
			}
		})
	}
}
