package transpiler

import (
	"go/ast"
	"path/filepath"
	"strings"
	"testing"

	"github.com/gnolang/gno/gnovm/pkg/gnoenv"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestTranspiledFilenameAndTags(t *testing.T) {
	t.Parallel()

	tt := []struct {
		name    string
		changed string
		tags    string
	}{
		{
			"hello.gno",
			"hello.gno.gen.go",
			"gno",
		},
		{
			"a/b/hello.gno",
			"hello.gno.gen.go",
			"gno",
		},
		{
			"hey_test.gno",
			".hey_test.gno.gen_test.go",
			"gno && test",
		},
		{
			"hey_filetest.gno",
			".hey_filetest.gno.gen.go",
			"gno && filetest",
		},
		{
			"badname.go",
			"badname.go.gno.gen.go",
			"gno",
		},
		{
			"badname_test.go",
			"badname_test.go.gno.gen.go",
			"gno",
		},
	}

	for _, tc := range tt {
		newName, tags := TranspiledFilenameAndTags(tc.name)
		assert.Equal(t, tc.changed, newName, "name for %q", tc.name)
		assert.Equal(t, tc.tags, tags, "tags for %q", tc.name)
	}
}

func TestTranspile(t *testing.T) {
	t.Parallel()

	cases := []struct {
		name            string
		tags            string
		filename        string
		source          string
		expectedOutput  string
		expectedImports []*ast.ImportSpec
		expectedError   string
	}{
		{
			name: "hello",
			source: `
package foo

func hello() string { return "world"}
`,
			expectedOutput: `
// Code generated by github.com/gnolang/gno. DO NOT EDIT.

//line foo.gno:1:1
package foo

func hello() string { return "world" }
`,
		},
		{
			name: "hello with tags",
			tags: "gno",
			source: `
package foo

func hello() string { return "world"}
`,
			expectedOutput: `
// Code generated by github.com/gnolang/gno. DO NOT EDIT.

//go:build gno

//line foo.gno:1:1
package foo

func hello() string { return "world" }
`,
		},
		{
			name: "use-std",
			source: `
package foo

import "std"

func hello() string {
	_ = std.Foo
	return "world"
}
`,
			expectedOutput: `
// Code generated by github.com/gnolang/gno. DO NOT EDIT.

//line foo.gno:1:1
package foo

import "github.com/gnolang/gno/gnovm/stdlibs/std"

func hello() string {
	_ = std.Foo
	return "world"
}
`,
			expectedImports: []*ast.ImportSpec{
				{
					Path: &ast.BasicLit{
						ValuePos: 21,
						Kind:     9,
						Value:    `"github.com/gnolang/gno/gnovm/stdlibs/std"`,
					},
				},
			},
		},
		{
			name: "use-realm",
			source: `
package foo

import "gno.land/r/demo/users"

func foo()  { _ = users.Register}
`,
			expectedOutput: `
// Code generated by github.com/gnolang/gno. DO NOT EDIT.

//line foo.gno:1:1
package foo

import "github.com/gnolang/gno/examples/gno.land/r/demo/users"

func foo() { _ = users.Register }
`,
			expectedImports: []*ast.ImportSpec{
				{
					Path: &ast.BasicLit{
						ValuePos: 21,
						Kind:     9,
						Value:    `"github.com/gnolang/gno/examples/gno.land/r/demo/users"`,
					},
				},
			},
		},
		{
			name: "use-avl",
			source: `
package foo

import "gno.land/p/demo/avl"

func foo() { _ = avl.NewTree("hey", 1) }
`,
			expectedOutput: `
// Code generated by github.com/gnolang/gno. DO NOT EDIT.

//line foo.gno:1:1
package foo

import "github.com/gnolang/gno/examples/gno.land/p/demo/avl"

func foo() { _ = avl.NewTree("hey", 1) }
`,
			expectedImports: []*ast.ImportSpec{
				{
					Path: &ast.BasicLit{
						ValuePos: 21,
						Kind:     9,
						Value:    `"github.com/gnolang/gno/examples/gno.land/p/demo/avl"`,
					},
				},
			},
		},
		{
			name: "use-named-std",
			source: `
package foo

import bar "std"

func hello() string {
	_ = bar.Foo
	return "world"
}
`,
			expectedOutput: `
// Code generated by github.com/gnolang/gno. DO NOT EDIT.

//line foo.gno:1:1
package foo

import bar "github.com/gnolang/gno/gnovm/stdlibs/std"

func hello() string {
	_ = bar.Foo
	return "world"
}
`,
			expectedImports: []*ast.ImportSpec{
				{
					Name: &ast.Ident{
						NamePos: 21,
						Name:    "bar",
					},
					Path: &ast.BasicLit{
						ValuePos: 25,
						Kind:     9,
						Value:    `"github.com/gnolang/gno/gnovm/stdlibs/std"`,
					},
				},
			},
		},
		{
			name: "unknown-package",
			source: `
package foo

import "reflect"

func foo() { _ = reflect.ValueOf }
`,
			expectedError: `transpileAST: foo.gno:3:8: import "reflect" does not exist`,
		},
		{
			name: "syntax-error",
			source: `
package foo

invalid
`,
			expectedError: `parse: foo.gno:3:1: expected declaration, found invalid`,
		},
		{
			name: "unknown-realm",
			source: `
package foo

import "gno.land/p/demo/unknownxyz"
`,
			expectedOutput: `
// Code generated by github.com/gnolang/gno. DO NOT EDIT.

//line foo.gno:1:1
package foo

import "github.com/gnolang/gno/examples/gno.land/p/demo/unknownxyz"
`,
			expectedError: `transpileAST: foo.gno:3:8: import "gno.land/p/demo/unknownxyz" does not exist`,
		},
		{
			// Test files should allow unknown imports while
			// we still have "native" packages.

			name:     "unknown-realm-test",
			filename: "foo_test.gno",
			source: `
package foo

import "gno.land/p/demo/unknownxyz"
`,
			expectedOutput: `
// Code generated by github.com/gnolang/gno. DO NOT EDIT.

//line foo_test.gno:1:1
package foo

import "github.com/gnolang/gno/examples/gno.land/p/demo/unknownxyz"
`,
			expectedImports: []*ast.ImportSpec{
				{
					Path: &ast.BasicLit{
						ValuePos: 21,
						Kind:     9,
						Value:    `"github.com/gnolang/gno/examples/gno.land/p/demo/unknownxyz"`,
					},
				},
			},
		},
		{
			name: "imported-package",
			source: `
package foo

import "regexp"

func foo() { _ = regexp.MatchString }
`,
			expectedOutput: `
// Code generated by github.com/gnolang/gno. DO NOT EDIT.

//line foo.gno:1:1
package foo

import "github.com/gnolang/gno/gnovm/stdlibs/regexp"

func foo() { _ = regexp.MatchString }
`,
			expectedImports: []*ast.ImportSpec{
				{
					Path: &ast.BasicLit{
						ValuePos: 21,
						Kind:     9,
						Value:    `"github.com/gnolang/gno/gnovm/stdlibs/regexp"`,
					},
				},
			},
		},
		{
			name:     "natbind-func",
			filename: filepath.Join(gnoenv.RootDir(), "gnovm/stdlibs/math/math.gno"),
			source: `
package math

import "std"

func Float32bits(i float32) uint32

func testfunc() {
	println(Float32bits(3.14159))
	std.AssertOriginCall()
}

func otherFunc() {
	std := 1
	// This is (incorrectly) changed for now.
	std.AssertOriginCall()
}
`,
			expectedOutput: `
// Code generated by github.com/gnolang/gno. DO NOT EDIT.

//line math.gno:1:1
package math

import "github.com/gnolang/gno/gnovm/stdlibs/std"

func testfunc() {
	println(Float32bits(3.14159))
	std.AssertOriginCall(nil)
}

func otherFunc() {
	std := 1
	// This is (incorrectly) changed for now.
	std.AssertOriginCall(nil)
}
`,
			expectedImports: []*ast.ImportSpec{
				{
					Path: &ast.BasicLit{
						ValuePos: 22,
						Kind:     9,
						Value:    `"github.com/gnolang/gno/gnovm/stdlibs/std"`,
					},
				},
			},
		},
		{
			name:     "natbind-std",
			filename: filepath.Join(gnoenv.RootDir(), "gnovm/stdlibs/std/std.gno"),
			source: `
package std

func AssertOriginCall()
func origCaller() string

func testfunc() {
	AssertOriginCall()
	println(origCaller())
}
`,
			expectedOutput: `
// Code generated by github.com/gnolang/gno. DO NOT EDIT.

//line std.gno:1:1
package std

func testfunc() {
	AssertOriginCall(nil)
	println(X_origCaller(nil))
}
`,
		},
	}
	for _, c := range cases {
		c := c // scopelint
		t.Run(c.name, func(t *testing.T) {
			t.Parallel()
			// "\n" is added for better test case readability, now trim it
			source := strings.TrimPrefix(c.source, "\n")

			filename := c.filename
			if filename == "" {
				filename = "foo.gno"
			}
			res, err := Transpile(source, c.tags, filename)

			if c.expectedError != "" {
				require.EqualError(t, err, c.expectedError)
				return
			}
			require.NoError(t, err)
			expectedOutput := strings.TrimPrefix(c.expectedOutput, "\n")
			assert.Equal(t, expectedOutput, res.Translated, "wrong output")
			assert.Equal(t, c.expectedImports, res.Imports, "wrong imports")
		})
	}
}
