// Code generated by the genstd tool (@/misc/genstd); DO NOT EDIT.
// To regenerate it, run `go generate` from this directory.

package stdlibs

import (
	"reflect"

	gno "github.com/gnolang/gno/gnovm/pkg/gnolang"
	testlibs_std "github.com/gnolang/gno/gnovm/tests/stdlibs/std"
	testlibs_testing "github.com/gnolang/gno/gnovm/tests/stdlibs/testing"
	testlibs_unicode "github.com/gnolang/gno/gnovm/tests/stdlibs/unicode"
)

// NativeFunc represents a function in the standard library which has a native
// (go-based) implementation, commonly referred to as a "native binding".
type NativeFunc struct {
	gnoPkg     string
	gnoFunc    gno.Name
	params     []gno.FieldTypeExpr
	results    []gno.FieldTypeExpr
	hasMachine bool
	f          func(m *gno.Machine)
}

// HasMachineParam returns whether the given native binding has a machine parameter.
// This means that the Go version of this function expects a *gno.Machine
// as its first parameter.
func (n *NativeFunc) HasMachineParam() bool {
	return n.hasMachine
}

var nativeFuncs = [...]NativeFunc{
	{
		"std",
		"AssertOriginCall",
		[]gno.FieldTypeExpr{},
		[]gno.FieldTypeExpr{},
		true,
		func(m *gno.Machine) {
			testlibs_std.AssertOriginCall(
				m,
			)
		},
	},
	{
		"std",
		"callerAt",
		[]gno.FieldTypeExpr{
			{Name: gno.N("p0"), Type: gno.X("int")},
		},
		[]gno.FieldTypeExpr{
			{Name: gno.N("r0"), Type: gno.X("string")},
		},
		true,
		func(m *gno.Machine) {
			b := m.LastBlock()
			var (
				p0  int
				rp0 = reflect.ValueOf(&p0).Elem()
			)

			gno.Gno2GoValue(b.GetPointerTo(nil, gno.NewValuePathBlock(1, 0, "")).TV, rp0)

			r0 := testlibs_std.X_callerAt(
				m,
				p0)

			m.PushValue(gno.Go2GnoValue(
				m.Alloc,
				m.Store,
				reflect.ValueOf(&r0).Elem(),
			))
		},
	},
	{
		"std",
		"getRealm",
		[]gno.FieldTypeExpr{
			{Name: gno.N("p0"), Type: gno.X("int")},
		},
		[]gno.FieldTypeExpr{
			{Name: gno.N("r0"), Type: gno.X("string")},
			{Name: gno.N("r1"), Type: gno.X("string")},
		},
		true,
		func(m *gno.Machine) {
			b := m.LastBlock()
			var (
				p0  int
				rp0 = reflect.ValueOf(&p0).Elem()
			)

			gno.Gno2GoValue(b.GetPointerTo(nil, gno.NewValuePathBlock(1, 0, "")).TV, rp0)

			r0, r1 := testlibs_std.X_getRealm(
				m,
				p0)

			m.PushValue(gno.Go2GnoValue(
				m.Alloc,
				m.Store,
				reflect.ValueOf(&r0).Elem(),
			))
			m.PushValue(gno.Go2GnoValue(
				m.Alloc,
				m.Store,
				reflect.ValueOf(&r1).Elem(),
			))
		},
	},
	{
		"std",
		"isRealm",
		[]gno.FieldTypeExpr{
			{Name: gno.N("p0"), Type: gno.X("string")},
		},
		[]gno.FieldTypeExpr{
			{Name: gno.N("r0"), Type: gno.X("bool")},
		},
		true,
		func(m *gno.Machine) {
			b := m.LastBlock()
			var (
				p0  string
				rp0 = reflect.ValueOf(&p0).Elem()
			)

			gno.Gno2GoValue(b.GetPointerTo(nil, gno.NewValuePathBlock(1, 0, "")).TV, rp0)

			r0 := testlibs_std.X_isRealm(
				m,
				p0)

			m.PushValue(gno.Go2GnoValue(
				m.Alloc,
				m.Store,
				reflect.ValueOf(&r0).Elem(),
			))
		},
	},
	{
		"testing",
		"getContext",
		[]gno.FieldTypeExpr{},
		[]gno.FieldTypeExpr{
			{Name: gno.N("r0"), Type: gno.X("string")},
			{Name: gno.N("r1"), Type: gno.X("string")},
			{Name: gno.N("r2"), Type: gno.X("[]string")},
			{Name: gno.N("r3"), Type: gno.X("[]int64")},
			{Name: gno.N("r4"), Type: gno.X("[]string")},
			{Name: gno.N("r5"), Type: gno.X("[]int64")},
			{Name: gno.N("r6"), Type: gno.X("string")},
			{Name: gno.N("r7"), Type: gno.X("int64")},
			{Name: gno.N("r8"), Type: gno.X("int64")},
			{Name: gno.N("r9"), Type: gno.X("int64")},
		},
		true,
		func(m *gno.Machine) {
			r0, r1, r2, r3, r4, r5, r6, r7, r8, r9 := testlibs_testing.X_getContext(
				m,
			)

			m.PushValue(gno.Go2GnoValue(
				m.Alloc,
				m.Store,
				reflect.ValueOf(&r0).Elem(),
			))
			m.PushValue(gno.Go2GnoValue(
				m.Alloc,
				m.Store,
				reflect.ValueOf(&r1).Elem(),
			))
			m.PushValue(gno.Go2GnoValue(
				m.Alloc,
				m.Store,
				reflect.ValueOf(&r2).Elem(),
			))
			m.PushValue(gno.Go2GnoValue(
				m.Alloc,
				m.Store,
				reflect.ValueOf(&r3).Elem(),
			))
			m.PushValue(gno.Go2GnoValue(
				m.Alloc,
				m.Store,
				reflect.ValueOf(&r4).Elem(),
			))
			m.PushValue(gno.Go2GnoValue(
				m.Alloc,
				m.Store,
				reflect.ValueOf(&r5).Elem(),
			))
			m.PushValue(gno.Go2GnoValue(
				m.Alloc,
				m.Store,
				reflect.ValueOf(&r6).Elem(),
			))
			m.PushValue(gno.Go2GnoValue(
				m.Alloc,
				m.Store,
				reflect.ValueOf(&r7).Elem(),
			))
			m.PushValue(gno.Go2GnoValue(
				m.Alloc,
				m.Store,
				reflect.ValueOf(&r8).Elem(),
			))
			m.PushValue(gno.Go2GnoValue(
				m.Alloc,
				m.Store,
				reflect.ValueOf(&r9).Elem(),
			))
		},
	},
	{
		"testing",
		"setContext",
		[]gno.FieldTypeExpr{
			{Name: gno.N("p0"), Type: gno.X("string")},
			{Name: gno.N("p1"), Type: gno.X("string")},
			{Name: gno.N("p2"), Type: gno.X("string")},
			{Name: gno.N("p3"), Type: gno.X("string")},
			{Name: gno.N("p4"), Type: gno.X("[]string")},
			{Name: gno.N("p5"), Type: gno.X("[]int64")},
			{Name: gno.N("p6"), Type: gno.X("[]string")},
			{Name: gno.N("p7"), Type: gno.X("[]int64")},
			{Name: gno.N("p8"), Type: gno.X("string")},
			{Name: gno.N("p9"), Type: gno.X("int64")},
			{Name: gno.N("p10"), Type: gno.X("int64")},
			{Name: gno.N("p11"), Type: gno.X("int64")},
		},
		[]gno.FieldTypeExpr{},
		true,
		func(m *gno.Machine) {
			b := m.LastBlock()
			var (
				p0   string
				rp0  = reflect.ValueOf(&p0).Elem()
				p1   string
				rp1  = reflect.ValueOf(&p1).Elem()
				p2   string
				rp2  = reflect.ValueOf(&p2).Elem()
				p3   string
				rp3  = reflect.ValueOf(&p3).Elem()
				p4   []string
				rp4  = reflect.ValueOf(&p4).Elem()
				p5   []int64
				rp5  = reflect.ValueOf(&p5).Elem()
				p6   []string
				rp6  = reflect.ValueOf(&p6).Elem()
				p7   []int64
				rp7  = reflect.ValueOf(&p7).Elem()
				p8   string
				rp8  = reflect.ValueOf(&p8).Elem()
				p9   int64
				rp9  = reflect.ValueOf(&p9).Elem()
				p10  int64
				rp10 = reflect.ValueOf(&p10).Elem()
				p11  int64
				rp11 = reflect.ValueOf(&p11).Elem()
			)

			gno.Gno2GoValue(b.GetPointerTo(nil, gno.NewValuePathBlock(1, 0, "")).TV, rp0)
			gno.Gno2GoValue(b.GetPointerTo(nil, gno.NewValuePathBlock(1, 1, "")).TV, rp1)
			gno.Gno2GoValue(b.GetPointerTo(nil, gno.NewValuePathBlock(1, 2, "")).TV, rp2)
			gno.Gno2GoValue(b.GetPointerTo(nil, gno.NewValuePathBlock(1, 3, "")).TV, rp3)
			gno.Gno2GoValue(b.GetPointerTo(nil, gno.NewValuePathBlock(1, 4, "")).TV, rp4)
			gno.Gno2GoValue(b.GetPointerTo(nil, gno.NewValuePathBlock(1, 5, "")).TV, rp5)
			gno.Gno2GoValue(b.GetPointerTo(nil, gno.NewValuePathBlock(1, 6, "")).TV, rp6)
			gno.Gno2GoValue(b.GetPointerTo(nil, gno.NewValuePathBlock(1, 7, "")).TV, rp7)
			gno.Gno2GoValue(b.GetPointerTo(nil, gno.NewValuePathBlock(1, 8, "")).TV, rp8)
			gno.Gno2GoValue(b.GetPointerTo(nil, gno.NewValuePathBlock(1, 9, "")).TV, rp9)
			gno.Gno2GoValue(b.GetPointerTo(nil, gno.NewValuePathBlock(1, 10, "")).TV, rp10)
			gno.Gno2GoValue(b.GetPointerTo(nil, gno.NewValuePathBlock(1, 11, "")).TV, rp11)

			testlibs_testing.X_setContext(
				m,
				p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11)
		},
	},
	{
		"testing",
		"testIssueCoins",
		[]gno.FieldTypeExpr{
			{Name: gno.N("p0"), Type: gno.X("string")},
			{Name: gno.N("p1"), Type: gno.X("[]string")},
			{Name: gno.N("p2"), Type: gno.X("[]int64")},
		},
		[]gno.FieldTypeExpr{},
		true,
		func(m *gno.Machine) {
			b := m.LastBlock()
			var (
				p0  string
				rp0 = reflect.ValueOf(&p0).Elem()
				p1  []string
				rp1 = reflect.ValueOf(&p1).Elem()
				p2  []int64
				rp2 = reflect.ValueOf(&p2).Elem()
			)

			gno.Gno2GoValue(b.GetPointerTo(nil, gno.NewValuePathBlock(1, 0, "")).TV, rp0)
			gno.Gno2GoValue(b.GetPointerTo(nil, gno.NewValuePathBlock(1, 1, "")).TV, rp1)
			gno.Gno2GoValue(b.GetPointerTo(nil, gno.NewValuePathBlock(1, 2, "")).TV, rp2)

			testlibs_testing.X_testIssueCoins(
				m,
				p0, p1, p2)
		},
	},
	{
		"testing",
		"unixNano",
		[]gno.FieldTypeExpr{},
		[]gno.FieldTypeExpr{
			{Name: gno.N("r0"), Type: gno.X("int64")},
		},
		false,
		func(m *gno.Machine) {
			r0 := testlibs_testing.X_unixNano()

			m.PushValue(gno.Go2GnoValue(
				m.Alloc,
				m.Store,
				reflect.ValueOf(&r0).Elem(),
			))
		},
	},
	{
		"testing",
		"matchString",
		[]gno.FieldTypeExpr{
			{Name: gno.N("p0"), Type: gno.X("string")},
			{Name: gno.N("p1"), Type: gno.X("string")},
		},
		[]gno.FieldTypeExpr{
			{Name: gno.N("r0"), Type: gno.X("bool")},
			{Name: gno.N("r1"), Type: gno.X("error")},
		},
		false,
		func(m *gno.Machine) {
			b := m.LastBlock()
			var (
				p0  string
				rp0 = reflect.ValueOf(&p0).Elem()
				p1  string
				rp1 = reflect.ValueOf(&p1).Elem()
			)

			gno.Gno2GoValue(b.GetPointerTo(nil, gno.NewValuePathBlock(1, 0, "")).TV, rp0)
			gno.Gno2GoValue(b.GetPointerTo(nil, gno.NewValuePathBlock(1, 1, "")).TV, rp1)

			r0, r1 := testlibs_testing.X_matchString(p0, p1)

			m.PushValue(gno.Go2GnoValue(
				m.Alloc,
				m.Store,
				reflect.ValueOf(&r0).Elem(),
			))
			m.PushValue(gno.Go2GnoValue(
				m.Alloc,
				m.Store,
				reflect.ValueOf(&r1).Elem(),
			))
		},
	},
	{
		"testing",
		"recoverWithStacktrace",
		[]gno.FieldTypeExpr{},
		[]gno.FieldTypeExpr{
			{Name: gno.N("r0"), Type: gno.AnyT()},
			{Name: gno.N("r1"), Type: gno.X("string")},
		},
		true,
		func(m *gno.Machine) {
			r0, r1 := testlibs_testing.X_recoverWithStacktrace(
				m,
			)

			m.PushValue(r0)
			m.PushValue(gno.Go2GnoValue(
				m.Alloc,
				m.Store,
				reflect.ValueOf(&r1).Elem(),
			))
		},
	},
	{
		"unicode",
		"IsPrint",
		[]gno.FieldTypeExpr{
			{Name: gno.N("p0"), Type: gno.X("rune")},
		},
		[]gno.FieldTypeExpr{
			{Name: gno.N("r0"), Type: gno.X("bool")},
		},
		false,
		func(m *gno.Machine) {
			b := m.LastBlock()
			var (
				p0  rune
				rp0 = reflect.ValueOf(&p0).Elem()
			)

			gno.Gno2GoValue(b.GetPointerTo(nil, gno.NewValuePathBlock(1, 0, "")).TV, rp0)

			r0 := testlibs_unicode.IsPrint(p0)

			m.PushValue(gno.Go2GnoValue(
				m.Alloc,
				m.Store,
				reflect.ValueOf(&r0).Elem(),
			))
		},
	},
	{
		"unicode",
		"IsGraphic",
		[]gno.FieldTypeExpr{
			{Name: gno.N("p0"), Type: gno.X("rune")},
		},
		[]gno.FieldTypeExpr{
			{Name: gno.N("r0"), Type: gno.X("bool")},
		},
		false,
		func(m *gno.Machine) {
			b := m.LastBlock()
			var (
				p0  rune
				rp0 = reflect.ValueOf(&p0).Elem()
			)

			gno.Gno2GoValue(b.GetPointerTo(nil, gno.NewValuePathBlock(1, 0, "")).TV, rp0)

			r0 := testlibs_unicode.IsGraphic(p0)

			m.PushValue(gno.Go2GnoValue(
				m.Alloc,
				m.Store,
				reflect.ValueOf(&r0).Elem(),
			))
		},
	},
	{
		"unicode",
		"SimpleFold",
		[]gno.FieldTypeExpr{
			{Name: gno.N("p0"), Type: gno.X("rune")},
		},
		[]gno.FieldTypeExpr{
			{Name: gno.N("r0"), Type: gno.X("rune")},
		},
		false,
		func(m *gno.Machine) {
			b := m.LastBlock()
			var (
				p0  rune
				rp0 = reflect.ValueOf(&p0).Elem()
			)

			gno.Gno2GoValue(b.GetPointerTo(nil, gno.NewValuePathBlock(1, 0, "")).TV, rp0)

			r0 := testlibs_unicode.SimpleFold(p0)

			m.PushValue(gno.Go2GnoValue(
				m.Alloc,
				m.Store,
				reflect.ValueOf(&r0).Elem(),
			))
		},
	},
	{
		"unicode",
		"IsUpper",
		[]gno.FieldTypeExpr{
			{Name: gno.N("p0"), Type: gno.X("rune")},
		},
		[]gno.FieldTypeExpr{
			{Name: gno.N("r0"), Type: gno.X("bool")},
		},
		false,
		func(m *gno.Machine) {
			b := m.LastBlock()
			var (
				p0  rune
				rp0 = reflect.ValueOf(&p0).Elem()
			)

			gno.Gno2GoValue(b.GetPointerTo(nil, gno.NewValuePathBlock(1, 0, "")).TV, rp0)

			r0 := testlibs_unicode.IsUpper(p0)

			m.PushValue(gno.Go2GnoValue(
				m.Alloc,
				m.Store,
				reflect.ValueOf(&r0).Elem(),
			))
		},
	},
}

var initOrder = [...]string{
	"std",
	"testing",
	"unicode",
}

// InitOrder returns the initialization order of the standard libraries.
// This is calculated starting from the list of all standard libraries and
// iterating through each: if a package depends on an unitialized package, that
// is processed first, and so on recursively; matching the behaviour of Go's
// [program initialization].
//
// [program initialization]: https://go.dev/ref/spec#Program_initialization
func InitOrder() []string {
	return initOrder[:]
}
