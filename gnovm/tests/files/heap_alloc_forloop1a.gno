package main

import "fmt"

type Int int

var s1 []*Int

func inc2(j *Int) {
	*j = *j + 2 // Just as an example, increment j by 2.
}

func forLoopRef() {
	defer func() {
		for i, e := range s1 {
			fmt.Printf("s1[%d] is: %d\n", i, *e)
		}
	}()

	for i := Int(0); i < 10; inc2(&i) {
		s1 = append(s1, &i)
	}
}

func main() {
	forLoopRef()
}

// go 1.22 loop var is not supported for now.

// Preprocessed:
// file{ package main; import fmt fmt; type Int (const-type main.Int); var s1<!VPBlock(2,1)> []*(Int<VPBlock(2,0)>); func inc2(j *(Int<VPBlock(2,0)>)) { *(j<VPBlock(1,0)>) = *(j<VPBlock(1,0)>) + (const (2 main.Int)) }; func forLoopRef() { defer func func(){ for i<!VPBlock(1,0)>, e<!VPBlock(1,1)> := range s1<VPBlock(5,1)> { fmt<VPBlock(4,0)>.Printf((const ("s1[%d] is: %d\n" string)), (const-type gonative{interface {}})(i<VPBlock(1,0)>), (const-type gonative{interface {}})(*(e<VPBlock(1,1)>))) } }(); for i<!~VPBlock(1,0)> := (const (0 main.Int)); i<~VPBlock(1,0)> < (const (10 main.Int)); inc2<VPBlock(4,2)>(&(i<~VPBlock(1,0)>)) { s1<VPBlock(4,1)> = (const (append func(x []*main.Int,args ...*main.Int)(res []*main.Int)))(s1<VPBlock(4,1)>, &(i<~VPBlock(1,0)>)) } }; func main() { forLoopRef<VPBlock(3,3)>() } }

// Output:
// s1[0] is: 10
// s1[1] is: 10
// s1[2] is: 10
// s1[3] is: 10
// s1[4] is: 10
