# Run gno transpile with an individual file.

# Running transpile on the current directory should only precompile
# main.gno.
gno transpile -v .

! stdout .+
stderr ^\.$

exists main.gno.gen.go
! exists .hello_test.gno.gen_test.go
rm main.gno.gen.go

# Running it using individual filenames should precompile hello_test.gno, as well.
gno transpile -v main.gno hello_test.gno

! stdout .+
cmp stderr transpile-files-stderr.golden

cmp main.gno.gen.go main.gno.gen.go.golden
cmp .hello_test.gno.gen_test.go .hello_test.gno.gen_test.go.golden

-- transpile-files-stderr.golden --
main.gno
hello_test.gno
-- main.gno --
package main

func main() {
	println("hello")
}

-- hello_test.gno --
package main

import "std"

func hello() {
	std.AssertOriginCall()
}

-- main.gno.gen.go.golden --
// Code generated by github.com/gnolang/gno. DO NOT EDIT.

//go:build gno

//line main.gno:1:1
package main

func main() {
	println("hello")
}
-- .hello_test.gno.gen_test.go.golden --
// Code generated by github.com/gnolang/gno. DO NOT EDIT.

//go:build gno && test

//line hello_test.gno:1:1
package main

import "github.com/gnolang/gno/gnovm/stdlibs/std"

func hello() {
	std.AssertOriginCall(nil)
}
