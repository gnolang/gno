// This file is autogenerated from the genstd tool (@/misc/genstd); do not edit.
// To regenerate it, run `go generate` from this directory.

package stdlibs

import (
	"reflect"

	gno "github.com/gnolang/gno/gnovm/pkg/gnolang"
	repo_misc_genstd_testdata_integration_bytes "github.com/gnolang/gno/misc/genstd/testdata/integration/bytes"
	vm_pkg_gnolang "github.com/gnolang/gno/gnovm/pkg/gnolang"
)

// NativeFunc represents a function in the standard library which has a native
// (go-based) implementation, commonly referred to as a "native binding".
type NativeFunc struct {
	gnoPkg     string
	gnoFunc    gno.Name
	params     []gno.FieldTypeExpr
	results    []gno.FieldTypeExpr
	hasMachine bool
	f          func(m *gno.Machine)
}

// HasMachineParam returns whether the given native binding has a machine parameter.
// This means that the Go version of this function expects a *gno.Machine
// as its first parameter.
func (n *NativeFunc) HasMachineParam() bool {
	return n.hasMachine
}

var nativeFuncs = [...]NativeFunc{
	{
		"bytes",
		"myNative",
		[]gno.FieldTypeExpr{
		},
		[]gno.FieldTypeExpr{
			{Name: gno.N("r0"), Type: gno.X("int")},
		},
		true,
		func(m *gno.Machine) {
			

			r0 := repo_misc_genstd_testdata_integration_bytes.X_myNative(
					m,
				)

			
					m.PushValue(r0)
		},
	},
}

var initOrder = [...]string{
	"io",
	"bytes",
}

// InitOrder returns the initialization order of the standard libraries.
// This is calculated starting from the list of all standard libraries and
// iterating through each: if a package depends on an unitialized package, that
// is processed first, and so on recursively; matching the behaviour of Go's
// [program initialization].
//
// [program initialization]: https://go.dev/ref/spec#Program_initialization
func InitOrder() []string {
	return initOrder[:]
}
