// This file is autogenerated from the genstd tool (@/misc/genstd); do not edit.
// To regenerate it, run `go generate` from this directory.

package stdlibs

import (
	"reflect"

	gno "github.com/gnolang/gno/gnovm/pkg/gnolang"
{{- range .Imports }}
	{{ .Name }} {{ printf "%q" .Path }}
{{- end }}
)

type nativeFunc struct {
        gnoPkg  string
        gnoFunc gno.Name
        params  []gno.FieldTypeExpr
        results []gno.FieldTypeExpr
        f       func(m *gno.Machine)
}

var nativeFuncs = [...]nativeFunc{
{{- range $i, $m := .Mappings }}
	{
		{{ printf "%q" $m.GnoImportPath }},
		{{ printf "%q" $m.GnoFunc }},
		{{- /* TODO: set nil if empty */}}
		[]gno.FieldTypeExpr{
		{{- range $i, $p := $m.Params }}
			{Name: gno.N("p{{ $i }}"), Type: gno.X({{ printf "%q" $p.GnoType }})},
		{{- end }}
		},
		[]gno.FieldTypeExpr{
		{{- range $i, $r := $m.Results }}
			{Name: gno.N("r{{ $i }}"), Type: gno.X({{ printf "%q" $r.GnoType }})},
		{{- end }}
		},
		func(m *gno.Machine) {
			{{ if $m.Params -}}
				b := m.LastBlock()
				var (
				{{- range $pn, $pv := $m.Params -}}
					{{- if $pv.IsTypedValue }}
						p{{ $pn }} = gno.NewValuePathBlock(1, {{ $pn }}, "")).TV
					{{- else }}
						p{{ $pn }} {{ $pv.GoQualifiedName }}
						rp{{ $pn }} = reflect.ValueOf(&p{{ $pn }}).Elem()
					{{- end }}
				{{- end }}
				)

				{{ range $pn, $pv := $m.Params -}}
					{{- if not $pv.IsTypedValue }}
						gno.Gno2GoValue(b.GetPointerTo(nil, gno.NewValuePathBlock(1, {{ $pn }}, "")).TV, rp{{ $pn }})
					{{- end -}}
				{{ end }}
			{{- end }}

			{{ range $rn, $rv := $m.Results -}}
				{{- if gt $rn 0 -}}, {{ end -}}
				r{{ $rn }}
			{{- end -}}
			{{- if $m.Results }} := {{ end -}}
			{{ $.PkgName $m.GoImportPath }}.{{ $m.GoFunc }}(
				{{- if $m.MachineParam }}
					m,
				{{ end -}}
				{{- range $pn, $pv := $m.Params -}}
					p{{ $pn }},
				{{- end -}}
			)

			{{ range $rn, $rv := $m.Results -}}
				{{- if $rv.IsTypedValue }}
					m.PushValue(r{{ $rn }})
				{{- else }}
					m.PushValue(gno.Go2GnoValue(
						m.Alloc,
						m.Store,
						reflect.ValueOf(&r{{ $rn }}).Elem(), {{- /* necessary to support interfaces (ie. error) */}}
					))
				{{- end }}
			{{- end }}
		},
	},
{{- end }}
}
