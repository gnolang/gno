name: "staging-gno-land"
services:
  traefik:
    image: "traefik:v2.11"
    restart: unless-stopped
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.rpc.address=:26657"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--entryPoints.web.forwardedHeaders.insecure"
      - "--entrypoints.traefik.address=:8080"
      - "--entrypoints.websecure.address=:443"

      - "--certificatesresolvers.le.acme.tlschallenge=true"
      - "--certificatesresolvers.le.acme.email=dev@gno.land"
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "26657:26657"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ./letsencrypt:/letsencrypt

  gnoland:
    image: ghcr.io/gnolang/gno/gnoland:master
    restart: unless-stopped
    entrypoint: /entrypoint.sh
    working_dir: /gnoroot
    environment:
      CHAIN_ID: staging
      MONIKER: gno-staging
    volumes:
      - ./gnoland.entrypoint.sh:/entrypoint.sh
    #ports:
    #  - 26656:26656
    labels:
      com.centurylinklabs.watchtower.enable: "true"
      traefik.enable: "true"
      traefik.http.routers.gnoland.entrypoints: "web,websecure"
      traefik.http.routers.gnoland.rule: "Host(`rpc.staging.gno.land`)"
      traefik.http.routers.gnoland.service: gnoland-rpc
      traefik.http.routers.gnoland.tls: "true"
      traefik.http.routers.gnoland.tls.certresolver: "le"
      traefik.http.routers.gnoland-rpc.entrypoints: "rpc"
      traefik.http.routers.gnoland-rpc.rule: "PathPrefix(`/`)"
      traefik.http.routers.gnoland-rpc.service: gnoland-rpc
      traefik.http.services.gnoland-rpc.loadbalancer.server.port: 26657

  gnoweb:
    image: ghcr.io/gnolang/gno/gnoweb:master
    restart: unless-stopped
    env_file: ".env"
    entrypoint:
      - gnoweb
      - --bind=0.0.0.0:8888
      - --remote=http://traefik:26657
      - --faucet-url=https://faucet-api.staging.gno.land
      - --captcha-site=$CAPTCHA_SITE_KEY
      - --with-analytics
      - --help-chainid=staging
      - --help-remote=https://rpc.staging.gno.land:443
    labels:
      com.centurylinklabs.watchtower.enable: "true"
      traefik.enable: "true"
      traefik.http.routers.gnoweb.entrypoints: "web,websecure"
      traefik.http.routers.gnoweb.rule: "Host(`staging.gno.land`)"
      traefik.http.routers.gnoweb.tls: "true"
      traefik.http.routers.gnoweb.tls.certresolver: "le"

  gnofaucet:
    image: ghcr.io/gnolang/gno/gnofaucet-slim
    restart: unless-stopped
    command:
      - "serve"
      - "--listen-address=0.0.0.0:5050"
      - "--chain-id=staging"
      - "--is-behind-proxy=true"
      - "--mnemonic=${FAUCET_MNEMONIC}"
      - "--num-accounts=1"
      - "--remote=http://traefik:26657"
      - "--captcha-secret=${CAPTCHA_SECRET_KEY}"
    env_file: ".env"
    # environment:
    # from .env
    # - RECAPTCHA_SECRET_KEY
    labels:
      com.centurylinklabs.watchtower.enable: "true"
      traefik.enable: "true"
      traefik.http.routers.gnofaucet-api.entrypoints: "websecure"
      traefik.http.routers.gnofaucet-api.rule: "Host(`faucet-api.staging.gno.land`) || Host(`faucet-api.staging.gnoteam.com`)"
      traefik.http.routers.gnofaucet-api.tls: "true"
      traefik.http.routers.gnofaucet-api.tls.certresolver: "le"
      traefik.http.middlewares.gnofaucet-ratelimit.ratelimit.average: "6"
      traefik.http.middlewares.gnofaucet-ratelimit.ratelimit.period: "1m"

  watchtower:
    image: containrrr/watchtower
    restart: unless-stopped
    command: --interval 30 --http-api-metrics --label-enable
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      WATCHTOWER_HTTP_API_TOKEN: "mytoken"

  restarter:
    image: docker:cli
    restart: unless-stopped
    entrypoint: [ "/bin/sh", "-c" ]
    working_dir: "/app"
    volumes:
      - ".:/app"
      - "/var/run/docker.sock:/var/run/docker.sock"
    command:
      - |
        while true; do
          if [ "$$(date +'%H:%M')" = '22:00' ]; then
            docker compose restart gnoland
          fi
          sleep 60
        done
