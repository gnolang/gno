package commondao

import (
	"std"

	"gno.land/p/demo/avl"
	"gno.land/p/demo/seqid"
	"gno.land/p/moul/txlink"
	"gno.land/p/nt/commondao"
)

// CommonDAOID is the ID of the realm's DAO.
const CommonDAOID uint64 = 1

var (
	daoID     seqid.ID
	realmLink txlink.Realm
	daos      = avl.NewTree() // string(ID) -> *commondao.CommonDAO
	ownership = avl.NewTree() // string(std.Address) -> []uint64(DAO ID)
	invites   = avl.NewTree() // string(std.Address) -> std.Address(inviter)
	trees     = avl.NewTree() // string(root ID) -> avl.Tree(string(DAO ID) -> *commondao.CommonDAO)
	options   = avl.NewTree() // string(root ID) -> *Options
)

func init() {
	// Save current realm path so it's available during render calls
	realmLink = txlink.Realm(std.CurrentRealm().PkgPath())
}

func getDAO(daoID uint64) *commondao.CommonDAO {
	key := makeIDKey(daoID)
	if v, found := daos.Get(key); found {
		return v.(*commondao.CommonDAO)
	}
	return nil
}

func mustGetDAO(daoID uint64) *commondao.CommonDAO {
	dao := getDAO(daoID)
	if dao == nil {
		panic("DAO not found")
	}
	return dao
}

func getTree(rootID uint64) *avl.Tree {
	key := makeIDKey(rootID)
	if v, found := trees.Get(key); found {
		return v.(*avl.Tree)
	}
	return nil
}

func getOwnership(addr std.Address) []uint64 {
	if v, ok := ownership.Get(addr.String()); ok {
		return v.([]uint64)
	}
	return nil
}

func getOptions(daoID uint64) *Options {
	key := makeIDKey(daoID)
	if v, found := options.Get(key); found {
		return v.(*Options)
	}
	return nil
}

func makeIDKey(daoID uint64) string {
	return seqid.ID(daoID).String()
}

func createDAO(name string, owner std.Address) *commondao.CommonDAO {
	id := daoID.Next()
	dao := commondao.New(
		commondao.WithID(uint64(id)),
		commondao.WithName(name),
	)
	ids := append(getOwnership(owner), uint64(id))
	daoOptions := defaultOptions

	ownership.Set(owner.String(), ids)
	daos.Set(id.String(), dao)
	options.Set(id.String(), &daoOptions)
	return dao
}

func createSubDAO(parent *commondao.CommonDAO, name string) *commondao.CommonDAO {
	id := daoID.Next()
	dao := commondao.New(
		commondao.WithID(uint64(id)),
		commondao.WithParent(parent),
		commondao.WithName(name),
	)

	daoOptions := defaultOptions
	options.Set(id.String(), &daoOptions)

	daos.Set(id.String(), dao)

	rootID := parent.TopParent().ID()
	tree := getTree(rootID)
	if tree == nil {
		tree = avl.NewTree()
		trees.Set(makeIDKey(rootID), tree)
	}

	tree.Set(id.String(), dao)
	return dao
}
