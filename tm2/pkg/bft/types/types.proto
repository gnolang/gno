syntax = "proto3";
package tm;

option go_package = "github.com/gnolang/gno/tm2/pkg/bft/types/pb";

// imports
import "github.com/gnolang/gno/tm2/pkg/bft/abci/types/abci.proto";
import "github.com/gnolang/gno/tm2/pkg/crypto/merkle/merkle.proto";
import "github.com/gnolang/gno/tm2/pkg/bitarray/bitarray.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

// messages
message Proposal {
	uint32 Type = 1;
	sint64 Height = 2;
	sint64 Round = 3;
	sint64 POLRound = 4;
	BlockID BlockID = 5;
	google.protobuf.Timestamp Timestamp = 6;
	bytes Signature = 7;
}

message Block {
	Header Header = 1;
	Data Data = 2;
	Commit LastCommit = 3;
}

message Header {
	string Version = 1;
	string ChainID = 2;
	sint64 Height = 3;
	google.protobuf.Timestamp Time = 4;
	sint64 NumTxs = 5;
	sint64 TotalTxs = 6;
	string AppVersion = 7;
	BlockID LastBlockID = 8;
	bytes LastCommitHash = 9;
	bytes DataHash = 10;
	bytes ValidatorsHash = 11;
	bytes NextValidatorsHash = 12;
	bytes ConsensusHash = 13;
	bytes AppHash = 14;
	bytes LastResultsHash = 15;
	string ProposerAddress = 16;
}

message Data {
	repeated bytes Txs = 1;
}

message Commit {
	BlockID BlockID = 1;
	repeated CommitSig Precommits = 2;
}

message BlockID {
	bytes Hash = 1;
	PartSetHeader PartsHeader = 2;
}

message CommitSig {
	uint32 Type = 1;
	sint64 Height = 2;
	sint64 Round = 3;
	BlockID BlockID = 4;
	google.protobuf.Timestamp Timestamp = 5;
	string ValidatorAddress = 6;
	sint64 ValidatorIndex = 7;
	bytes Signature = 8;
}

message Vote {
	uint32 Type = 1;
	sint64 Height = 2;
	sint64 Round = 3;
	BlockID BlockID = 4;
	google.protobuf.Timestamp Timestamp = 5;
	string ValidatorAddress = 6;
	sint64 ValidatorIndex = 7;
	bytes Signature = 8;
}

message Part {
	sint64 Index = 1;
	bytes Bytes = 2;
	SimpleProof Proof = 3;
}

message PartSet {
}

message PartSetHeader {
	sint64 Total = 1;
	bytes Hash = 2;
}

message Validator {
	string Address = 1;
	google.protobuf.Any PubKey = 2;
	sint64 VotingPower = 3;
	sint64 ProposerPriority = 4;
}

message ValidatorSet {
	repeated Validator Validators = 1;
	Validator Proposer = 2;
}

message EventNewBlock {
	Block Block = 1;
	abci.ResponseBeginBlock ResultBeginBlock = 2;
	abci.ResponseEndBlock ResultEndBlock = 3;
}

message EventNewBlockHeader {
	Header Header = 1;
	abci.ResponseBeginBlock ResultBeginBlock = 2;
	abci.ResponseEndBlock ResultEndBlock = 3;
}

message EventTx {
	TxResult Result = 1;
}

message EventVote {
	Vote Vote = 1;
}

message EventString {
	string Value = 1;
}

message EventValidatorSetUpdates {
	repeated abci.ValidatorUpdate ValidatorUpdates = 1;
}

message DuplicateVoteEvidence {
	google.protobuf.Any PubKey = 1;
	Vote VoteA = 2;
	Vote VoteB = 3;
}

message MockGoodEvidence {
	sint64 Height = 1;
	string Address = 2;
}

message MockRandomGoodEvidence {
	MockGoodEvidence MockGoodEvidence = 1;
}

message MockBadEvidence {
	MockGoodEvidence MockGoodEvidence = 1;
}

message TxResult {
	sint64 Height = 1;
	uint32 Index = 2;
	bytes Tx = 3;
	abci.ResponseDeliverTx Response = 4;
}

message MockAppState {
	string AccountOwner = 1;
}

message VoteSet {
}

message TYPES_BytesList {
	repeated bytes Value = 1;
}