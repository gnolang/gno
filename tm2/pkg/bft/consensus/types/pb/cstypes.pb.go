// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: cstypes.proto

package pb

import (
	_ "github.com/gnolang/gno/tm2/pkg/bft/abci/types/pb"
	pb "github.com/gnolang/gno/tm2/pkg/bft/types/pb"
	pb1 "github.com/gnolang/gno/tm2/pkg/bitarray/pb"
	_ "github.com/gnolang/gno/tm2/pkg/crypto/merkle/pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// messages
type RoundState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height                    int64                  `protobuf:"zigzag64,1,opt,name=Height,proto3" json:"Height,omitempty"`
	Round                     int64                  `protobuf:"zigzag64,2,opt,name=Round,proto3" json:"Round,omitempty"`
	Step                      uint32                 `protobuf:"varint,3,opt,name=Step,proto3" json:"Step,omitempty"`
	StartTime                 *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	CommitTime                *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=CommitTime,proto3" json:"CommitTime,omitempty"`
	Validators                *pb.ValidatorSet       `protobuf:"bytes,6,opt,name=Validators,proto3" json:"Validators,omitempty"`
	Proposal                  *pb.Proposal           `protobuf:"bytes,7,opt,name=Proposal,proto3" json:"Proposal,omitempty"`
	ProposalBlock             *pb.Block              `protobuf:"bytes,8,opt,name=ProposalBlock,proto3" json:"ProposalBlock,omitempty"`
	ProposalBlockParts        *pb.PartSet            `protobuf:"bytes,9,opt,name=ProposalBlockParts,proto3" json:"ProposalBlockParts,omitempty"`
	LockedRound               int64                  `protobuf:"zigzag64,10,opt,name=LockedRound,proto3" json:"LockedRound,omitempty"`
	LockedBlock               *pb.Block              `protobuf:"bytes,11,opt,name=LockedBlock,proto3" json:"LockedBlock,omitempty"`
	LockedBlockParts          *pb.PartSet            `protobuf:"bytes,12,opt,name=LockedBlockParts,proto3" json:"LockedBlockParts,omitempty"`
	ValidRound                int64                  `protobuf:"zigzag64,13,opt,name=ValidRound,proto3" json:"ValidRound,omitempty"`
	ValidBlock                *pb.Block              `protobuf:"bytes,14,opt,name=ValidBlock,proto3" json:"ValidBlock,omitempty"`
	ValidBlockParts           *pb.PartSet            `protobuf:"bytes,15,opt,name=ValidBlockParts,proto3" json:"ValidBlockParts,omitempty"`
	Votes                     *HeightVoteSet         `protobuf:"bytes,16,opt,name=Votes,proto3" json:"Votes,omitempty"`
	CommitRound               int64                  `protobuf:"zigzag64,17,opt,name=CommitRound,proto3" json:"CommitRound,omitempty"`
	LastCommit                *pb.VoteSet            `protobuf:"bytes,18,opt,name=LastCommit,proto3" json:"LastCommit,omitempty"`
	LastValidators            *pb.ValidatorSet       `protobuf:"bytes,19,opt,name=LastValidators,proto3" json:"LastValidators,omitempty"`
	TriggeredTimeoutPrecommit bool                   `protobuf:"varint,20,opt,name=TriggeredTimeoutPrecommit,proto3" json:"TriggeredTimeoutPrecommit,omitempty"`
}

func (x *RoundState) Reset() {
	*x = RoundState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cstypes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundState) ProtoMessage() {}

func (x *RoundState) ProtoReflect() protoreflect.Message {
	mi := &file_cstypes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundState.ProtoReflect.Descriptor instead.
func (*RoundState) Descriptor() ([]byte, []int) {
	return file_cstypes_proto_rawDescGZIP(), []int{0}
}

func (x *RoundState) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *RoundState) GetRound() int64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *RoundState) GetStep() uint32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *RoundState) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *RoundState) GetCommitTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CommitTime
	}
	return nil
}

func (x *RoundState) GetValidators() *pb.ValidatorSet {
	if x != nil {
		return x.Validators
	}
	return nil
}

func (x *RoundState) GetProposal() *pb.Proposal {
	if x != nil {
		return x.Proposal
	}
	return nil
}

func (x *RoundState) GetProposalBlock() *pb.Block {
	if x != nil {
		return x.ProposalBlock
	}
	return nil
}

func (x *RoundState) GetProposalBlockParts() *pb.PartSet {
	if x != nil {
		return x.ProposalBlockParts
	}
	return nil
}

func (x *RoundState) GetLockedRound() int64 {
	if x != nil {
		return x.LockedRound
	}
	return 0
}

func (x *RoundState) GetLockedBlock() *pb.Block {
	if x != nil {
		return x.LockedBlock
	}
	return nil
}

func (x *RoundState) GetLockedBlockParts() *pb.PartSet {
	if x != nil {
		return x.LockedBlockParts
	}
	return nil
}

func (x *RoundState) GetValidRound() int64 {
	if x != nil {
		return x.ValidRound
	}
	return 0
}

func (x *RoundState) GetValidBlock() *pb.Block {
	if x != nil {
		return x.ValidBlock
	}
	return nil
}

func (x *RoundState) GetValidBlockParts() *pb.PartSet {
	if x != nil {
		return x.ValidBlockParts
	}
	return nil
}

func (x *RoundState) GetVotes() *HeightVoteSet {
	if x != nil {
		return x.Votes
	}
	return nil
}

func (x *RoundState) GetCommitRound() int64 {
	if x != nil {
		return x.CommitRound
	}
	return 0
}

func (x *RoundState) GetLastCommit() *pb.VoteSet {
	if x != nil {
		return x.LastCommit
	}
	return nil
}

func (x *RoundState) GetLastValidators() *pb.ValidatorSet {
	if x != nil {
		return x.LastValidators
	}
	return nil
}

func (x *RoundState) GetTriggeredTimeoutPrecommit() bool {
	if x != nil {
		return x.TriggeredTimeoutPrecommit
	}
	return false
}

type HRS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height int64  `protobuf:"zigzag64,1,opt,name=Height,proto3" json:"Height,omitempty"`
	Round  int64  `protobuf:"zigzag64,2,opt,name=Round,proto3" json:"Round,omitempty"`
	Step   uint32 `protobuf:"varint,3,opt,name=Step,proto3" json:"Step,omitempty"`
}

func (x *HRS) Reset() {
	*x = HRS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cstypes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HRS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HRS) ProtoMessage() {}

func (x *HRS) ProtoReflect() protoreflect.Message {
	mi := &file_cstypes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HRS.ProtoReflect.Descriptor instead.
func (*HRS) Descriptor() ([]byte, []int) {
	return file_cstypes_proto_rawDescGZIP(), []int{1}
}

func (x *HRS) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *HRS) GetRound() int64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *HRS) GetStep() uint32 {
	if x != nil {
		return x.Step
	}
	return 0
}

type RoundStateSimple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeightRoundStep   string                 `protobuf:"bytes,1,opt,name=HeightRoundStep,proto3" json:"HeightRoundStep,omitempty"`
	StartTime         *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	ProposalBlockHash []byte                 `protobuf:"bytes,3,opt,name=ProposalBlockHash,proto3" json:"ProposalBlockHash,omitempty"`
	LockedBlockHash   []byte                 `protobuf:"bytes,4,opt,name=LockedBlockHash,proto3" json:"LockedBlockHash,omitempty"`
	ValidBlockHash    []byte                 `protobuf:"bytes,5,opt,name=ValidBlockHash,proto3" json:"ValidBlockHash,omitempty"`
	Votes             *HeightVoteSet         `protobuf:"bytes,6,opt,name=Votes,proto3" json:"Votes,omitempty"`
}

func (x *RoundStateSimple) Reset() {
	*x = RoundStateSimple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cstypes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundStateSimple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundStateSimple) ProtoMessage() {}

func (x *RoundStateSimple) ProtoReflect() protoreflect.Message {
	mi := &file_cstypes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundStateSimple.ProtoReflect.Descriptor instead.
func (*RoundStateSimple) Descriptor() ([]byte, []int) {
	return file_cstypes_proto_rawDescGZIP(), []int{2}
}

func (x *RoundStateSimple) GetHeightRoundStep() string {
	if x != nil {
		return x.HeightRoundStep
	}
	return ""
}

func (x *RoundStateSimple) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *RoundStateSimple) GetProposalBlockHash() []byte {
	if x != nil {
		return x.ProposalBlockHash
	}
	return nil
}

func (x *RoundStateSimple) GetLockedBlockHash() []byte {
	if x != nil {
		return x.LockedBlockHash
	}
	return nil
}

func (x *RoundStateSimple) GetValidBlockHash() []byte {
	if x != nil {
		return x.ValidBlockHash
	}
	return nil
}

func (x *RoundStateSimple) GetVotes() *HeightVoteSet {
	if x != nil {
		return x.Votes
	}
	return nil
}

type PeerRoundState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height                   int64                  `protobuf:"zigzag64,1,opt,name=Height,proto3" json:"Height,omitempty"`
	Round                    int64                  `protobuf:"zigzag64,2,opt,name=Round,proto3" json:"Round,omitempty"`
	Step                     uint32                 `protobuf:"varint,3,opt,name=Step,proto3" json:"Step,omitempty"`
	StartTime                *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	Proposal                 bool                   `protobuf:"varint,5,opt,name=Proposal,proto3" json:"Proposal,omitempty"`
	ProposalBlockPartsHeader *pb.PartSetHeader      `protobuf:"bytes,6,opt,name=ProposalBlockPartsHeader,proto3" json:"ProposalBlockPartsHeader,omitempty"`
	ProposalBlockParts       *pb1.BitArray          `protobuf:"bytes,7,opt,name=ProposalBlockParts,proto3" json:"ProposalBlockParts,omitempty"`
	ProposalPOLRound         int64                  `protobuf:"zigzag64,8,opt,name=ProposalPOLRound,proto3" json:"ProposalPOLRound,omitempty"`
	ProposalPOL              *pb1.BitArray          `protobuf:"bytes,9,opt,name=ProposalPOL,proto3" json:"ProposalPOL,omitempty"`
	Prevotes                 *pb1.BitArray          `protobuf:"bytes,10,opt,name=Prevotes,proto3" json:"Prevotes,omitempty"`
	Precommits               *pb1.BitArray          `protobuf:"bytes,11,opt,name=Precommits,proto3" json:"Precommits,omitempty"`
	LastCommitRound          int64                  `protobuf:"zigzag64,12,opt,name=LastCommitRound,proto3" json:"LastCommitRound,omitempty"`
	LastCommit               *pb1.BitArray          `protobuf:"bytes,13,opt,name=LastCommit,proto3" json:"LastCommit,omitempty"`
	CatchupCommitRound       int64                  `protobuf:"zigzag64,14,opt,name=CatchupCommitRound,proto3" json:"CatchupCommitRound,omitempty"`
	CatchupCommit            *pb1.BitArray          `protobuf:"bytes,15,opt,name=CatchupCommit,proto3" json:"CatchupCommit,omitempty"`
}

func (x *PeerRoundState) Reset() {
	*x = PeerRoundState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cstypes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerRoundState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerRoundState) ProtoMessage() {}

func (x *PeerRoundState) ProtoReflect() protoreflect.Message {
	mi := &file_cstypes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerRoundState.ProtoReflect.Descriptor instead.
func (*PeerRoundState) Descriptor() ([]byte, []int) {
	return file_cstypes_proto_rawDescGZIP(), []int{3}
}

func (x *PeerRoundState) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *PeerRoundState) GetRound() int64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *PeerRoundState) GetStep() uint32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *PeerRoundState) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *PeerRoundState) GetProposal() bool {
	if x != nil {
		return x.Proposal
	}
	return false
}

func (x *PeerRoundState) GetProposalBlockPartsHeader() *pb.PartSetHeader {
	if x != nil {
		return x.ProposalBlockPartsHeader
	}
	return nil
}

func (x *PeerRoundState) GetProposalBlockParts() *pb1.BitArray {
	if x != nil {
		return x.ProposalBlockParts
	}
	return nil
}

func (x *PeerRoundState) GetProposalPOLRound() int64 {
	if x != nil {
		return x.ProposalPOLRound
	}
	return 0
}

func (x *PeerRoundState) GetProposalPOL() *pb1.BitArray {
	if x != nil {
		return x.ProposalPOL
	}
	return nil
}

func (x *PeerRoundState) GetPrevotes() *pb1.BitArray {
	if x != nil {
		return x.Prevotes
	}
	return nil
}

func (x *PeerRoundState) GetPrecommits() *pb1.BitArray {
	if x != nil {
		return x.Precommits
	}
	return nil
}

func (x *PeerRoundState) GetLastCommitRound() int64 {
	if x != nil {
		return x.LastCommitRound
	}
	return 0
}

func (x *PeerRoundState) GetLastCommit() *pb1.BitArray {
	if x != nil {
		return x.LastCommit
	}
	return nil
}

func (x *PeerRoundState) GetCatchupCommitRound() int64 {
	if x != nil {
		return x.CatchupCommitRound
	}
	return 0
}

func (x *PeerRoundState) GetCatchupCommit() *pb1.BitArray {
	if x != nil {
		return x.CatchupCommit
	}
	return nil
}

type HeightVoteSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HeightVoteSet) Reset() {
	*x = HeightVoteSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cstypes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeightVoteSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeightVoteSet) ProtoMessage() {}

func (x *HeightVoteSet) ProtoReflect() protoreflect.Message {
	mi := &file_cstypes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeightVoteSet.ProtoReflect.Descriptor instead.
func (*HeightVoteSet) Descriptor() ([]byte, []int) {
	return file_cstypes_proto_rawDescGZIP(), []int{4}
}

type EventNewRoundStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HRS                   *HRS  `protobuf:"bytes,1,opt,name=HRS,proto3" json:"HRS,omitempty"`
	SecondsSinceStartTime int64 `protobuf:"zigzag64,2,opt,name=SecondsSinceStartTime,proto3" json:"SecondsSinceStartTime,omitempty"`
	LastCommitRound       int64 `protobuf:"zigzag64,3,opt,name=LastCommitRound,proto3" json:"LastCommitRound,omitempty"`
}

func (x *EventNewRoundStep) Reset() {
	*x = EventNewRoundStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cstypes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventNewRoundStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventNewRoundStep) ProtoMessage() {}

func (x *EventNewRoundStep) ProtoReflect() protoreflect.Message {
	mi := &file_cstypes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventNewRoundStep.ProtoReflect.Descriptor instead.
func (*EventNewRoundStep) Descriptor() ([]byte, []int) {
	return file_cstypes_proto_rawDescGZIP(), []int{5}
}

func (x *EventNewRoundStep) GetHRS() *HRS {
	if x != nil {
		return x.HRS
	}
	return nil
}

func (x *EventNewRoundStep) GetSecondsSinceStartTime() int64 {
	if x != nil {
		return x.SecondsSinceStartTime
	}
	return 0
}

func (x *EventNewRoundStep) GetLastCommitRound() int64 {
	if x != nil {
		return x.LastCommitRound
	}
	return 0
}

type EventNewValidBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HRS              *HRS              `protobuf:"bytes,1,opt,name=HRS,proto3" json:"HRS,omitempty"`
	BlockPartsHeader *pb.PartSetHeader `protobuf:"bytes,2,opt,name=BlockPartsHeader,proto3" json:"BlockPartsHeader,omitempty"`
	BlockParts       *pb1.BitArray     `protobuf:"bytes,3,opt,name=BlockParts,proto3" json:"BlockParts,omitempty"`
	IsCommit         bool              `protobuf:"varint,4,opt,name=IsCommit,proto3" json:"IsCommit,omitempty"`
}

func (x *EventNewValidBlock) Reset() {
	*x = EventNewValidBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cstypes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventNewValidBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventNewValidBlock) ProtoMessage() {}

func (x *EventNewValidBlock) ProtoReflect() protoreflect.Message {
	mi := &file_cstypes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventNewValidBlock.ProtoReflect.Descriptor instead.
func (*EventNewValidBlock) Descriptor() ([]byte, []int) {
	return file_cstypes_proto_rawDescGZIP(), []int{6}
}

func (x *EventNewValidBlock) GetHRS() *HRS {
	if x != nil {
		return x.HRS
	}
	return nil
}

func (x *EventNewValidBlock) GetBlockPartsHeader() *pb.PartSetHeader {
	if x != nil {
		return x.BlockPartsHeader
	}
	return nil
}

func (x *EventNewValidBlock) GetBlockParts() *pb1.BitArray {
	if x != nil {
		return x.BlockParts
	}
	return nil
}

func (x *EventNewValidBlock) GetIsCommit() bool {
	if x != nil {
		return x.IsCommit
	}
	return false
}

type EventNewRound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HRS           *HRS          `protobuf:"bytes,1,opt,name=HRS,proto3" json:"HRS,omitempty"`
	Proposer      *pb.Validator `protobuf:"bytes,2,opt,name=Proposer,proto3" json:"Proposer,omitempty"`
	ProposerIndex int64         `protobuf:"zigzag64,3,opt,name=ProposerIndex,proto3" json:"ProposerIndex,omitempty"`
}

func (x *EventNewRound) Reset() {
	*x = EventNewRound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cstypes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventNewRound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventNewRound) ProtoMessage() {}

func (x *EventNewRound) ProtoReflect() protoreflect.Message {
	mi := &file_cstypes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventNewRound.ProtoReflect.Descriptor instead.
func (*EventNewRound) Descriptor() ([]byte, []int) {
	return file_cstypes_proto_rawDescGZIP(), []int{7}
}

func (x *EventNewRound) GetHRS() *HRS {
	if x != nil {
		return x.HRS
	}
	return nil
}

func (x *EventNewRound) GetProposer() *pb.Validator {
	if x != nil {
		return x.Proposer
	}
	return nil
}

func (x *EventNewRound) GetProposerIndex() int64 {
	if x != nil {
		return x.ProposerIndex
	}
	return 0
}

type EventCompleteProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HRS     *HRS        `protobuf:"bytes,1,opt,name=HRS,proto3" json:"HRS,omitempty"`
	BlockID *pb.BlockID `protobuf:"bytes,2,opt,name=BlockID,proto3" json:"BlockID,omitempty"`
}

func (x *EventCompleteProposal) Reset() {
	*x = EventCompleteProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cstypes_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventCompleteProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventCompleteProposal) ProtoMessage() {}

func (x *EventCompleteProposal) ProtoReflect() protoreflect.Message {
	mi := &file_cstypes_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventCompleteProposal.ProtoReflect.Descriptor instead.
func (*EventCompleteProposal) Descriptor() ([]byte, []int) {
	return file_cstypes_proto_rawDescGZIP(), []int{8}
}

func (x *EventCompleteProposal) GetHRS() *HRS {
	if x != nil {
		return x.HRS
	}
	return nil
}

func (x *EventCompleteProposal) GetBlockID() *pb.BlockID {
	if x != nil {
		return x.BlockID
	}
	return nil
}

type EventTimeoutPropose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HRS *HRS `protobuf:"bytes,1,opt,name=HRS,proto3" json:"HRS,omitempty"`
}

func (x *EventTimeoutPropose) Reset() {
	*x = EventTimeoutPropose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cstypes_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTimeoutPropose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTimeoutPropose) ProtoMessage() {}

func (x *EventTimeoutPropose) ProtoReflect() protoreflect.Message {
	mi := &file_cstypes_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTimeoutPropose.ProtoReflect.Descriptor instead.
func (*EventTimeoutPropose) Descriptor() ([]byte, []int) {
	return file_cstypes_proto_rawDescGZIP(), []int{9}
}

func (x *EventTimeoutPropose) GetHRS() *HRS {
	if x != nil {
		return x.HRS
	}
	return nil
}

type EventTimeoutWait struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HRS *HRS `protobuf:"bytes,1,opt,name=HRS,proto3" json:"HRS,omitempty"`
}

func (x *EventTimeoutWait) Reset() {
	*x = EventTimeoutWait{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cstypes_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTimeoutWait) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTimeoutWait) ProtoMessage() {}

func (x *EventTimeoutWait) ProtoReflect() protoreflect.Message {
	mi := &file_cstypes_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTimeoutWait.ProtoReflect.Descriptor instead.
func (*EventTimeoutWait) Descriptor() ([]byte, []int) {
	return file_cstypes_proto_rawDescGZIP(), []int{10}
}

func (x *EventTimeoutWait) GetHRS() *HRS {
	if x != nil {
		return x.HRS
	}
	return nil
}

var File_cstypes_proto protoreflect.FileDescriptor

var file_cstypes_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x73, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x74, 0x6d, 0x1a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x67, 0x6e, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x67, 0x6e, 0x6f, 0x2f, 0x74, 0x6d, 0x32, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x62, 0x66, 0x74, 0x2f, 0x61, 0x62, 0x63, 0x69, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6e, 0x6f, 0x6c, 0x61, 0x6e,
	0x67, 0x2f, 0x67, 0x6e, 0x6f, 0x2f, 0x74, 0x6d, 0x32, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x2f, 0x6d, 0x65, 0x72, 0x6b,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6e, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x67, 0x6e, 0x6f,
	0x2f, 0x74, 0x6d, 0x32, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x62, 0x66, 0x74, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6e, 0x6f, 0x6c, 0x61,
	0x6e, 0x67, 0x2f, 0x67, 0x6e, 0x6f, 0x2f, 0x74, 0x6d, 0x32, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x62,
	0x69, 0x74, 0x61, 0x72, 0x72, 0x61, 0x79, 0x2f, 0x62, 0x69, 0x74, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x07, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x53, 0x74, 0x65, 0x70, 0x12, 0x38, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x6d, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x28, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x52, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x74, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0d, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3b, 0x0a, 0x12, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x74,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x6d, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x53, 0x65, 0x74, 0x52, 0x12, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0b, 0x4c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x0b, 0x4c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x74, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0b, 0x4c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x37, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x53, 0x65, 0x74, 0x52, 0x10,
	0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x29, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x74, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x0a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x35, 0x0a, 0x0f, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x53, 0x65,
	0x74, 0x52, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x72,
	0x74, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x74, 0x6d, 0x2e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x56, 0x6f, 0x74,
	0x65, 0x53, 0x65, 0x74, 0x52, 0x05, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2b, 0x0a,
	0x0a, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x6d, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x0a,
	0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x4c, 0x61,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x6d, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x53, 0x65, 0x74, 0x52, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x22, 0x47, 0x0a, 0x03, 0x48, 0x52, 0x53, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x53, 0x74, 0x65, 0x70, 0x22, 0x9f, 0x02, 0x0a, 0x10,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x65, 0x70, 0x12, 0x38, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x11, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x4c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x27, 0x0a, 0x05, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x6d, 0x2e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x56,
	0x6f, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x05, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x22, 0xa5, 0x05,
	0x0a, 0x0e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x53, 0x74,
	0x65, 0x70, 0x12, 0x38, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x4d, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x73, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x6d, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x53, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x18, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x74,
	0x73, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x6d, 0x2e, 0x42, 0x69, 0x74, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x52, 0x12, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x50, 0x4f, 0x4c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x10, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x50, 0x4f, 0x4c, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x2e, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x50, 0x4f, 0x4c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x6d, 0x2e, 0x42, 0x69, 0x74, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x50, 0x4f,
	0x4c, 0x12, 0x28, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x6d, 0x2e, 0x42, 0x69, 0x74, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x52, 0x08, 0x50, 0x72, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x0a, 0x50,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x74, 0x6d, 0x2e, 0x42, 0x69, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x0a, 0x50,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x61, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x6d, 0x2e, 0x42, 0x69, 0x74,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x12, 0x52, 0x12, 0x43,
	0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x32, 0x0a, 0x0d, 0x43, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x6d, 0x2e, 0x42, 0x69,
	0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x0d, 0x43, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x56,
	0x6f, 0x74, 0x65, 0x53, 0x65, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4e, 0x65, 0x77, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x65, 0x70, 0x12, 0x19, 0x0a, 0x03,
	0x48, 0x52, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x74, 0x6d, 0x2e, 0x48,
	0x52, 0x53, 0x52, 0x03, 0x48, 0x52, 0x53, 0x12, 0x34, 0x0a, 0x15, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x15, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53,
	0x69, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x19,
	0x0a, 0x03, 0x48, 0x52, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x74, 0x6d,
	0x2e, 0x48, 0x52, 0x53, 0x52, 0x03, 0x48, 0x52, 0x53, 0x12, 0x3d, 0x0a, 0x10, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x73, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x53, 0x65, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x10, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x72,
	0x74, 0x73, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x50, 0x61, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74,
	0x6d, 0x2e, 0x42, 0x69, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x0a, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x22, 0x7b, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x77, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x03, 0x48, 0x52, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x74, 0x6d, 0x2e, 0x48, 0x52, 0x53, 0x52, 0x03, 0x48, 0x52, 0x53, 0x12, 0x29,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x74, 0x6d, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x59, 0x0a, 0x15, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x03, 0x48, 0x52, 0x53, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x74, 0x6d, 0x2e, 0x48, 0x52, 0x53, 0x52, 0x03,
	0x48, 0x52, 0x53, 0x12, 0x25, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x44, 0x52, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x22, 0x30, 0x0a, 0x13, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x65, 0x12, 0x19, 0x0a, 0x03, 0x48, 0x52, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x74, 0x6d, 0x2e, 0x48, 0x52, 0x53, 0x52, 0x03, 0x48, 0x52, 0x53, 0x22, 0x2d, 0x0a, 0x10,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x57, 0x61, 0x69, 0x74,
	0x12, 0x19, 0x0a, 0x03, 0x48, 0x52, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x74, 0x6d, 0x2e, 0x48, 0x52, 0x53, 0x52, 0x03, 0x48, 0x52, 0x53, 0x42, 0x37, 0x5a, 0x35, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6e, 0x6f, 0x6c, 0x61, 0x6e,
	0x67, 0x2f, 0x67, 0x6e, 0x6f, 0x2f, 0x74, 0x6d, 0x32, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x62, 0x66,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cstypes_proto_rawDescOnce sync.Once
	file_cstypes_proto_rawDescData = file_cstypes_proto_rawDesc
)

func file_cstypes_proto_rawDescGZIP() []byte {
	file_cstypes_proto_rawDescOnce.Do(func() {
		file_cstypes_proto_rawDescData = protoimpl.X.CompressGZIP(file_cstypes_proto_rawDescData)
	})
	return file_cstypes_proto_rawDescData
}

var file_cstypes_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_cstypes_proto_goTypes = []interface{}{
	(*RoundState)(nil),            // 0: tm.RoundState
	(*HRS)(nil),                   // 1: tm.HRS
	(*RoundStateSimple)(nil),      // 2: tm.RoundStateSimple
	(*PeerRoundState)(nil),        // 3: tm.PeerRoundState
	(*HeightVoteSet)(nil),         // 4: tm.HeightVoteSet
	(*EventNewRoundStep)(nil),     // 5: tm.EventNewRoundStep
	(*EventNewValidBlock)(nil),    // 6: tm.EventNewValidBlock
	(*EventNewRound)(nil),         // 7: tm.EventNewRound
	(*EventCompleteProposal)(nil), // 8: tm.EventCompleteProposal
	(*EventTimeoutPropose)(nil),   // 9: tm.EventTimeoutPropose
	(*EventTimeoutWait)(nil),      // 10: tm.EventTimeoutWait
	(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
	(*pb.ValidatorSet)(nil),       // 12: tm.ValidatorSet
	(*pb.Proposal)(nil),           // 13: tm.Proposal
	(*pb.Block)(nil),              // 14: tm.Block
	(*pb.PartSet)(nil),            // 15: tm.PartSet
	(*pb.VoteSet)(nil),            // 16: tm.VoteSet
	(*pb.PartSetHeader)(nil),      // 17: tm.PartSetHeader
	(*pb1.BitArray)(nil),          // 18: tm.BitArray
	(*pb.Validator)(nil),          // 19: tm.Validator
	(*pb.BlockID)(nil),            // 20: tm.BlockID
}
var file_cstypes_proto_depIdxs = []int32{
	11, // 0: tm.RoundState.StartTime:type_name -> google.protobuf.Timestamp
	11, // 1: tm.RoundState.CommitTime:type_name -> google.protobuf.Timestamp
	12, // 2: tm.RoundState.Validators:type_name -> tm.ValidatorSet
	13, // 3: tm.RoundState.Proposal:type_name -> tm.Proposal
	14, // 4: tm.RoundState.ProposalBlock:type_name -> tm.Block
	15, // 5: tm.RoundState.ProposalBlockParts:type_name -> tm.PartSet
	14, // 6: tm.RoundState.LockedBlock:type_name -> tm.Block
	15, // 7: tm.RoundState.LockedBlockParts:type_name -> tm.PartSet
	14, // 8: tm.RoundState.ValidBlock:type_name -> tm.Block
	15, // 9: tm.RoundState.ValidBlockParts:type_name -> tm.PartSet
	4,  // 10: tm.RoundState.Votes:type_name -> tm.HeightVoteSet
	16, // 11: tm.RoundState.LastCommit:type_name -> tm.VoteSet
	12, // 12: tm.RoundState.LastValidators:type_name -> tm.ValidatorSet
	11, // 13: tm.RoundStateSimple.StartTime:type_name -> google.protobuf.Timestamp
	4,  // 14: tm.RoundStateSimple.Votes:type_name -> tm.HeightVoteSet
	11, // 15: tm.PeerRoundState.StartTime:type_name -> google.protobuf.Timestamp
	17, // 16: tm.PeerRoundState.ProposalBlockPartsHeader:type_name -> tm.PartSetHeader
	18, // 17: tm.PeerRoundState.ProposalBlockParts:type_name -> tm.BitArray
	18, // 18: tm.PeerRoundState.ProposalPOL:type_name -> tm.BitArray
	18, // 19: tm.PeerRoundState.Prevotes:type_name -> tm.BitArray
	18, // 20: tm.PeerRoundState.Precommits:type_name -> tm.BitArray
	18, // 21: tm.PeerRoundState.LastCommit:type_name -> tm.BitArray
	18, // 22: tm.PeerRoundState.CatchupCommit:type_name -> tm.BitArray
	1,  // 23: tm.EventNewRoundStep.HRS:type_name -> tm.HRS
	1,  // 24: tm.EventNewValidBlock.HRS:type_name -> tm.HRS
	17, // 25: tm.EventNewValidBlock.BlockPartsHeader:type_name -> tm.PartSetHeader
	18, // 26: tm.EventNewValidBlock.BlockParts:type_name -> tm.BitArray
	1,  // 27: tm.EventNewRound.HRS:type_name -> tm.HRS
	19, // 28: tm.EventNewRound.Proposer:type_name -> tm.Validator
	1,  // 29: tm.EventCompleteProposal.HRS:type_name -> tm.HRS
	20, // 30: tm.EventCompleteProposal.BlockID:type_name -> tm.BlockID
	1,  // 31: tm.EventTimeoutPropose.HRS:type_name -> tm.HRS
	1,  // 32: tm.EventTimeoutWait.HRS:type_name -> tm.HRS
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_cstypes_proto_init() }
func file_cstypes_proto_init() {
	if File_cstypes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cstypes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cstypes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HRS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cstypes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundStateSimple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cstypes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerRoundState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cstypes_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeightVoteSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cstypes_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventNewRoundStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cstypes_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventNewValidBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cstypes_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventNewRound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cstypes_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventCompleteProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cstypes_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTimeoutPropose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cstypes_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTimeoutWait); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cstypes_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cstypes_proto_goTypes,
		DependencyIndexes: file_cstypes_proto_depIdxs,
		MessageInfos:      file_cstypes_proto_msgTypes,
	}.Build()
	File_cstypes_proto = out.File
	file_cstypes_proto_rawDesc = nil
	file_cstypes_proto_goTypes = nil
	file_cstypes_proto_depIdxs = nil
}
