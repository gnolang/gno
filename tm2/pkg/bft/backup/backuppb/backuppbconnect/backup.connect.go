// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: backuppb/backup.proto

package backuppbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	backuppb "github.com/gnolang/gno/tm2/pkg/bft/backup/backuppb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BackupServiceName is the fully-qualified name of the BackupService service.
	BackupServiceName = "tm.BackupService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BackupServiceStreamBlocksProcedure is the fully-qualified name of the BackupService's
	// StreamBlocks RPC.
	BackupServiceStreamBlocksProcedure = "/tm.BackupService/StreamBlocks"
)

// BackupServiceClient is a client for the tm.BackupService service.
type BackupServiceClient interface {
	StreamBlocks(context.Context, *connect.Request[backuppb.StreamBlocksRequest]) (*connect.ServerStreamForClient[backuppb.StreamBlocksResponse], error)
}

// NewBackupServiceClient constructs a client for the tm.BackupService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBackupServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BackupServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	backupServiceMethods := backuppb.File_backuppb_backup_proto.Services().ByName("BackupService").Methods()
	return &backupServiceClient{
		streamBlocks: connect.NewClient[backuppb.StreamBlocksRequest, backuppb.StreamBlocksResponse](
			httpClient,
			baseURL+BackupServiceStreamBlocksProcedure,
			connect.WithSchema(backupServiceMethods.ByName("StreamBlocks")),
			connect.WithClientOptions(opts...),
		),
	}
}

// backupServiceClient implements BackupServiceClient.
type backupServiceClient struct {
	streamBlocks *connect.Client[backuppb.StreamBlocksRequest, backuppb.StreamBlocksResponse]
}

// StreamBlocks calls tm.BackupService.StreamBlocks.
func (c *backupServiceClient) StreamBlocks(ctx context.Context, req *connect.Request[backuppb.StreamBlocksRequest]) (*connect.ServerStreamForClient[backuppb.StreamBlocksResponse], error) {
	return c.streamBlocks.CallServerStream(ctx, req)
}

// BackupServiceHandler is an implementation of the tm.BackupService service.
type BackupServiceHandler interface {
	StreamBlocks(context.Context, *connect.Request[backuppb.StreamBlocksRequest], *connect.ServerStream[backuppb.StreamBlocksResponse]) error
}

// NewBackupServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBackupServiceHandler(svc BackupServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	backupServiceMethods := backuppb.File_backuppb_backup_proto.Services().ByName("BackupService").Methods()
	backupServiceStreamBlocksHandler := connect.NewServerStreamHandler(
		BackupServiceStreamBlocksProcedure,
		svc.StreamBlocks,
		connect.WithSchema(backupServiceMethods.ByName("StreamBlocks")),
		connect.WithHandlerOptions(opts...),
	)
	return "/tm.BackupService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BackupServiceStreamBlocksProcedure:
			backupServiceStreamBlocksHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBackupServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBackupServiceHandler struct{}

func (UnimplementedBackupServiceHandler) StreamBlocks(context.Context, *connect.Request[backuppb.StreamBlocksRequest], *connect.ServerStream[backuppb.StreamBlocksResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("tm.BackupService.StreamBlocks is not implemented"))
}
